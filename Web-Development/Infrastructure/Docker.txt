Docker
	Abbreviations:
		
	
	Description: Container and Container Orchestration Tool
	
	Resources:
		
	
	Concepts: See 'Software Engineering' Notes on Containerization.
	
	Details:
		Exposition:
			An Application Image is first constructed from a Base Image, the Application and its related Binaries and Libraries.
		
			This Application Image is then used to create Containers, which are running instances of the Application Image.

			A Container runs natively on Linux, and does not include a full OS unlike Virtual Machines. Instead, it shares the host Kernel with other running Containers, whilst maintaining its own emulation of certain Kernel Features for the purposes of creating an Abstraction Layer over the specific Kernel, and to create an Isolated Environment to house the running Application.
				Namespaces:			A Linux Kernel feature that partitions Kernel resources such that two sets of Processes see different sets of Kernel resources.
				Control Groups:		A Linux Kernel feature which limits, accounts for, and isolates Resource Usage of a group of Processes.
			
				Tricks the Application into thinking that it has sole run of the hosting OS.

				Because Containers create an Isolated Environment, Applications can now use their own Tech Stack.

			With Containers, the Application becomes:
				Portable: 			Containers provide an Abstraction Layer over the hosting OS, so that Applications run the same way even on different OSes.
				Accessible: 		Since the Application and its Dependencies are bundled into a Self-Contained Package, the created Image can be uploaded to a Public Registry for sharing, without any fragmentation. Together with the enhanced Portability, this increases the Application's Accessbility.

				Interchangeable: 	Enforcing immutability on Containers simplifies the process of updating a running Application - just run the new Container and kill off the old Container later on.
				Scalable: 			The stateless nature of Containers allows for any instance of the Application to serve the same request.

			If Application Components are themselves Containerized (as part of Micro Services), then even more good benefits occur in:
				Deployment: 		Easier to control, since only parts of the Application are being deployed at any one time.
				Flexibility: 		Different parts of the Application can use differing Tech Stacks to acheive API functionality.

		Components:
			Daemon:				Used to run the Docker Engine.
				OS Specifics:
					Linux:		Runs natively.
					Windows / OSX: Runs a 'boot2docker' Docker Host (acts as a Linux VM).

				The Docker Daemon hosts Running Containers.

			Image:				A Template that tracks the Base Image, Metadata and Settings, the Application, and its related dependencies (Binaries and Libraries).

			Dockerfile:			Automates Image Construction.
			
			Registry:			Publicly or Privately for created Images.

			Container:			Created from Images.
				Operations:
					Start
					Stop
					Move
					Delete

		Workflow:
			1. Pull Base Image from the Docker Registry that most closely resembles desired Tech Stack.

			// Manual
			2. Run the Base Image to generate a Container.
			3. Install additional Tech Stack, Application, etc. inside the Container.
			4. Commit that Container, which will create a new Image.

			// Config File
			5. Create a Dockerfile, which automates the building process for the Image (above steps):
				# Dockerfile must begin with a FROM Instruction, which specifies the Base Image being used.
				FROM <image-path>

				# Define Arguments that can be set during the Command to build the Image:
				ARG <key>
				ARG <key>=<default-value>

				# Sets the Working Directory for any COPY, ADD, ENTRYPOINT, RUN, CMD Instructions that follow.
				WORKDIR <path-within-image>

				# Copy Files into the Container's File System.
				COPY <source-path-relative-to-Dockerfile> <destination-path-within-image>
				# Copy Files from a URL into the Container's File System.
				# Tip: Consider using RUN with Shell Commands (i.e. wget or curl) to further control the behaviour.
				ADD <source-url-path> <destination-path-within-image>

				# Execute Shell Commands in a new layer on top of the current Container, and Commit the results.
				RUN ["<command>", ...]

				# Command to run when Container is started:
				CMD ["<command>", ...]

		Other Tools:
			kaniko				Alternative Tool used to construct Images from a Dockerfile. Does not require the Docker Daemon (or any other special privileges).
				Folders:
					/kaniko
						.docker	Contains instructions to Kaniko when building the Docker Image.
							config.json Stores the Registry Credentials that will be used in publishing the build Docker Image.

						ssl		
							certs Contains SSL / TLS Certificates for communication with external processes.

	Commands:
		docker: 				Used to interact with the Docker Daemon.
			# Specify Build Context (Directory w.r.t where the Build takes place)
			--context <path>

			# Specify the location of the Dockerfile to be used for preparing the Container and building the Image.
			--dockerfile <path-to-Dockerfile>

			# Specify Arguments to be used within the Dockerfile.
			--build-arg <key>=<value> --build-arg <key>=<value> ...

			# Specify where the built Image should be sent to.
			--destination <url> --destination <url> ...

			# Pull an Image from a Repository.
			pull <repository-url>

			# Run the Image.
			run <image>
				-it # Run the Command via an Interactive Terminal.
				-d	# Run the Command in the Background and print Container ID.

				--name <alias> # Assign an alias for the Image.

			# Stop a Running Image.
			stop <image>
	
