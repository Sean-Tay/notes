Helm
	Abbreviations:
	
	Description: Package Manager for Kubernetes that simplifies the deployment and management of Application Images on Kubernetes Clusters.
	
	Resources:
	
	Concepts:
		Release: An Application Image / Container to be deployed onto a Kubernetes Cluster.
		Chart: A Helm Package that contains information sufficient to perform the Release onto a Kubernetes Cluster.
	
		Template: A YAML File that will be used to produce a Kubernetes Manifest using Go.

		Argo: An Openshift-related Continuous Delivery Tool that detects changes made to Helm Charts in the Repo and redeploys the Kubernetes Application automatically.

	Details:
		Chart Folder Structure:
			Chart.yaml
				apiVersion: v<version-number>
				name: <release-name>
				version: <release-version-number>

			# A File which contains pre-defined Values to use for the Release.
			values.yaml
				<key>: <value>

				# These can be referenced via {{ .Values.<key> }} within other Templates.

			templates
				# Common Format:
					apiVersion: v<version-number>
					kind: <resource-type>

					metadata:
						# Note: This has to be unique amongst all Resources within the Project.
						name: <unique-identifier>

				# Define sensitive Configuration Data for a Kubernetes Application, stored in an Encrypted Format on volatile Storage.
				secret.yaml
					type: <secret-type>
					data:
						<key>: <value>
						<key>: {{ .Values.<key> }}

				# Define non-sensitive Configuration Data for a Kubernetes Application, stored in a Base-64 Encoding.
				# The ConfigMap Resource will be loaded as a Volume on the Application Container, which can then be accessed by the Application in the form of Environment Variables, CLI Arguments, or Application-specific Config Files.
				config-map.yaml 
					data:
						<key>: <value>
						<key>: {{ .Values.<key> }}

				# Defines a Logical Set of Pods that would be accessed under a single IP and Port.
				service.yaml
					spec:
						selector:
							app: <application-name>

						type: ClusterIP
						ports:
							- name: web
							  port: <application-web-port>
							  protocol: TCP
							  targetPort: <port>

				# Defines how an Application is to be deployed and maintained.
				deployment.yaml
					

				# Define Configuration to expose a Kubernetes Application on a Public URL.
				# Note: Openshift-specific Resource.
				route.yaml
					apiVersion: route.openshift.io/v<version-number>
					kind: Route
					spec:
						host: <url-for-application>
						port:
							targetPort: web
						tls:
							termination: passthrough
						to:
							kind: Service
							name: <service-name>
							weight: 100
	
	Commands:
		# Install / Upgrade a Chart.
		helm install <release-name> <chart-folder-path>
		helm upgrade <release-name> <chart-folder-path>
			--install			# Install a new Release if it does not exist, or Upgrade an existing Release if it does.
	
			-f <chart-folder-path>/<values-file> # Specify a File containing pre-defined Values to use for the Release.
			--set <key>=<value> # Define more Values before the Command executes.
				# Note: The values here can be referenced via {{ .Values.<key> }} within other Templates.
