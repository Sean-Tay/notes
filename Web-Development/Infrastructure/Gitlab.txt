GitLab:
	Abbreviations:
		CI:						Continuous Integration.
		CD:						Continuous Delivery / Deployment.
	
	Description:
	
	Resources:
	
	Concepts:
		Continuous Integration: The process of Building and Testing an Application each time a change is made.

		Continuous Delivery: 	Continuous Integration, but with the ability to trigger a subsequent Deployment manually.
		Continuous Deployment: 	Continuous Integration, but with the ability to trigger a subsequent Deployment automatically.

		Runner:					Agent that executes the Pipeline.

		Pipeline:				Top-Level Component for implementing CI/CD.
			Stage:				Defines when to run a group of Jobs (in parallel). Will only trigger if the subsequent Stage before it was successful.
				Job:				Defines what to do during a Stage in the Pipeline.
					Image: 			The Execution Environment of a Job (that is retrieved and invoked by the executing Runner).

		Review App:				Allows preview of an Application after a change is made and it passes the Pipeline.

	Details:
		CI/CD Setup:
			Runner Configuration is specified through a gitlab-runner/config.toml File.
				# Configure Docker Image Repository that is referenced when an Image is to be used for a Job.
				# Configure the Scripting Language for a Job's Script.

			Pipeline Configuration is specified through a .gitlab-ci.yml File:
			Note: Do NOT use Tabs; use Spaced Indentation.
				# Specify start of YAML File via 3 Dashes
				---

				# Import Content from other .gitlab-ci.yml Files.
				include:
					- project: <gitlab-project-url-from-group-root>
					  ref: <branch>
					  file: 
						- <file-path-relative-to-above>
						- # ...
					
					# ...

				# Define custom prefilled Variables to be used within the Pipeline:
				variables:
					# Note: Boolean Values should be quoted as a String.
					<key>: <value>

					# OR

					<key>:
						value: <value>
						description: <description>

					# Note: Special Variables:
						"$CI_PROJECT_DIR"

						"$CI_JOB_NAME"
						"$CI_COMMIT_REF_NAME"
						"$CI_COMMIT_REF_SLUG"

						"$CI_PIPELINE_SOURCE"
							"web"	# Pipeline triggered from GitLab UI

							"push"	# Pipeline triggered from a Git Push
							"merge_request_event" # Pipeline triggered from a Merge Request
							"schedule" # Pipeline created from a schedule.

				workflow:
					# Describe Rules to control the conditions in which the Pipeline will be created and run:
					rules:
						- if: <boolean-expression>
						  # Note: Will override Global Variables defined above:
						  variables:
							# ...
						  when: always | on_success | never

						# ...

						# Note: Avoid a final 'when: always' Catch-All, as this can cause multiple Pipelines to be created and run in parallel.
						# - when: always

				# Define default Job Behaviors:
				default:
					<job-keyword>: # ...

					# Example:
					# after_each: echo "Job Completed" # Each Job will printout "Job Completed" unless they have their own after_each Command(s) defined.

				# Define the Stages in a Pipeline:
				stages:
					- <stage-name>
					# ...

				# Define a Job:
				<job-name>:
					# Define another Job to base off from:
					extends: <job-name>
					extends: .<hidden-job-name>

					# Define the Stage a Job belongs to:
					stage: <stage-name>

					# Run this Job with a Runner that has all the Tags defined here:
					tags:
						- <tag-value>
						# ...

					# Specify when should Jobs be executed, ignoring which Stage it belongs to:
					# Note: If needs: [], the Job will immediately execute.
					# Note: Default Limit on Array Size: 50.
					needs: [ <job-name>, ... ]
						# In case the Job was triggered from another Pipeline:
						pipeline: <absolute-gitlab-path>

						# OR

						- job: <job-name>
						  artifacts: <boolean>

					# Specify specific Artifacts that this Job needs from prior Jobs
					# Note: All Artifacts generated from prior Jobs are available to this Job by default.
					# Note: To specify that the Job should take no Artifacts, use dependencies: [].
					dependencies: [ "<artifact-path>", ... ]

					# Describe "Whitelist" / "Blacklist" type Conditions in which the Job will be added to the Pipeline and run:
					# Note: Cannot exist when rules is specified.
					only/except:
						# Refs:
							# Hack: Replace 'master' or 'main' with current <branch-name> to test changes to pipeline.
							- <branch-name>

						# CI/CD Variables:
							- $<variable> == <value>

						# ...

					# OR

					# Describe the Conditions in which the Job will be run:
					# Note: Cannot exist when only/except are specified.
					# Note: Rules are evaluated when the Pipeline is created.
					# Note: Rules are evaluated in order of specification, until a match is found (OR-based). If none are found, the Job will not be added to the Pipeline.
					rules:
						# - if: $CI_COMMIT_BRANCH == "master"
						# 	changes:
						# 		- "<path>"
						# 		- ...
						# 	when: on_success

						# Inheriting Rules from Hidden Jobs:
						# 	.hidden-job:
						# 		- if: <condition> # Note: These are not defined within the Hidden Job's Rule Block.
						#		  when: never
						# 		- ...
						#
						#	inheriting-job:
						# 		rules: 
						# 			- !reference [.hidden-job]
						# 			- ...

						# if
							# Execute a Job if <condition> evaluates to true
							# - if: <condition>

							# Prevent a Job from running if <condition> evaluates to true
							# Tip: Probably the best approach when declaring reusable Rules in Hidden Jobs.
							# - if: <condition>
							# 	when: never

							# Note: If <condition> evaluates to false, Gitlab will evaluate the next Rule, if any.
							# Tip: Better to use if + when: never to prevent accidental evaluation of subsequent Rules

						# when
							# Prevent further Rules from being considered if evaluation reaches this Rule
							# - when: never

						# ...

					# Cross-Project Specifics:
						# Trigger a Pipeline in another Downstream Project:
						trigger:
							project: <absolute-gitlab-path>
							branch: <branch-name>
							strategy: depend # Mirror the Status of this Job based on the outcome of the triggered Downstream Pipeline

					# Define the Environment / Docker Image that the Job will be executed in:
					image: <image-name> # Latest Tag
					image: <image-name>:<tag> # Specific Version
					image: <image-name>@<digest>

					image:
						name: <image-name>
						entrypoint: ["<path-from-image-root>", "<arg-1>", ...]

					# Define Job-specific Variables:
					# Note: These cannot be prefilled when the Pipeline is triggered manually.
					variables:
						# ...

					# Job Scripts: The Runner will combine the Scripts below and send it into the Image Container's Shell stdin.
						# Commands to run before the Job is executed:
						before_script:
							- <command>
							# ...

						# Commands to execute when the Job is executed:
						script:
							- <command>
							# ...

						# Commands to run after the Job is executed:
						after_script:
							- <command>
							# ...

					# Define Build Artifacts (usually generated from Job Scripts).
					artifacts:
						# Note: The Folder Structure of the resulting .zip File is relative to the Repo Root as well. For example, if a UI Build is generated at ./ui/dist and the path is specified as such below, then the .zip File would also contain ./ui/dist.
						paths:
							- <path-from-repo-root>

						# Specify Build Artifacts created from Testing.
						# Note: Always uploaded, but if there is a need to browse and view the Report Files, specify 'paths' in addition to 'reports'.
						reports:
							<reporter-type>: "<path-from-repo-root>"

							coverage_report:
								coverage_format: "<gitlab-recognized-format>"
								path: "<path-from-repo-root>"

						# When should Build Artifacts be created.
						when: always | on_success

						# Control how long a Build Artifact is kept.
						expire_in: <quantity> <time-unit>
					
					# Define if the Job is allowed to fail:
					# Default behaviour is to allow failure when triggered Manually.
					allow_failure: true

				# Define a Hidden Job that will be ignored by the Runner:
				# Tip: Useful to define base Jobs that other Jobs can extend from:
				.<hidden-job-name>:
					# ...

				# Define a Job that belongs to a Group:
				<group-name> <part-number>/<total-number-parts>:
					# ...

				# Specify end of YAML File via 3 Dots:
				...

	Commands:
		
	
