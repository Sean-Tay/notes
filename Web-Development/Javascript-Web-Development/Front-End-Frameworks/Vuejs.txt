Vue.js:
	Abbreviations:
		SPA: 						Single Page Application.
	
	Description: A Frontend Framework for building Web Applications.
	
	Resources:
		Quick Start: https://youtu.be/Wy9q22isx3U
	
	Concepts:
		Virtual DOM: A Tree whose Nodes represent Logical HTML Tags.
	
	Details:
		Configuration:
			// Editor Integration:
				// VSCode:
					Install the es6-string-html VSCode Extension for Typing Support within Template Literals on VSCode.

		Syntactically, Vue introduces JS into your HTML.

		Vue faciliates the construction of SPAs:
			Root Component:
				// JS
					import Vue from 'vue';
					const app = Vue.createApp(
						// Options Object
						{
							data: () => ({
								// Return an Object with Key-Value Pairs that can be referenced in the HTML Source
								'<key>': <value>,
							})
						}
					);

					const mountedApp = app.mount('#<id>');

				// HTML
					<body>
						<div id="<id>">
							<!-- Double Curly Braces allow the injection of any legitimate Javascript Syntax -->
							{{ <key> }}
						</div>
					</body>

		Directives: Used to express Behaviour within HTML Syntax:
			Usage: <html-tag <directive>[="<value>"]> ... </html-tag>

			v-for="<item> in <data-object-key>"					
			
			<!-- Bring a JS Value into HTML -->
			v-bind: 
				v-bind:key="<item>.id" 
				v-bind:class="{<class-name>:<boolean>}"
				v-bind:<other-component-prop>="<data-object-key>"

			<!-- DOM Event Listeners -->
			v-on: 
				<!-- Tip: @ - shorthand for "v-on:" -->

				v-on:<dom-event>="<custom-function>"
				v-on:<dom-event>="$emit('<custom-dom-event>', <props> ...)"

			<!-- Two-Way Binding (for Inputs) - Combination of v-bind and v-on -->
			v-model: 
				v-model="<data-object-key>"

		Vue Components: 
			Vue makes use of self-contained Components with their own Component-Level State. 
				Vue Components eschew the traditional idea of Separation of Concerns - HTML, CSS and JS no longer need to be in separate files. Instead, the code meant for each is combined within a single .vue file per Vue Component.		
			
				When these States change, it manipulates the Virtual DOM to invoke changes to just parts of the Pages, as opposed to reloading the whole Page. This is managed by the Vue Reactivity System.

			Global Components: Pure Javascript - can be assessed by any root Vue Instance or sub-Components created after these Global Components are created.
				import Vue from 'vue';
			
				Vue.component(
					'<component-name>', 
					{
						template: '<div> ... </div>',
						data() {
							return {
								<data-object-key>: "",
								// ...
							}
						},
						// ...
					}
				);
		
			Single File Components: .vue files
				(HTML) Output:
					<template>
						<div id="<component-name>">
							// ... HTML Interpolation and Construction for Dynamic Content ...
							// ... <other-component-name <other-component-prop>="val"> </other-component-name> ...
						</div>
					</template>

				(JS) Functionality: 
					import <other-component-name> from "<other-component-path>";

					export default {
						name: "<component-name>",
						props: {
							// Component Parameters
							<component-prop>: <component-prop-type>,
						}
						components: {
							<other-component-name>,
							...
						},
						methods: {
							<custom-function>() {

							},
							...
						},
						directives: {
							<custom-directive>: {
								{ bind | inserted | update | componentUpdated | unbind }: function(el) {
									...
								}
							},
						},
						created() {
							// Function that Triggers when the Vue Component is loaded
						},
						data() {
							// Function that returns a Data Object
							return {
								<data-object-key>: "",
								...
							}
						},
					}

				(CSS) Style:
					<style scoped> // Styling only affects the Component
						...
					<style>

		VueX: Utility that handles Application-Level State Management to maintain and share States across multiple Components, similar to Redux / Flux.
			Central Store for all Components. Avoids complex “prop” graphs in Component Trees.

			Actions: Update Global State and trigger responses from Components.
	
	Commands: 
		Vue CLI 3:
			Features:
				Babel, Typescript, ESLint, PostCSS
				Dev Server with Hot Reload
				Vue GUI for managing Application.

			vue create "<name>" 	# Create an Application with name <name>.

			vue ui 					# Launch a GUI for Project Management.

