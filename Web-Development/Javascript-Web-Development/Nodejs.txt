Node.js:
	Abbreviations:
		AMD: 					Asynchronous Module Definition.
	
	Description: A configurable JS Runtime-Environment, independent of the Web Browser.
	
	Tutorials:
		
	
	Concepts:
		Module:					A File or Directory (with an index.js) whose defined functionality is designed to be re-usable across multiple parts of the Project.
	
	Details:
		Front-End Code, Back-End Code, and Assets are usually pre-compiled and transformed down to HTML, CSS and CommonJS Assets. These Assets are then served by the Node Server process.
			Although usually, Front-End Code is the one with the more involved Build Process:
				Webpack does some useful optimizations on JS Code (tree shaking, bundling, minification), resulting in faster file transfer from Server Side to Client Side. There is no need to do this for Server Side operations ; the added complexity does not produce significant benefit.

				Babel is required for Client Side, since Browsers may not natively support > ES6 spec. On the other hand, NodeJS is starting to support most of the ES6 spec, so Babel is not actually required for the Server Side.
					Certain ES6 Mechanisms and corresponding NodejS Mechanisms may differ in functionality. Example: require() and import.

				That being said, special use-cases may warrant the usage of JS Build Processes for Back-End Code as well.

		Code:
			// NodeJS: Node specific implementation of CommonJS.
				module.exports = {
					function1 : function () { // ... }, 
					function2 : function () { // ... }, 
					component1 : React.createClass({ render : function () { return; } })
				} // the importable functionality of a Node JS file is defined within this module.exports JS Object.
				
				const importedModule = require("./fileToImport.js"); 		// References the module.exports Object defined in the specified fileToImport.js.
					// Checks if the string passed in is a relative path - if not, it will search for a Module in the special node_modules Folder with that name instead.
						// It will automatically also search under an existing node_modules directory.

				importedModule.function2(); 								// Execute function2().

			// ES6: Depending on the Node version, the following syntax may be used instead. See the section under 'Javascript' Notes for more exposition.
				const exportObj = {
					// ...
				}

				export { exportObj }

				import { exportObj as importedObj } from './exportObjFile.js';
					// Note: This will not automatically search under node_modules directory - as per the ES6 spec. Requires Babel to compile it to require().
				
				// Use importedObj ...

			// In-Built Variables:
				global														// Contains built-in Objects available to all Node Modules.

				process.memoryUsage()										// CPU Usage for the current Process.

				process.argv												// Contains each element of the command, delimited by spaces, used to create the Process.
				process.env													// An Object which stores and controls information about the Environment in which the Process is currently running in.
				process.env.VARIABLE_NAME 									// Used to get and set global or externally set Node Environment variables.
					process.env.NODE_ENV 									// Convention: Used to indicate various Environments.

				process.stdin.on('data', (userInput) => {					// Receive User Input.
					let input = userInput.toString()
					console.log(input)
				});

				process.cwd()												// Returns the abosolute path of the Directory where the Process was started in.
				__dirname													// Returns the absolute path of the Directory containing the currently executing File that this is used in.

			// Event Driven Architecture: For handling situations without knowing when exactly they occur ; contrast with traditional imperative programming which executes instructions in a pre-defined order.
				const events = require('events');

				const exampleEventEmitter = new events.EventEmitter();
				const callbackFunction = function(data) {
					// handle
				}; 

				exampleEventEmitter.on(
					<event-type>,
					callbackFunction
				);

				exampleEventEmitter.emit(
					<event-type>,
					<event-data>
				);

			// Asynchronous: Will not fire if synchronous Event does not terminate.
				setTimeout(callbackFunction, <ms-duration>);
				setInterval(callbackFunction, <ms-duration>);

				async ... await

			// Error-Handling: Traditional try ... catch won't work for asynchronous Error Events.
				// Error-First Callback: Error Object given as first expected argument. The callback Function is the entity that does the Error Handling.
				const errorFirstCallback = (err, data)  => {
					if (err) {
						// Error
					} else {
						// No Error
					}
				}

				api.invokeMethod('data', errorFirstCallback);

			// File I/O: Primarily used for sending over Web Files stored on the Server to the Client.
				const fs = require('fs');

				// Each method from the fs module has both a synchronous and asynchronous variant.

				fs.readFile( // Read all of one File at one go.
					<file-path>,
					<file-character-encoding>,
					errorFirstCallback
				);

				const fsOutputHandle = fs.createWriteStream(<file-path>);

				fileStream.write(<line>);
				fileStream.end();

				const readline = require('readline');

				const eventEmitterInterface = readline.createInterface({
					input: fs.createReadStream(<file-path>)
				});

				eventEmitterInterface.on(
					'line', // Listen for 'line' Events
					(fileLine) => {
						console.log(`The line read: ${fileLine}`);
					}
				);

			// Web Server:
				const http = require('http');

				let requestListener = (request, response) => {
					request.method // POST, GET, PUT, DELETE
					request.url // Route
					
					response.writeHead(200, {'Content-Type': 'text/plain' });
					response.write('Hello World!\n');

					response.end();
				};

				const server = http.createServer(requestListener);

				server.listen(process.env.PORT || <port-number>);
	
	Commands:
		Node.js:
			node "<file.js>"											// Run a .js file under Node.
			node --prof "file.js" 										// Run a .js file under Node with profiling, storing the profiling in a .txt file.
			node --prof-process "isolate-0xnnnnnnnnnnnn-v8.log" (where n is a digit) // Process the text file produced from profiling.
			
			package.json - Specifies the configuration of a Node Environment.
				{
					"scripts": { 										// Specify action(s) to be run upon certain Node Environment lifecycle events.
						// Note: May want to use npm-run-all to execute npm commands in parallel.
						"build": "<command1> && <command2> ... "		// Specify commands(s) to be executed when 'npm run build' is executed.
						"start": "<command1> & <command2> ..."			// Specify commands(s) to be executed when 'npm start' is executed.
					}							
					"dependencies": { // ... // }						// Specifies the Modules that the Node Environment depends on to run correctly.
					"devDependencies": { // ... // }					// Specifies Modules that the Node Environment uses during development.
				}

			npm - A package manager for a Node Environment. Skip to yarn if possible.
				npm install -g node 									// Update Node.
				npm install -g npm stable								// Update npm.
			
				npm init 												// Initialize a new Node Environment.
				
				npm install 											// Add all Modules specified within a package.json locally to the current Node Environment.

				npm install <module> 									// Add a Module locally to the current Node Environment. Older versions of npm will not automatically add the Module into the Node Environment's package.json.
					--save-dev											// Add a development-level Module locally to the current Node Environment, and save it to its package.json.
					--save												// Add a Module locally to the current Node Environment, and save it to package.json.
					-g													// Install a Module globally (outside of the current Node Environment).
				
				npm uninstall <module>									// Remove a Module from the current Node Environment. Older versions of npm will not automatically remove it from package.json.
					--save-dev											// Remove a development-level Module locally from the current Node Environment, and propagate the changes to its package.json.
					--save												// Remove a Module locally from the current Node Environment, and propagate the changes to its package.json.
					-g													// Remove a globally installed Module.
				
				npm list 												// View all installed Node Modules in the current Node Environment.
					--depth=0											// Without Dependencies.
				npm list -g												// View all user-installed Node Modules alongside their version information.
					--depth=0											// Without Dependencies.

				npm view <module> version								// View the Node Module's latest version from the npm registry.

				npm update <module>										// Update a Node Module to the latest version.
				npm update <module>@<version>							// Update a Node Module to the specific <version>.
				
				npm run <command> [-- <arg>, ...]						// Execute a <command> (script) that was specified as a property within the "scripts" Object of package.json.
				
				npx <command> [-- <arg>, ...]							// Execute a <command> for a locally installed package.
				
				npm publish "<file.js>"									// Publish package to npm codebase.
			
			yarn - A better version of npm. Avoid installing with npm, install separately.
				yarn init												// Initialize a new Node Environment.

				yarn install											// Add all Modules specified within a package.json locally to the current Node Environment.

				yarn add <module>[@<{ version | tag }>]					// Add a Module, optionally of a specific version or tag, to the local Node Environment, and adds it into package.json to be used by the current Node project.
					--dev												// Add a development-level Module, optionally of a specific version or tag, to the local Node Environment, and adds it into package.json to be used by the current Node project.

				yarn upgrade <module>[@<{ version | tag }>]				// Upgrade any Module, optionally to a specific version or tag, within the local Node Environment, and propagate the changes to package.json / current Node project.

				yarn remove <module>									// Remove any Module from the local Node Environment, and propagate the changes to package.json / current Node project.

				yarn global add <module>[@<{ version | tag }>]			// Install a Module globally (outside the Node Environment).
				yarn global upgrade <module>[@<{ version | tag }>]		// Upgrade a globally installed Module.
				yarn global remove <module>								// Remove a globally installed Module.

				yarn [run] <command> [<arg>, ...]						// Execute a <command> (script) that was specified as a property within the "scripts" Object of package.json.
			
		Nodemon.js - Wraps around Node to enable hot reloading of changed files in the Node Environment during runtime.

		Forever.js - A Module which enables the automatic restart of a running Node Environment should it crash.

		Babel.js - Loader for a Transpiler between JS standards (ES5++ -> ES5). ES5 possibly supported by more browsers than ES5++.
			// Steps:
				yarn install babel-cli
				yarn install babel-preset-env
				
				// For .babelrc, ensure the Object within has:
				presets = ["env"] // This is a configuration which tells Babel to always use the latest spec.

				// For .package.json, ensure the Object within has:
				package.json.scripts.build = "babel src -d lib" // Command babel to convert all .js Source Code into ES5 Compatable Versions into a separate 'lib' Directory.

		Rewire.js - Adds a special Setter and Getter Method to Modules so you can modify their behaviour for better Unit Testing.
			// Inject Mocks for other Modules or Globals (e.g process)
			// Inspect Private Variables.
			// Override Variables within the Module.

		Supertest.js - Allows testing of Endpoints / HTTP Assertions via SuperAgent.js.
			// Accepts any http.Server instance, and test for the contents of the returned Response object when querying with a particular Route with a Request Object.
	
