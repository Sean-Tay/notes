Node.js:
	Abbreviations:
		AMD: 					Asynchronous Module Definition.
	
	Description: A configurable JS Runtime-Environment, independent of the Web Browser. Based on Chrome's JS Runtime-Environment.
	
	Resources:
		Front-End Node Project Template Creator: https://createapp.dev/
	
	Concepts:
		Node Package:			A File or Directory that is described by a package.json.
		Node Module: 			A File or Directory located within the node_modules Directory of a Node Project which has some JS execution entry-point available, allowing Node to load it.

		Node Dependency:		A Node Package or Node Module that is installed for use in one or more Node Projects.
	
	Details:
		Front-End Code and Assets are usually pre-compiled and transformed down to HTML, CSS and CommonJS Assets. These Assets are then served by the Node Server process.
			Front-End Code is the one with the more involved Build Process:
				Webpack does some useful optimizations on JS Code (tree shaking, bundling, minification), resulting in faster file transfer from Server Side to Client Side. There is no need to do this for Server Side operations ; the added complexity does not produce significant benefit.

				Babel is required for Client Side, since Browsers may not natively support > ES6 spec. On the other hand, NodeJS is starting to support most of the ES6 spec, so Babel is not actually required for the Server Side.
					Certain ES6 Mechanisms and corresponding NodeJS Mechanisms may differ in functionality. Example: require() and import.

				That being said, special use-cases may warrant the usage of JS Build Processes for Back-End Code as well.

		Code:
			// CommonJS or ServerJS: Module System used before the Javascript Spec incorporated it.
				// The importable functionality of a NodeJS File is defined within this module.exports JS Object.
				module.exports = {
					function1 : function () { // ... }, 
					function2 : function () { // ... }, 
					component1 : React.createClass({ render : function () { return; } })
				};
				
				// References the module.exports Object defined in the specified fileToImport.js synchronously.
				const importedModule = require("./fileToImport.js"); 		
					// Checks if the string passed in is a relative path, and attempts to find the required Dependency from the Project itself.
					// If it does not find it in the step above, it will proceed to check the node_modules Directory.

				// Execute function2().
				importedModule.function2(); 								

			// ES6: Depending on the Node version or Project configuration, the following syntax may be used instead. See the section under 'Javascript' notes for more exposition.
				const exportObj = {
					// ...
				}

				export { exportObj }

				import { exportObj as importedObj } from './exportObjFile.js';
					// Note: This will not automatically search under node_modules directory - as per the ES6 spec. Requires Babel to compile it to require().
				
				// Use importedObj ...

			// In-Built Variables:
				global														// Contains built-in Objects available to all Node Modules.

				process.memoryUsage()										// CPU Usage for the current Process.

				process.argv												// Contains each element of the command, delimited by spaces, used to create the Process.
				process.env													// An Object which stores and controls information about the Node Project in which the Process is currently running in.
				process.env.VARIABLE_NAME 									// Used to get and set global or externally set Node Project variables. 
					// These are usually set in the "scripts" section of package.json specified commands.
						// <variable>=<value> ... node script.js

					// The 'cross-env' Package is a Shim for setting these variables across different Platforms.
						// npx cross-env <variable>=<value> ... node script.js

					// Additionally, one can specify these variable-value pairs inside an external .env File.
						// Shell Commands can be used to load them into the Process:
							// export $(cat .env) && node script.js

						// The 'dotenv' npm Package can also load these at runtime, without overriding existing variables:
							require('dotenv').config()

					process.env.NODE_ENV 									// Convention: Mainly used to indicate various configurations for a Node Project.

				process.stdin.on('data', (userInput) => {					// Receive User Input.
					let input = userInput.toString()
					console.log(input)
				});

				process.cwd()												// Returns the absolute path of the Directory where the Process was started in.
				__dirname													// Returns the absolute path of the Directory containing the currently executing File that this is used in.

			// Event Driven Architecture: For handling situations without knowing when exactly they occur ; contrast with traditional imperative programming which executes instructions in a pre-defined order.
				const events = require('events');

				const exampleEventEmitter = new events.EventEmitter();
				const callbackFunction = function(data) {
					// handle
				}; 

				exampleEventEmitter.on(
					<event-type>,
					callbackFunction
				);

				exampleEventEmitter.emit(
					<event-type>,
					<event-data>
				);

			// Asynchronous: Will not fire if synchronous Event does not terminate.
				setTimeout(callbackFunction, <ms-duration>);
				setInterval(callbackFunction, <ms-duration>);

				async ... await

			// Error-Handling: Traditional try ... catch won't work for asynchronous Error Events.
				// Error-First Callback: Error Object given as first expected argument. The callback Function is the entity that does the Error Handling.
				const errorFirstCallback = (err, data)  => {
					if (err) {
						// Error
					} else {
						// No Error
					}
				}

				api.invokeMethod('data', errorFirstCallback);

			// File I/O: Primarily used for sending over Web Files stored on the Server to the Client.
				const fs = require('fs');

				// Each method from the fs Node Module has both a synchronous and asynchronous variant.

				// Read the entirety of the File synchronously.
				fs.readFile( 
					<file-path>,
					<file-character-encoding>,
					errorFirstCallback
				);

				const fsOutputHandle = fs.createWriteStream(<file-path>);

				fileStream.write(<line>);
				fileStream.end();

				const readline = require('readline');

				const eventEmitterInterface = readline.createInterface({
					input: fs.createReadStream(<file-path>)
				});

				eventEmitterInterface.on(
					'line', // Listen for 'line' Events
					(fileLine) => {
						console.log(`The line read: ${fileLine}`);
					}
				);

			// Web Server:
				const http = require('http');

				let requestListener = (req, res) => {
					// HTTP Request Variables:
						// req.method // POST, GET, PUT / PATCH, DELETE
						// req.url // Requested Route
					
					// HTTP Response:
						res.writeHead(
							<HTTP-Status-Code>,
							// HTTP Response Headers:
							{
								<HTTP-Response-Header-Field>: <value> 
							}
						);
						res.write('Hello World!\n');

					res.end();
				};

				const server = http.createServer(requestListener);

				server.listen(process.env.PORT || <port-number>);
	
	Commands:
		Node.js:
			node "<file.js>"											# Run a .js file under Node.
			node --prof "file.js" 										# Run a .js file under Node with profiling, storing the profiling in a .txt file.
			node --prof-process "isolate-0xnnnnnnnnnnnn-v8.log" (where n is a digit) # Process the text file produced from profiling.
			
			package.json - Specifies the configuration of a Node Project.
				{
					"scripts": { 										// Specify action(s) to be run upon certain Node Project lifecycle events.
						// Tip: May want to use npm-run-all to execute npm commands in parallel.
						"build": "<command1> && <command2> ... "		// Specify commands(s) to be executed when 'npm run build' is executed.
						"start": "<command1> & <command2> ..."			// Specify commands(s) to be executed when 'npm start' is executed.
					}
					"dependencies": { // ... // }						// Specifies the Node Dependencies that the Node Project depends on to run correctly.
					"devDependencies": { // ... // }					// Specifies the Node Dependencies that the Node Project uses during development.

					"engines : {
						"npm": "<version>"								// Specifes version of NPM to use when installing the Node Project's Dependencies.
						"node": "<version>"								// Specifies version of Node to use to run the Node Project.
					}
				}

			npm - A package manager for a Node Project. Skip to yarn if possible.
				npm config set @<scope>:registry <registry-url>			# Set npm to reference another Node Registry when referencing Scoped Node Dependencies.

				npm install -g node 									# Update Node.
				npm install -g npm stable								# Update npm.
			
				npm init 												# Initialize a new Node Project.
					-y													# Initialize a new Node Project with default metadata.
				
				npm install 											# Add all Node Dependency specified within a package.json locally to the current Node Project.
					i													# Alias for the above.

				npm install <dependency> 								# Add a Node Dependency locally to the current Node Project. Older versions of npm will not automatically add it into the Node Project's package.json.
					--save-dev											# Add a development-level Node Dependency locally to the current Node Project, and save it to its package.json.
					--save												# Add a Node Dependency locally to the current Node Project, and save it to package.json.
					-g													# Install a Node Dependency globally (outside of the current Node Project).
				
				npm uninstall <dependency>								# Remove a Node Dependency from the current Node Project. Older versions of npm will not automatically remove it from package.json.
					--save-dev											# Remove a development-level Node Dependency locally from the current Node Project, and propagate the changes to its package.json.
					--save												# Remove a Node Dependency locally from the current Node Project, and propagate the changes to its package.json.
					-g													# Remove a globally installed Node Dependency.
				
				npm list 												# View all installed Node Dependencies in the current Node Project.
					--depth=0											# Without Dependencies.
				npm list -g												# View all user-installed Node Dependencies alongside their version information.
					--depth=0											# Without Dependencies.

				npm view <dependency> version							# View the Node Dependency's latest version from its Node Registry.

				npm update												# Update all Node Dependencies in a Node Project to their latest verisions (before a major version change), respecting specified semver in package.json.
				npm update <dependency>									# Update a Node Dependency to the latest version (before a major version change), respecting specified semver in package.json.
				npm update <dependency>@<version>						# Update a Node Dependency to the specific <version>, respecting specified semver in package.json.
				
				npm run <command> [-- <arg>, ...]						# Execute a <command> (script) that was specified as a property within the "scripts" Object of package.json.
				
				npx <command> [-- <arg>, ...]							# Execute a <command> for a locally installed Node Dependency.
				
				npm publish "<file-path>"								# Publish a Node Dependency rooted at <file-path> to a Node Registry.
			
			yarn - A better version of npm. Avoid installing with npm - install separately.
				yarn config set registry <registry-url>					# Set npm to reference another Node Registry when referencing Scoped Node Dependencies.

				yarn init												# Initialize a new Node Project.

				yarn install											# Add all Node Dependencies specified within a package.json locally to the current Node Project.

				yarn add <dependency>[@<{ version | tag }>]				# Add a Node Dependency, optionally of a specific version or tag, to the local Node Project, and adds it into the Node Project's package.json.
					--dev												# Add a development-level Node Dependency, optionally of a specific version or tag, to the local Node Project, and adds it into the Node Project's package.json.

				yarn upgrade <dependency>[@<{ version | tag }>]			# Upgrade any Node Dependency, optionally to a specific version or tag, within the local Node Project, and propagate the changes to the  Node Project's package.json.

				yarn remove <dependency>								# Remove any Node Dependency from the local Node Project, and propagate the changes to the Node Project's package.json.

				yarn global add <dependency>[@<{ version | tag }>]		# Install a Node Dependency globally (outside the Node Project).
				yarn global upgrade <dependency>[@<{ version | tag }>]	# Upgrade a globally installed Node Dependency.
				yarn global remove <dependency>							# Remove a globally installed Dependency.

				yarn [run] <command> [<arg>, ...]						# Execute a <command> (script) that was specified as a property within the "scripts" Object of package.json.
			
			Bash Script to check for Local Deprecated Dependencies for Node Project:
				jq -r '.dependencies,.devDependencies|keys[]' package.json | while read line; do \
					printf "$line: "
					[ "$(npm show "$line" | grep -ic 'DEPRECATED')" != "0" ] && \
					printf "\e[1;31m""DEPRECATED\n""\e[0m" || \
					printf "\e[1;32m""not deprecated.\n""\e[0m"
				done

		Nodemon.js - Wraps around Node to enable Hot Reloading of changed files in the Node Project during runtime.

		Rewire.js - Adds a special Setter and Getter Method to Modules so you can modify their behaviour for better Unit Testing.
			// Inject Mocks for other Modules or Globals (e.g process)
			// Inspect Private Variables.
			// Override Variables within the Module.

		Supertest.js - Allows testing of Endpoints / HTTP Assertions via SuperAgent.js.
			// Accepts any http.Server instance, and test for the contents of the returned Response object when querying with a particular Route with a Request Object.
	
