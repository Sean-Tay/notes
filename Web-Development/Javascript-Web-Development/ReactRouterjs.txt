React-Router:
	Abbreviations:
		URL:					Uniform Resource Locator.

		HTML:					HyperText Markup Language.
	
	Description:
		A Framework to support Client-Side Front-End Routing for Single-Page React Applications.
	
	Tutorials:
		
	
	Concepts:
		Single Page Web Application: A Web Application that only uses a single HTML Page to display content. Content changes mainly through Javascript, without having to refresh / reload the Page.

		Routing:				The idea of leading Users to different parts of the Web Application via different Paths in the URLs.
		
		Static Routing:			Used to describe Routing before Application Rendering.
		Dynamic Routing:		Used to describe Routing during Application Rendering.
	
	Details:
		Components:
			Router: The Component that wraps around the topmost level of the Web Application.
				import { BrowserRouter, HashRouter } from 'react-router-dom';

				// Router that uses the Path portion of a URL to change the wrapped content accordingly.
				// Requires that only one HTML Page be served to the Client.
				// Incorporates the HTML5 History API, which supports Browser Back and Forward Navigation.
				<BrowserRouter
					baseName="/<base-path>"
				>
					<App />
				</BrowserRouter>

				// Router that uses the hash portion of a URL to change the wrapped content accordingly.
				<HashRouter
					baseName="/<base-path>"
				>
					<App />
				</HashRouter>

			Switch and Route: The Components that implement the Routing Logic.
				import { Switch, Route } from 'react-router-dom';

				// Switches contain Routes, and Routes contain Application Elements.
				// Note: Application Elements may contain more nested Switches and Routes.

				const RouteExample = () => (
					<Route path="/<route-path>">
						<AppPage />
					</Route>

					// OR

					// Note the lack of Angular Brackets when referencing AppPage - it is the Component, not the JSX -> React Element.
					<Route path="/<route-path>" component={AppPage} />
				);

				const App = () => {
					return (
						<>
							// Application Elements
								// ...

							// Router Elements
								// Renders if it matches the Path.
								<Route path="/<route-path>">
									<AppPage />
								</Route>

								// Renders *only* the first Child that matches the Path, or null if there are no matches.
								<Switch>
									<Route path="/<route-path-1>">
										// ...
									</Route>

									// ...
								</Switch>
						</>
					);
				}

			Link, NavLink, and Redirect: Components that change the Path and triggers the Routing Behaviour.
				import { Link, NavLink, Redirect } from 'react-router-dom';

				// Compiles down to an <a> element that switches the current Path to "/<route-path>".
				<Link to="/<route-path>"> 
					// Link Item Component
				</Link>

				// Like a Link Element, but also styles itself according to specified CSS when the Path matches.
				<NavLink to="/<route-path>" activeClassName="<css-class>" activeStyle={<style-object>}> 
					// Link Item Component
				</NavLink>

				// Changes the current Path to "/<route-path>" upon rendering.
				<Redirect to="/<route-path>" />

		API Interaction:
			// HOC
			import { withRouter } from 'react-router';

			const App = ({ match, location, history }) => {
				// match Object contains information about how a Route matched a given URL.
					// match.isExact
					// match.url 		// Matched portion of the URL.
					// match.path 		// The path pattern used to match.
					// match.params 	// Object with Key-Value Pairs referencing passed parameters.

				// location Object represents where the User is within the Component.
					// Note: Prefer location over history.location due to immutability.

					// location.pathname === '/<path>'

					// State from the previous Route / to the next Route.
					// location.state === {
					// 	<key> : <value>
					// }

				// history Object acts as an interface for the History API.
					useEffect(
						() => history.listen(
							// Establish a Listener for Route changes when Component initally mounts.
							// history.listen will destroy the Listener when the Component unmounts.
							(location, action) => {
								// Obtain current <path>.
								// location.pathname

								// ...
							}
						), []
					);

					// Programmatically change Route.
					// history.push(<location-type-obj>);

				// ...
			};

			export default withRouter(App);

			// React Hooks
			import { 
				useHistory,
				useLocation,
				useParams,
				useRouteMatch
			} from 'react-router-dom';

			const AppPage = () => {
				// Hooks can be used in any descendant Child, as long as there is a Router somewhere along the ancestrial line.
				
				// useRouteMatch is useful for avoiding a Route render.
				let match = useRouteMatch('<path>');

				// return match && (
				// 	// ...
				// );
			}

	Commands:
		
	
