React-Router:
	Abbreviations:
		URL:					Uniform Resource Locator.

		HTML:					HyperText Markup Language.
	
	Description:
		A Framework to support Client-Side Routing for Single-Page React Applications.
	
	Resources:
		
	
	Concepts:
		Single Page Web Application: A Web Application that only uses a single HTML Page to display content. Content changes mainly through Javascript, without having to refresh / reload the Page.

		Routing:				The process of using URLs to determine the part of the Web Application exposed to the User. Traditionally handled Server-Side, but React Router allows for Front-End Routing to save on HTTP Requests.
		
		Static Routing:			Used to describe Routing before Application Rendering.
		Dynamic Routing:		Used to describe Routing during Application Rendering.
	
	Details:
		Components:
			Router: The Component that wraps around the topmost level of the Web Application.
				import { BrowserRouter, HashRouter } from 'react-router-dom';

				// Router that uses the Path portion of a URL to change the wrapped content accordingly.
				// Requires Server to be configured to always return one HTML File, regardless of URL.
					// For Client-Side Routing, only the URL in the initial HTTP Request is handled Server-Side.
					// If a given URL is only valid for Client-Side Routing, the Server may throw an error, unless configured to fallback to some resource.
				<BrowserRouter
					baseName="/<base-path>"
				>
					<App />
				</BrowserRouter>

				// Router that uses the hash portion of a URL to change the wrapped content accordingly.
				// Does not require additional Server configuration, since the hash portion of the URL is not sent back to the Server.
				<HashRouter
					baseName="/<base-path>"
				>
					<App />
				</HashRouter>

			Switch and Route: The Components that implement the Routing Logic.
				import { Switch, Route } from 'react-router-dom';

				// Switches contain Routes, and Routes contain Application Elements.
				// Note: Application Elements may contain more nested Switches and Routes.

				const App = () => {
					return (
						<>
							// Application Elements
								// ...

							// Router Elements
								// Renders if it at least partially matches the Path.
								<Route path="/<route-path>">
									<AppPage />
								</Route>

								// Renders only if the Path completely matches.
								<Route exact path="/<route-path>">
									<AppPage />
								</Route>

								// Renders *only* the first Route that has a fulfilled Path, or null if there are no matches.
								<Switch>
									<Route path="/<route-path-1>">
										// ...
									</Route>

									// ...
								</Switch>
						</>
					);
				}

				// Example of a Protected Route:
				const ProtectedRoute = ({children, ...rest}) => (
					<Route
						{ ...rest }
						render={
							({ location }) =>
							isAuthenticated ? 
								(children) : 
								(
									<Redirect
										to={{
											pathname: "/login",
											state: { from: location }
										}}
									/>
								)
							)
						}
					/>
				)

			Link, NavLink, and Redirect: Components that change the Path and triggers the Routing Behaviour.
				import { Link, NavLink, Redirect } from 'react-router-dom';

				// The 'to' props of the Components below can accept an Object.
				const locationTypeObj = {
					pathname: '/<route-path>',
					search: '?key=value& ...', // String Representation of the Query part of the URL.
					hash: '#<text>', // Hash to put into the URL.
					state: {
						// Persistent State to pass to the Route upon rendering it.
						// <key>: <value>
						// ...
					}
				};

				// Compiles down to an <a> element that switches the current Path to "/<route-path>", or to the configuration specified in the <location-type-obj>.
				<Link to={"/<route-path>" | <location-type-obj>}> 
					// Link Item Component
				</Link>

				// Like a Link Element, but also styles itself according to specified CSS when the Path matches.
				<NavLink to={"/<route-path>" | <location-type-obj>} activeClassName="<css-class>" activeStyle={<style-object>}> 
					// Link Item Component
				</NavLink>

				// Changes the current Path to "/<route-path>", or to the configuration specified in the <location-type-obj>, upon rendering.
				<Redirect to={"/<route-path>" | <location-type-obj>} />

				// A <Redirect> Component is more useful within a <Switch> Component, or as part of a Protected Route (see example in the Route Section):
				<Switch>
					<Redirect exact from="/<switch-base-path>" to={"/<destination-route-path>" | <location-type-obj>} />
				</Switch>

		API Interaction:
			// API Description:
				const someComponent = ({match, location, history}) => {
					// match Object contains information about how a Route matched a given URL.
						// match.isExact
						// match.url 		// Matched portion of the URL.
						// match.path 		// The path pattern used to match.
						// match.params 	// Object with Key-Value Pairs referencing passed parameters.

					// location Object represents where the User is within the Component.
						// Note: Prefer location over history.location due to immutability.

						// location.pathname === '/<path>'

						// State from the previous Route / to the next Route.
						// location.state === {
						// 	<key> : <value>
						// }

					// history Object acts as an interface for the History API.
						useEffect(
							() => history.listen(
								// Establish a Listener for Route changes when Component initally mounts.
								// history.listen will destroy the Listener when the Component unmounts.
								(location, action) => {
									// Obtain current <path>.
									// location.pathname

									// ...
								}
							), []
						);

						// Programmatically change Route, or State involved with Route.
							// history.replace(<path>, [<state>]); // Redirect Client, but replace the topmost item in the Client's History Stack.
							// history.push(<path>, [<state>]); // Redirect Client, but add it to the Client's History Stack.

					// ...
				};

			// The API is usable via the following mechanisms:
				// HOC:
					import { withRouter } from 'react-router';

					const AppPage = withRouter(
						{ match, location, history }) => {
							// ...
						}
					);

				// Route:
					const AppPage = ({match, location, history}) => {
						// ...
					};

					// ...

					<Route>
						<AppPage>
					<Route>

					// OR

					<Route 
						render={
							({match, location, history}) => {
								// ...
								
								return <AppPage>;
							}
						}
					/>

				// API React Hooks
					import { 
						useHistory,
						useLocation,
						useParams,
						useRouteMatch
					} from 'react-router';

					const AppPage = () => {		
						// useRouteMatch is useful to avoid rendering the Route component.
						// Note: The Component should be rendered outside of the Switch Component.
						let match = useRouteMatch({
							path: '<path>',
							strict: true,
							sensitive: true
						});

						return match && (
							// ...
						);
					}

	Commands:
		
	
