Enzyme:
	Abbreviations:
		
	
	Description: Testing Oriented Utility that allows examination of the internals of UI Components.
	
	Resources:

	
	Concepts:
		
	
	Details:
		Enzyme by itself cannot run Tests - it is simply a Utility to examine the internals of UI (mostly React) Components at a given time. A Test Runner (such as Jest) is needed as the Testing Framework.
			Note: React Enzyme internally uses react-test-renderer.

		Consideration: Consider using react-testing-library instead.
			Enzyme is being actively maintained by only a single Developer.
			Tests should not rely on the implementation details of the Library.
			No support for React Native (use react-native-testing-library).

		Configuration: An adapter for the specific version of the Frontend Framework needs to be installed and setup alongside the respective Enzyme Core Package. Configure the Test Runner to run an associated Setup File:
			Jest:
				"jest": {
					// ...

					"setupFilesAfterEnv": ["<rootDir>/setupTests.js"],

					// ...
				}

			Setup File:
				import { configure } from 'enzyme';
				import Adapter from '<enzyme-adapter>';

				configure({ adapter: new Adapter() });

		API:
			// shallow - Allows isolated testing of a Component from the DOM Tree. Tests the Component from the perspective of the UI Library.
				const wrapper = shallow(
					<rendered-component>, // React Element
					{	
						// To pass Context into the UI Node.
						context: <context>,
						
						// Specify a Parent Wrapping Component (which must render its Children).
						// Note: NOT the Component Instance / React Element (ignore the Arrow Brackets).
						wrappingComponent: <Component>,
						wrappingComponentProps: {
							// ...
						},
					}
				);

			// mount / unmount - Allows testing of a Component with the DOM Tree, or for Components that make use of Lifecycle Methods.
				// Note: Requires the full DOM API to be in Global Scope (e.g. jsdom Package).
				const wrapper = mount(
					<rendered-component>, // React Element
					{	
						// To pass Context into the UI Node.
						context: <context>,
						
						// Specify a Parent Wrapping Component (which must render its Children).
						// Note: NOT the Component Instance / React Element (ignore the Arrow Brackets).
						wrappingComponent: <Component>,
						wrappingComponentProps: {
							// ...
						},

						// Specify a DOM Element to attach the Component to.
						attachTo: <dom-element>,
					}
				);

				// ...

				// Note: Remember to unmount the Component after each Test to avoid Tests from affecting each other via the DOM Tree.
				wrapper.unmount();

			// Common API
				wrapper.find('<css-selector>');			Obtain all Wrapped Nodes in the Render Tree of the Wrapped Node that matches the specified <css-selector>.

				wrapper.contains(<rendered-sub-component>); Determines if the Render Tree of the Wrapped Node contains the <rendered-sub-component>, as well as the Children.

				wrapper.simulate('<dom-event>', <data-obj>); Simulate a DOM Event on a Wrapped Node.

			// render - Test the HTML Structure that the Component generates when rendered.
				// Note: Uses the Cheerio Library to assist in HTML Parsing and Traversal.
				const cheerioWrapper = render(
					<rendered-component>,
					{
						// To pass Context into the UI Node.
						context: <context>,
					}
				);
	
	Commands:
		
	
