(DOM) Testing Library
	Abbreviations:
	
	Description: Allows for Testing of UI Components in a User-centric Way.
	
	Resources:
	
	Concepts:
		data-testid: 			Convention: Custom Element Property that allows for quick test-only lookups via queryById. Can be stripped away during Compilation via babel-plugin-react-remove-properties.
	
	Details:
		Function: UI Component Framework Representation -> DOM Elements -> Test on DOM Elements

		Packages:
			@testing-library/dom: Lightweight Solution for testing Web Pages by providing Utilities for querying and interacting with DOM Elements.
				// Tip: During Test Setup, we can change what the Testing Library treats as a data-testid attribute:
					import { configure } from '@testing-library/dom'
					configure({ testIdAttribute: '<id>' })

					// Tip: data-testid can be changed to id for better compatibility with vanilla DOM Selector Mechanisms.

				// screen: Interface for obtaining DOM Elements from the DOM State. Re-exported by the Wrapper Packages.
					// Query Method Types:
						// query* - Functions will return the DOM Element or null if it can't be found.
							// Tip: Use these only when asserting an DOM Element's existence.

						// get* - Functions will return the DOM Element or throw an Error (with the full DOM Structure in readable format) if it can't be found.

						// find* - Asynchronous Functions that will resolve with the DOM Element or reject if the default timeout of 10000ms is exceeded.
							// Note: Useful to avoid the 'act' Error Output by waiting for a Component to finish loading when it calls an API on Mount.
							// Note: Calls cannot be run concurrently via Promise.all.
								// Tip: Just await each Call - it will immediately resolve if it can be found.

					// Query Methods
						// *ByText - Search for Text Elements with a particular <value>.
							*byText(
								<render-results> | <dom-element>,
								<value>,
								{
									selector = "<dom-selector>", // Defaults to *
									exact = false, // Defaults to true
									// ...
								}
							)

				// Tip: Useful DOM Element Method Patterns after using screen Query Methods:
					// To get the data-testid specified on a DOM Element, use <dom-element>.getAttribute('data-testid')

					// Get the closest Ancestrial DOM Element that fulfills a criteria:
						element.closest('<dom-selector>')

					// Get the closest Descendent DOM Elements that fulfills a criteria:
						element.querySelectorAll(':scope > <dom-selector>')

			@testing-library/jest-dom: Provides custom Jest Matchers for testing DOM State.
				// expect( <dom-element> ).toBeInTheDocument(): Jest Matcher for checking if DOM Elements are in the DOM State.
				// expect( <dom-element> ).toBeDisabled(): Jest Matcher to check if an DOM Element is correctly disabled.

				// expect( <dom-element> ).toHaveTextContent( '<text-content>' ): Jest Matcher to check if the DOM Element has the specified <text-content> anywhere within.

			@testing-library/user-event: Provides Utility Methods to simulate User Events.
				import userEvent from '@testing-library/user-event';

				userEvent.click(<dom-element>)

				userEvent.type(<dom-element>, <input>)
					// Special <input> (can be combined with regular input in the same line)
						// {enter}
						// {selectall}

			@testing-library/react: Renders React Components into DOM Elements.
				// render: Render a React Component onto the DOM State.
				// Tip: 'renderResults' have the same Methods as 'screen', except there is no need to specify the DOM Element to start the search from.
				// Tip: Already wrapped with 'act'.
				// Note: If calling 'render' multiple times within the same Test, be sure to invoke 'cleanup' or 'unmount' before each subsequent 'render' Call to remove the rendered results from the DOM State.
					const renderResults = render(<element />, {
						// Specify a DOM Element to append the <element /> to.
						// Defaults to document.body.
						container: <dom-element>, // document.body.appendChild(document.createElement('<dom-element-type>'))
					})

					// Get DOM Element from renderResults
						const <dom-element> = renderResults.baseElement

					// Add usual Query Methods for DOM Elements
					// Tip: Don't always assume the Query Methods are needed - it is not possible to turn it back to the <dom-element> given what is returned from 'within'.
						within(<dom-element>)

					// Preview DOM Tree Structure
						// Entire DOM:
						screen.debug(undefined, Infinity)

						// Specific DOM:
						renderResults.debug(undefined, Infinity)

					// ...

					renderResults.unmount()
					cleanup()

				// fireEvent: Primarily used for invoking DOM Events; go for @testing-library/user-event to simulate actual User Interactions (which may involve one or more DOM Events).
					// Tip: Already wrapped with 'act'.
					fireEvent.<event-type>(<dom-element>, ... )

				// waitFor: Wait until some Assertion becomes true / Asynchronous Condition resolves.
					// Note: For Synchronous Conditions, waitFor will re-call the Callback on a set Interval (default: 50ms).
					await waitFor(() => { <assert-fn>( ... ).toBe( ... ) })

					// Note: For Asynchronous Conditions, waitFor will re-call the Callback only once it rejects.
					await waitFor(async () => { <assert-fn>( await ... ).toBe( ... ) })
					await waitFor(async () => <boolean-expression>)

				// waitForElementToBeRemoved: Will resolve once the specified DOM Element has been removed - it will check each time there is a mutation to the DOM State.
					// Note: Will throw an Error if the DOM Element does not already exist on the first check.
					await waitForElementToBeRemoved(async () => <dom-element>)

				// act: Wrapper Function to wrap any Code that would trigger a State Update.
					act(() => { ... })
					await act(async () => { ... })

			@testing-library/react-hooks: Creates a simple Test Harness for React Hooks, avoiding the need to create unnecessary Function Components in tests.
				// The package will auto-detect which Renderer is available to use for the Test Harness.
				// If a Renderer is required, use more specific Import Paths:
					'@testing-library/react-hooks/dom'
					'@testing-library/react-hooks/native'
					'@testing-library/react-hooks/server'

				// Note: console.error gets mocked when importing from this library. This can affect Tests that rely on asserting an output from console.error.

				// renderHook: Render a Test Component that will call <custom-hook> each time it renders.
					const { result, waitForValueToChange, waitForNextUpdate,  waitFor } = renderHook(() => <custom-hook>( ... ))
						// Tip: Avoid destructuring the 'result' Object to prevent Closure-related Issues.

						// result.current: The current Return Value from <custom-hook>.
						// result.error: Any thrown Errors from the <custom-hook>.
						// result.all: An Array of the Return Values from <custom-hook> thus far, per Render. Each Element is either an instance of result.current or result.error.

					// Tip: Render a Hook within some Context.
					const wrapper = ({ children }) => <Context ... > { children } </Context>
					const { result, waitFor, waitForValueToChange, waitForNextUpdate } = renderHook(() => <custom-hook>( ... ), { wrapper })

					// Wait for result to update.
					await waitForValueToChange(async () => result.<{ current | error | all }>)

					// Wait for Hook to trigger all re-Renders associated with prior State Updates.
					// Note: If using this, can omit any act() calls before it.
					await waitForNextUpdate()

					// Note: Don't use the waitFor from @testing-library/react!
					// waitFor: Wait until some Assertion becomes true / Asynchronous Condition resolves.
						// Note: For Synchronous Conditions, waitFor will re-call the Callback on a set Interval (default: 50ms).
						await waitFor(() => { <assert-fn>( ... ).toBe( ... ) })

						// Note: For Asynchronous Conditions, waitFor will re-call the Callback only once it rejects.
						await waitFor(async () => { <assert-fn>( await ... ).toBe( ... ) })
						await waitFor(async () => <boolean-expression>)

				// act: Wrapper Function to wrap any Code that would trigger a State Update.
					act(() => { ... })
					await act(async () => { ... })

				// cleanup: Unmounts all Rendered Hooks, ensuring all Effects have been flushed.
					// Tip: Automatically called if Testing Framework supports the afterEach global.

	Commands:
		
	
