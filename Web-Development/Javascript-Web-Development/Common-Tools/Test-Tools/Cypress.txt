Cypress
	Abbreviations:
	
	Description: End to End Testing Library for Web Projects via a Web Browser.
	
	Resources: 
	
	Concepts:
		End to End Testing: Involves Tests that run across the Full Tech Stack (i.e. both Backend and Frontend). They usually simulate complex User Actions that may extend across multiple features.
	
	Details:
		Cypress works by simulating a Browser and performing Real-Time User-like Actions on Web Application that it will run.
			Cypress also allows programmatic control over Actions done during Testing.

		Configuration:
			cypress.json
				{	
					// URL used to access the Running Frontend Instance.
					baseUrl: "<url>",

					// If Cypress should rerun when a Test File is changed (saved).
					"watchForFileChanges": <boolean>,

					// Configure if Cypress will discard Screenshots and Videos from Prior Test Runs before triggering another Run.
					"trashAssetsBeforeRuns": <boolean>,

					// Configure Cypress Videos of Test Runs
					"video": <boolean>, // Note: This will enable Video Recording of both Successful and Failing Test Runs. Use the 'after:spec' Event in a Cypress Plugin to delete Videos of Successful Test Cases.
					"videoCompression": <number>, // Ranges from 0 - 52, with 52 being the Highest Quality. Note: Large Time Cost in Compressing Videos.
				}

			tsconfig.json
				"compilerOptions": {
    				"types": ["cypress"]
  				}

			Directory Structure:
				fixtures:		Used to store Test Data (usually in JSON format).
				integration:	Used to store Test Files. These usually have the *.spec.ts Name Format.

				plugins:		Extend Cypress Behaviour. This Folder only has one File - index.ts - which is executed by the Node Process both before the Test Browser is Launched and during Test Runs.
					// ... Functionality can be executed here as well ...

					export default (on, config) => {
						// Note: Cypress Commands cannot be used here.
						// Use 'on' to register Event Listeners for particular Events.

						// Executes beforethe Test Browser launches.
						on('before:browser:launch', ( browser = {}, launchOptions ) => {
							// browser
								// name: electron | firefox | chrome | edge

							// launchOptions
								// args: []

							// ...

							return launchOptions
						})

						// Executes before all Spec Files are run.
						on('before:run', ( details ) => {
							// ...
						})

						// Executes before a Spec File is run.
						on('before:spec', ( spec ) => {
							// ...
						})

						// Executes after a Spec File is run.
						on('after:spec', ( spec, results ) => {
							// spec
								// name: Name of Spec File run.
								// relative: Relative Filepath of Spec File (from Project Root).
								// absolute: Absolute Filepath of Spec File.

							// results
								// stats
									// failures
									// passes
									// skipped

								// video: Filepath of Video generated for Test Run.

							// ...
						})

						// Executes after all Spec Files are run.
						on('after:run', ( results ) => {
							// ...
						})
					}

				screenshots:	Screenshots for Failures.
				support:		Used to store Reusable Code (e.g. Custom Commands).
				videos:			Contains Videos of Test Execution.

			File:
				// Enable Type Checking for the File.
				/// <reference types="cypress" />

		API:
			// Custom Commands:
				Cypress.Commands.add('<command-id>', ( ... ) => { // ... <cy-command>s ... })

				// ...

				cy.<command-id>( ... )

			// Tests:
				// Test Flow:
					before
					beforeEach

					it

					afterEach
					after

				// Cypress Commands: cy.<command>
				
				// Queue a Delay before Cypress moves on to the next Command:
					cy.wait(<milliseconds>)

				// Exeucte JS on the System (outside of the Test Browser):
					cy.task('<task-plugin-id>')

				// Routing:
					// Visit a Route in a Running Web App, w.r.t the baseUrl Setting:
						cy.visit('<url>')

					// Obtain the current URL Path:
						cy.location('pathname')

				// Requests:
					// Spy on subsequent Requests, and optionally test the Request / Response Cycle:
						cy.intercept({ method: '<http-method>', url: '<url>' }, <stub-response>).as('<alias>')

						// OR

						cy.intercept({ method: '<http-method>', url: '<url>' }, { fixture: '<fixture>.json' }).as('<alias>') // where <fixture>.json is in the fixtures Directory
					
					// Trigger a Request:
						cy.request('<url>')

					// Test the Request / Response of a captured API Call:
						cy.wait('@<alias>')
							.then((intercept) => {
								// intercept.request
									// body

								// intercept.response
									// body
									// statusCode

									// setDelay(<delay>)
									// setThrottle(<kbps>)
							})

				// DOM Nodes:
					// Getting a DOM Node:
					// (From the Root of the DOM Tree) / From a DOM Node as the Starting Point:
						const <node> = cy
							.contains("<text>")	// Get the deepest DOM Node containing the supplied <text>.
								// Note: Only the first matched Node will be returned.

								// If any of the following is present higher in the DOM Tree than the would be deepest DOM Node, the higher DOM Node will be returned instead.
									input[type='default']
									button
									a
									label
								
							.contains("<dom-selector>", "<text>") // Get the (highest?) DOM Node that matches the <dom-selector> and contains the <text> within.

							.get("<dom-selector>") // Get DOM Nodes that match the supplied <dom-selector>.

					// Actions:
						// Tip: If the <node> only becomes enabled after a loading / processing operation, it may be better for stability to add a check that the <node> is not disabled before actually triggering the <action>. This will give more room for page processing instability, as Cypress will retry a failing check several times until the timeout is hit.
						<node>.<action>()
							<node>.click()
							<node>.type('<input>')

				// Allows work on the <subject> yielded from the Previous Command:
					<cy-command>.then((<subject>) => {
						// ...
					})

				// Assertions:
					// Tip: Cypress makes no distinction between Synchronous and Asynchronous Behaviour - it will keep trying until the timeout is hit. Hence, no need to manually specify delay behaviour in the Testing Code.

					<cy-command>.should('<chainer>', <value>).and('<chainer>', <value>). ...
						// '<chainer>' follows Chai / Chai-jQuery / Sinon-Chai Format;  a '.' delimited String featuring one or more Logical Conjunctions.
						// 'and' is another alias for 'should'

						'not'

						'have'
							'id'
							'class'
							'attr'

						'be'
							'selected'
							'disabled'

					<cy-command>.should((<dom-element>) => {
						// ...
					})
	
	Commands:
		npm i -D cypress		# Install Cypress Locally into Project. Brings along associated Type Definitions.

		npx cypress open		# Open the Cypress Desktop App.
			# When first run in a new Project, Cypress will try and detect for Cypress Test Files within the Project.

		npx cypress run			# Run Cypress Headlessly (without a Browser).
			# Test Run Video Recording enabled by default.

			--parallel 			# Distribute and Run Test Files across multiple CI Machines.
	
