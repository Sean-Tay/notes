Jest
	Abbreviations:

	
	Description: Unit Testing Framework that has native support for React.
	
	Resources:
		https://www.toptal.com/react/tdd-react-unit-testing-enzyme-jest
	
	Concepts:
		Target: 				The thing being tested.
		Mock:					A Stub of the Target's Dependency, designed specifically for control and inspection during Test Runs. In the context of Jest, these are usually Functions.
			This helps the Test to be focused on the Target itself, not both the Target and the Dependency.
			Ensure consistent behaviour for the Dependency in the Test, across Test Runs.

			Avoids Side Effects from Target Functional Dependencies that are non-optimal for Testing.
				Slow Execution.
				Environment Changing Execution.
		
		Assertion: 				An expression which contains some testing logic for the Target Code.
		Unit Test:				An atomic Procedure to check if the Target Code behaves in a specific, pre-determined way, via Assertions.

		Test Group:				A collection of Unit Tests that are related in some meaningful way.
		Test Suite:				A File that contains all Unit Tests for Target Code, written in a separate File.
		
		Matcher: 				A Class of Jest Functions that each provide different Assertion logic.

		Snapshot Testing:		Involves tests that check against Target Output with a previously saved version of the Target Output. Useful for Regression Tests.

	Details:
		Packages:
			Tip: Jest is a Test Runner, not just a Testing Framework. In that sense, Jest just needs to be configured to handle different Syntaxes if needed.

			jest				
			@types/jest			Allows Intellisense to properly work in Jest Test Files with Typescript.

			babel-jest			Allows usage of Babel with Jest.

			ts-jest				Allows Jest to preprocess TypeScript Test Files.

			identity-obj-proxy	Used for Mocking CSS Module Assets.

		Configuration:
			// package.json Configuration - specify a 'jest' Key to store the Configuration Object.
			// Alternatively, specify a jest.config.js to store Configuration Object. Just export the Configuration Object (i.e. no need to key it to 'jest').
			"jest": {
				"rootDir": "<project-root-directory>",

				// Subject matched Test Files to Parsers first before running them.
				"transform": { 
					"<file-name-regex>": "<parser>",
					"^.+\\.(ts|tsx)$": "ts-jest"
				},

				// A map between Dependency Regexes and Mock Module Paths.
				// Note: Regexes and Paths are checked in sequence until one matches.
				// Note: '<rootDir>' is a Jest defined String-Token - use with the Angled Brackets.
				"moduleNameMapper": {
					"\<dependency-regex>": [
						"<rootDir>/__mocks__/stub.js",
						...
					],

					// Aliases are used to shorten import or require declarations in Files.
					"^<path-alias>/(.*)$": "<rootDir>/<path>/$1",

					// ...
				},

				// Specifies a Module that will allow adjustment on where Snapshot Files are produced, based on Test File location.
				"snapshotResolver": "./snapshotResolver.js",

				"verbose": true,

				/ Specifies to Jest the number of Failed Tests to tolerate, exceeding which to terminate the Test Run.
				"bail": <number>, 

				// ...
			}

			// Specifying a Test Command in package.json
			scripts: {
				"test": "jest",
				"test-with-config": "jest --config=jest.config.js",
				// ...
			}

			// snapshotResolver.js
				// Note: Paths here are Absolute Paths.
				// Tip: snapshotExtension refers to the File Type Suffix of the Snapshot Files (i.e. '.snap').
				// Tip: testPathForConsistencyCheck is a Virtual Value to check that resolveSnapshotPath and resolveTestPath mirror each other correctly.

				// Configuration to colocate Test and Snapshot Files as siblings:
					module.exports = {
						resolveSnapshotPath: (testPath, snapshotExtension) =>
							testPath.replace(/\.test\.([tj]sx?)/, `${snapshotExtension}.$1`),

						resolveTestPath: (snapshotFilePath, snapshotExtension) =>
							snapshotFilePath.replace(snapshotExtension, '.test'),

						testPathForConsistencyCheck: '<path>/example.test.js',
					}

				// Configuration to set Snapshot Files in a single Top-Level Folder, away from Source and Test Files:
					module.exports = {
						resolveSnapshotPath: (testPath, snapshotExtension) =>
							testPath
								.replace(/.test.([tj]sx?)/, '.test' + snapshotExtension)
								.replace(/src([/\\]components)/, '__snapshots__'),

						resolveTestPath: (snapshotFilePath, snapshotExtension) =>
							snapshotFilePath.replace(snapshotExtension, '.js').replace('__snapshots__', 'src/components'),

						testPathForConsistencyCheck: '<path>/example.test.js',
					}

		Setup Considerations:
			Webpack: 
				Babel: Babel Configuration should ideally be specified in a separate babel.config.json / .babelrc, instead of within webpack.config.js alongside babel-loader specific Configuration.

			TypeScript: Consider creating a separate tsconfig.json if all Tests are contained in a Test Folder.

			React: Jest can can be used with react-test-renderer / react-testing-library / Enzyme to test React Components more effectively.

		Flow:
			Test Suite Locations:
				1. In the same Location as the Target Code's File.
					// For Jest to pick up the Test Suite, the File Name needs to follow the <name>.test.jsx? convention.
					// Usually <name> is the same as the name of the Target Code's File, for clarity.

				2. Inside a __tests__ Folder.

			Test Suite Anatomy:
				// Jest automatically injects some commonly-used globals, so there is no need to manually import.

				// Groups related Unit Tests together within a Test Suite, or within a parent 'describe' Group.
				// Note: Jest evaluates all 'describe' Handlers before any 'test' Handlers in a Test Suite.
				describe(
					'<test-group-description>',
					() => {
						// ...

						// Unit Test Definition:
						// Note: 'it' is an alias of 'test'.
						test(
							'<test-description>',
							() => {
								// ...

								// Execute Synchronous Test:
								expect(<function>()).<matcher>(<value>);
							}
						);

						// Asynchronous Unit Test Definition:
						test(
							'<async-test-description>',
							async () => {
								// Indicate to Jest to only pass this Unit Test once the correct number of Assertions have been executed.
								expect.assertions(<number>); 

								const data = await <async-function>();

								// expect ...
							}

							// OR

							() => {
								// Indicate to Jest to only pass this Unit Test once the correct number of Assertions have executed.
								// In this case this can also help detect when the Assertions in .then() or .catch() does not execute, depending on if the Unit Test checks for a success or failing state.
								expect.assertions(<number>); 

								return <async-function>()
									.then(
										data => {
											// expect ...
										}
									);

									// OR

									.catch(
										err => {
											// expect ...
										}
									)
							}
						);

						// ...
					}
				);

				// Reruns all Unit Tests in a Test Group with different specified Data each time.
				// Note: There's also a test.each variant which works in the same way.
				describe.each(
					[
						[<value-1a>, ...], // Each sub-Array corresponds to one single run of this Test Group.
						// ...
					]
				)(	
					// Jest can inject special values into the name of the Test Group to help differentiate between different Runs.
					'<test-group-description>-%o',
					(<value-1a>, ...) => {
						// expect ...
					}
				);

				// Mocking a Target's Functional Dependency.
					import { <target> } from '<target>';

					// Import the Module which houses the Target Functional Dependency into the Test File.
					// Note: Import as Object.
					import * as Dependencies from '<target-dependency>';

					// Use Jest to substitute out the implementation for a Target's Function Dependency for a Jest Mock Function.
					const dependencyMock = jest.spyOn(Dependencies, '<dependency>');

					// Within a Test, invoke the Jest Mock Methods to define a controlled implementation of the Target's Function Dependency.
					it(
						'should be able to Mock',
						() => {
							dependencyMock.mockReturnedValue(<test-value>);

							// Note: <target> will automatically call the Mock rather than the original implementation, as Jest replaces it internally.
							expect(<target>()).toBe(<expected-value>);

							// ...
						}
					);

					// ...

					// Resubstitute back in the original implementation for the Target's Dependency after all Tests in this Test Suite are finished.
					afterAll(
						() => {
							dependencyMock.mockRestore();
						}
					);

				// Snapshot Testing
					// Note: If a Snapshot is unavailable, the Test will pass and generate the Test Snapshot.
				
					// Utilize toMatchSnapshot() to check against a prior Test Snapshot of the serialized output when a Component is rendered.
					it(
						'renders',
						() => {
							expect(<serializableTarget>).toMatchSnapshot();
						}
					);

					// Utilize toMatchInlineSnapshot() to inject and save the Snapshot Data to the Test File.
					it(
						'renders',
						() => {
							expect(<serializableTarget>).toMatchInlineSnapshot();

							// In Subsequent Runs:
							// expect(<serializableTarget>).toMatchInlineSnapshot(`<priorSerializedTarget>`);
						}
					);

		Utilities:
			Lifecycle Methods:	For executing some Logic during different phases of Test Suite / Unit Test execution.
				// Tip: <init-fn> and <cleanup-fn> can return a Promise for Asynchronous Setup / Teardown operations.
				beforeAll(<init-fn>);
				beforeEach(<init-fn>); // Note: Operates at a Unit Test Level, NOT a Test Block Level.
				afterEach(<cleanup-fn>); // Note: Operates at a Unit Test Level, NOT a Test Block Level.
				afterAll(<cleanup-fn>);

			Jest Mock Methods:	For defining the behaviour of a Stub, to simulate a Target's Functional Dependency:
				// Tip: These are chainable with each other, as these return the Jest Mock itself at the end of execution.

				// For Synchronous Functions:
					// If the Target's Functional Dependency is called only once in the Target:
						<mock>.mockReturnedValue(<test-value>);

					// If the Target's Functional Dependency is called more than once:
						<mock>.mockReturnedValueOnce(<test-value>);

				// For Asynchronous Functions:
					// If the Target's Functional Dependency is called only once in the Target:
						<mock>.mockResolvedValue(<test-value>);
						<mock>.mockRejectedValue(<test-value>);

					// If the Target's Functional Dependency is called more than once:
						<mock>.mockResolvedValueOnce(<test-value>);
						<mock>.mockRejectedValueOnce(<test-value>);

			Matchers:
				expect(<target-value>).not					Inverts the Unit Test Logic.

				expect(<target-value>).toBe(<test-value>); 	For basic comparison of primitives or Object References (Shallow Check).

				expect(<target-value>).toBeNull();
				expect(<target-value>).toBeDefined();
				expect(<target-value>).toBeUndefined();
				expect(<target-value>).toBeFalsy();
				expect(<target-value>).toBeTruthy();

				// Numbers
				expect(<target-number>).toBeCloseTo(<number>, <precision>) For optimal comparison of floats that accounts for floating-point Errors.
				expect(<target-number>).toBeLessThan(<number>)
				expect(<target-number>).toBeLessThanOrEqual(<number>)
				expect(<target-number>).toBeGreaterThanOrEqual(<number>)
				expect(<target-number>).toBeGreaterThan(<number>)
				expect(<target-number>).toBeNaN()

				// Strings
				expect(<target-string>).toMatch({<string> | <reg-exp>})	Check if a given string value matches for a given <string> or <reg-exp>.

				// Arrays
				expect(<target-array>).toContain(<item>) 	Check if an Item exists within an Array.
				expect(<target-array>).toContainEqual(<item>) Deep Check if an Item with specific Structure and Values exists within an Array.
				
				// Objects
				expect(<target-object>).toHaveProperty(<string>) Check if the <string> Property exists on the Object.
				expect(<target-object>).toMatchObject(<object>) Partial Deep Check if the Object to be tested has at least the Structure and Values in <object>.
				expect(<target-object>).toEqual(<object>) Deep Check if two Objects have the same specific Structure and Values.
				expect(<target-object>).toStrictEqual(<object>) Deep Check if two Objects have the same specific Structure, Property Types, and Values.
					// Note: Keys with undefined Values will not match with an Object without those Keys.

				// Errors
				expect(() => <function>()).toThrow(<error>)

				// Snapshot Testing
				expect(<target>).toMatchSnapshot(<optional-property-matcher-for-objects>, '<optional-hint>')
				expect(<target>).toMatchInlineSnapshot(<optional-property-matcher-for-objects>, '<target-snapshot>')

	Commands:
		jest --init				# Generate a basic Jest Config File.

		jest					# Runs Jest Tests.
		jest --watchAll 		# Runs Jest Tests whenever there is a change in Code.

		jest -u					# Update UI Component Snapshots that fail their Tests.
	
