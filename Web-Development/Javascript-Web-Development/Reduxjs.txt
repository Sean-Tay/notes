Redux.js
	Abbreviations:
		MVC: 					Model-View-Controller.	
	
	Description: Centralized State and Logic Container. It mainly deals with the Model and View in MVC.
	
	Tutorial Videos / Playlist:
		
	
	Concepts:
		Pure Function: 			A Function which gives the same Output for the corresponding Input (i.e. no dependence on external State, just Input). Easier to debug.
	
	Details:
		Action:
			Plain Object that minimally expresses ANY type of intention to CHANGE the Application State.
				{type: "<action-identifier>", arg1: 'value1', ...}

				Different Types of Actions can be used to address different Events.
					Synchronous State Update 	- 'SET' type Actions - the Actions which a Reducer should minimally act upon.
					User Interaction 			- 'CHANGE' type Actions which may feature one or more 'GET' and 'SET' Actions.
					Network Event 				- 'GET' type Actions.

			Action Creators are Functions that return Action Objects when invoked. The results of this invoked Function can be directly passed into the Store's dispatch Function.
				const <operation> = (args) => (
					{
						type: "<action-identifier>",
						...args,
					}
				)

				const store = createStore(<reducer-function>);
				store.dispatch(<operation>());

				// Alternatively, if mapDispatchToProps() was used, simply invoking the Action Creator will implicitly dispatch the Action to the connected Store.
		
		Reducer Function:
			Specifies how the Application State changes in response to an Action.
				// Essentially a Pure Function with a Swtich Case that operates on a State and Action argument.
				(state = <default-initial-state>, action) => { 
					switch (action.type) {
						case <action.type1>:
							// ...
							return <new-state-object-type1>;
						case <action.type2>:
							// ...
							return <new-state-object-type2>;

						// ...

						default:
							// Important in making sure sibling Reducer Functions from combineReducers() work as intended.
							return <default-initial-state>;
					}
				}
			
				const combinedReducer = combineReducers({
					<key-1>: <reducer-function-1>, 
					...
				});
					// Function that takes in any number of Reducer Functions stored in an Object to combine them together into a single Reducer Function - fit for creating a Store with via the createStore method.
					// Essentially:
						({<key-1>: <reducer-function-1>, ...}) => (
							(state={<key-1>: {},  ...}, action) => {
								// Returns a new State Object.
								{
									...state,
									<key-1>: <reducer-function-1>(state.<key-1>, action),
									// ...
								}
							}
						)
		
		Store:
			A Read-Only Object Tree which represents a single source of truth for Application State.
				import {create-store} from redux;

				const store = createStore(combinedReducer);

				export default store;

				// Note that Redux will call the Reducer Function with state = undefined passed in to trigger the creation of the initial State via the default arguments of each Reducer Function.

				// Update the Store (and UI) in response to whenever a State Change occurs via dispatch.
				// Mainly used for updating UI Elements / re-Rendering of the DOM.
				store.subscribe(<callback-function>);

				// Execute a State Changing Action on the Store.
				// The Action can be serialized, logged or stored and later replayed.
				store.dispatch(<action>);

				const state = store.getState() - Gets a copy of the entire App's State, tracked within the Store.
			
			const <redux-component> = connect(mapStateToProps, mapDispatchToProps) (<react-component>)
				Returns a modified variant of the <react-component> sent into the connect Higher-Order Function.
					mapStateToProps (".subscribe()") is a Function returning an Object describing Functions to be passed as props into the <react-component>, that will be executed upon the production of a new State.
						// Typically dissects the overall State to smaller parts that the <react-component> can use.
						// Since the prop value changes, the <react-component> gets re-rendered.
						// Minimally takes in "state", which is the state currently stored in the Store.

					mapDispatchToProps (".dispatch()") is a Function returning an Object describing Redux Store Dispatch Functions to be passed as props into the <react-component>.
						// Typically allows the React Component to dispatch Actions to update the Store.
						// Minimally takes in "dispatch", which is the Function to use to invoke State changing Actions to the Store from within the <react-component>.
						
					Special Arguments: 
						ownProps - Access the props passed into the React - Redux Component created by the connect Function.

		External Configuration:
			With React:
				Ensure that the Provider Component is rendered at the topmost level of the Web Application. This will enable any sub-Components wrapped with connect() to receive the appropriate State and Dispatchers in their Props.
					<Provider store={createStore(combinedReducer)}>
						<App />
					</Provider>
	
	Commands:

