Redux.js
	Abbreviations:
		MVC: 					Model-View-Controller.	
	
	Description: Centralized State and Logic Container. It mainly deals with the Model and View in MVC.
	
	Tutorial Videos / Playlist:
		
	
	Concepts:
		Pure Function: 			A Function which gives the same Output for the corresponding Input (i.e. no dependence on external State, just Input). Easier to debug.
	
	Details:
		Action: 				
			Plain Object that minimally expresses a type of intention to CHANGE the Application State.
				{type: "<action_identifier>", arg1: 'value1', ...}
		
		Reducer Function: 		
			Specifies how the Application State changes in response to an Action.
				// Essentially a Pure Function with a Swtich Case that operates on a State and Action argument.
				(state = <default-initial-state>, action) => { 
					switch (action.type) {
						case <action.type1>:
							// ...
							return <new-state-object-type1>;
						case <action.type2>:
							// ...
							return <new-state-object-type2>;

						// ...
						
						default:
							return <default-initial-state>;
					}
				}
			
				const combinedReducer = combineReducers({<reducer-function-1>, ...}); 
					// Function that takes in any number of Reducer Functions stored in an Object to combine them together into a single Reducer Function - fit for creating a Store with.
		
		Store: 
			A read-only Object Tree which represents a single source of truth for Application State.
				import {create-store} from redux;

				const store = createStore(combinedReducer);

				// Update the Store (and UI) in response to whenever a State Change occurs via dispatch.
				// Mainly used for updating UI Elements / Re-rendering of the DOM.
				store.subscribe(<callback-function>);

				// Execute a State Changing Action on the Store.
				// The Action can be serialized, logged or stored and later replayed.
				store.dispatch(<action>);

				store.getState() - Gets a copy of the current State tracked within the Store.
			
			// connect(mapStateToProps, mapDispatchToProps) (ReactComponent)
				// Returns a modified variant of the ReactComponent sent into the connect function.
					// mapDispatchToProps (".dispatch()") is a function returning a JS Object describing functions to be passed as props into the ReactComponent.
						// Typically allows the React Component to dispatch actions to update the Store.
						// Minimally takes in "dispatch", which is the function to use to invoke State changing actions to the Store from within the ReactComponent.
					
					// mapStateToProps (".subscribe()") is a function returning a JS Object describing functions to be passed as props into the ReactComponent, that will be executed upon the production of a new state.
						// Typically dissects the overall state to smaller parts that the ReactComponent can use.
						// Since the prop value changes, the ReactComponent gets re-rendered.
						// Minimally takes in "state", which is the state currently stored in the Store.
						
					// Special Arguments: 
						// ownProps - Access the props passed into the React - Redux Component created by the connect function.
	
	Commands:

