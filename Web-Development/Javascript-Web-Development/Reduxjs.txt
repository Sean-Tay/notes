Redux.js
	Abbreviations:
		MVC: 					Model-View-Controller.	
	
	Description: Centralized State and Logic Container. It mainly deals with the Model and View in MVC.
	
	Resources:
		
	
	Concepts:
		Pure Function: 			A Function which gives the same Output for the corresponding Input (i.e. no dependence on external State, just Input). Easier to debug.
	
	Details:
		Action:
			Plain Object that minimally expresses ANY type of intention to CHANGE the Application State.
				{type: "<action-identifier>", arg1: 'value1', ...}

				Different Types of Actions can be used to address different Events. Examples:
					Synchronous State Update 	- 'SET' type Actions - the Actions which a Reducer should minimally act upon.
					User Interaction 			- 'CHANGE' type Actions which may feature one or more 'GET' and 'SET' Actions.
					Network Event 				- 'GET' type Actions.

			Action Creators are Functions that return Action Objects when invoked. The results of this invoked Function can be directly passed into the Store's dispatch Function.
				const <operation> = (args) => (
					{
						type: "<action-identifier>",
						...args,
					}
				)

				const store = createStore(<reducer-function>);
				store.dispatch(<operation>());

				// Alternatively, if mapDispatchToProps() was used, simply invoking the Action Creator will implicitly dispatch the Action to the connected Store.
		
		Reducer Function:
			Specifies how the Application State changes in response to an Action.
				// Essentially a Pure Function with a Swtich Case that operates on a State and Action argument.
				(state = <default-initial-state>, action) => { 
					switch (action.type) {
						case <action.type1>:
							// ...
							return <new-state-object-type1>;
						case <action.type2>:
							// ...
							return <new-state-object-type2>;

						// ...

						default:
							// Important in making sure sibling Reducer Functions from combineReducers() work as intended.
							return <default-initial-state>;
					}
				}
			
				const combinedReducer = combineReducers({
					<key-1>: <reducer-function-1>, // Because each Reducer is responsible for a slice of State, there needs to be a key given to identify each slice when they are combined.
					...
				});
					// Function that takes in any number of Reducer Functions stored in an Object to combine them together into a single Reducer Function - fit for creating a Store with via the createStore method.
						// Possible Implementation:
							({<key-1>: <reducer-function-1>, ...}) => (
								(state={<key-1>: {},  ...}, action) => {
									// Returns a new State Object.
									{
										...state,
										// Upon the submission of a new Action, all Reducers will be executed on their slice of State.
										// Recall the importance of the 'default' argument for each Reducer - Reducers should simply return their current slice of State if they do not handle the submitted Action.
										<key-1>: <reducer-function-1>(state.<key-1>, action),
										// ...
									}
								}
							)
		
		Store:
			A Read-Only Object Tree which represents a single source of truth for Application State.
				import {create-store} from redux;

				const store = createStore(combinedReducer);

				export default store;

				// Note that Redux will call the Reducer Function with state = undefined passed in to trigger the creation of the initial State via the default arguments of each Reducer Function.

				// Update the Store (and UI) in response to whenever a State Change occurs via dispatch.
				// Mainly used for updating UI Elements / re-Rendering of the DOM.
				store.subscribe(<callback-function>);

				// Execute a State Changing Action on the Store.
				// The Action can be serialized, logged or stored and later replayed.
				store.dispatch(<action>);

				const state = store.getState() - Gets a copy of the entire App's State, tracked within the Store.
			
		Component Connection:
			Redux < v7.10:
				const <redux-component> = connect(mapStateToProps, mapDispatchToProps) (<react-component>)
					Returns a modified variant of the <react-component> sent into the connect Higher-Order Function.
						mapStateToProps - A Pure Function returning an Object describing State Slices to be passed as props into the <react-component>, that will be executed upon the production of a new State.
							// Typically dissects the overall State to smaller parts that the <react-component> can use, but can also handle State reshape functionality.
							// Always runs when the global State changes, but will only trigger the <react-component> to re-render if any of the key-value pairs change.
								// If more performance is required, use Memoized Selectors.
							const mapStateToProps = (state, [<component-props>]) => (
								{
									<key1>: state.<key-1>,
									// ...
								}
							)

						mapDispatchToProps - An Object describing Redux Store Dispatch Functions to be passed as props into the <react-component>.
							// Typically allows the React Component to dispatch Actions to update the Store.
							// The <action-creators> will internally be bound to the Redux dispatch function within the connect Function.
							const mapDispatchToProps = {
								<action-creator-key-1>: <action-creator>,
								// ...
							};

		Implementation Flow:
			0) Understand what the Component does, and what sort of State it might potentially need.
			1) Define the Initial State of the Reducer.
			2) Define the Possible Actions for this Reducer. Each Action should only be focused on Synchronous State Changes.
			3) Define the Reducer Function. Synchronous Local State Transforms should be done here.
			4) Define Action Creators for each possible Action Type. These should purely be for Component Invocation.
				- Define additional Logic here if necessary.
			5) Connect Component to Redux.

		External Configuration:
			With React:
				Ensure that the Provider Component is rendered at the topmost level of the Web Application. This will enable any sub-Components wrapped with connect() to receive the appropriate State and Dispatchers in their Props.
					<Provider store={createStore(combinedReducer)}>
						<App />
					</Provider>

			With Typescript:
				Define State Types for the Reducer Functions, and one Generic Interface for Action Objects.
					export interface IAnyMap {
						[propName: string]: any
					}

					export interface IReduxActionObject {
						type: string,
						payload?: any
					}

			With redux-saga: Handles Asynchronous Functionality through ES6 Generators.
				Define individual Saga Functions to handle Asynchronous Functionality.
					import { select, call, put, fork, spawn, all } from 'redux-saga';

					export ASYNC_ACTION_TYPE = '<ASYNC_ACTION_TYPE_VALUE>';

					export function* sagaFunction() {
						try {
							// Obtain State Slice from Redux Store.
							const stateSlice = yield select(state => ({
								state.<slice>,
								// ...
							}), <args-array>);

							// Await Promise Result - Blocking.
							const promiseResult = yield <promise>;

							// Call a Function - Blocking.
							// Note: If <function> has Child Executing Instances, it will wait until all Child Executing Instances has finished.
							yield call(<function>, <args-array>);

							// Call a Function - Non-Blocking. Attach Child Executing Instance to this Parent Generator / Saga.
							yield fork(<function>, <args-array>);
							yield fork(<another-saga>, <args-array>);

							// Call a Function - Non Blocking. Attach Executing Instance to the Root Execution.
							yield spawn(<function>, <args-array>);

							// Await for the successful Execution of all Functions within, or if any one of those throws an Error - Blocking.
							const [<result-1>, ...] = yield all([
								call(<function-1>),
								// ...
							]);

							// Perform a State Change on the Component State - Non-Blocking.
							yield put(<action-obj>);

						} catch (err) {
							// ... err ...
						}
					}

				Define Watcher Saga Function.
					import { takeLatest } from 'redux-saga';

					// This is for capturing all Asynchronous Actions dispatched by Components (or by other Saga Function), and triggering the respective Saga Functions.
					export function* watcherSagaFunction() {
						// If there exists a current Executing Instance tied to this Action Type, terminate the previous Executing Instance and reset.
						yield takeLatest(<asynchronous-action-type>, <saga-function>);

						// ...
					}

				Create the Middleware Object, link it to the Redux Store upon its creation, and run the Watcher Saga Function.
					import { applyMiddleware, createStore } from 'redux';
					import createSagaMiddleware from 'redux-saga';

					const sagaMiddleware = createSagaMiddleware();

					const store = createStore(
						<root-reducer>,
						applyMiddleware(sagaMiddleware)
					);

					sagaMiddleware.run(<watcher-saga-function>);

					export default store; // Attach to Root Provider Component.
	
	Commands:

