ESLint:
	Abbreviations:
	
	Description: Flexible Code Format Checker Tool for Node JS Projects.
	
	Resources:
	
	Concepts:
		
	
	Details:
		Useful Packages:
			eslint // Linting Tool for Javascript.
			babel-eslint // Enables ESLint to correctly parse Code that would be later transpiled by Babel. Useful for Webpack Integration with eslint-loader.

			@typescript-eslint/parser // Enables ESLint to correctly parse Typescipt.
				@typescript-eslint/eslint-plugin // Defines ESLint Rules that are Typescript specific.

			eslint-plugin-prettier // Configures ESLint to also actively check for Prettier Code-Style violations. Also will enable Prettier to run before Linting.
			eslint-config-prettier // Turns off Style-Oriented ESLint Rules that may conflict with Prettier.

			eslint-plugin-react // For React specific Linting Rules.

		Configuration: 
			// .eslintignore
				.vscode
				node_modules

				dist

				/*.* // Ignore Files in the same Folder Level as .eslintignore.

				<directory>/**

			// .eslintrc.js: A Javascript, JSON or YAML File.
			{
				// Prevent ESLint from looking further up the File Directory Hierarchy when searching for the ESLint Config File for each Input File.
				// Tip: Disable to allow Cross-Project consistency.
				root: true,

				// Prevent ESLint from checking certain Source Files.
				// Tip: Add this Config File to the ignorePatterns.
				ignorePatterns: [ "<file-pattern>", ... ],

				// Configure the Parser that ESLint uses. 
				parser: "<parser-node-package-name>", 
					// babel-eslint
					// @typescript-eslint/parser

				// Configure how ESLint reads the Source Files.
				parserOptions: {
					ecmaVersion: "<version>",
					sourceType: "script" | "module" // (ECMA Modules)
					ecmaFeatures: {
						jsx: true // For React.
					},

					// Note: If what @typescript-eslint can access is larger than what Typescript can access, all inaccessible Files w.r.t Typescript will have ESLint Errors.
					// Tip: ESLint expects one tsconfig.json for entire Codebase, including Tests. Create a separate tsconfig.eslint.json that extends off the original tsconfig.json if the original is only meant for just the Source Code.
					project: "<path-to-tsconfig.json>" // For using Rules that require Type Information.
				},

				// Presets that describes the Environment the Scripts are going to execute in. Specifies Globals that will be allowed.
				env: {
					"browser": true,
					"node": true,
					"es6": true,
					"jest": true
				},

				// Specify legitimate Globals, so that Rules do not perceive their usage as incorrect (e.g. ES6 Set). 
				globals: {
					"<var>": "off" | "readonly" | "writable",
					// ...
				},

				// Specify Third-Party Extensions that contain implementation for additional Rules that ESLint can be configured to check for.
				plugins: [
					// @typescript-eslint,
					// prettier
					// ...
				],

				// Extend from existing Groups of Rules / Presets.
				// Note: The order is important in determining which Presets override others.
				extends: [
					/*
						Format:
							"<vendor>:<plugin-name>/<config-name>"
								"eslint:<plugin-name>" // For ESLint Extensions. Omittable.
								"plugin:<plugin-name>" // For Third-Party Extensions.

						Extension Examples:
							"eslint:recommended",
							"plugin:@typescript-eslint/recommended",
							"plugin:@typescript-eslint/recommended-requiring-type-checking",
							"plugin:react/recommended",

							// Prettier Overrides:
							"prettier",
							"prettier/babel",
							"prettier/@typescript-eslint",
							"prettier/react",
					*/
					"<preset-name>",
					// ...
				],

				// Override Preset Rules:
				rules: {
					/*
						General Rule Format:
							<rule>: "<error-level>"
							// OR
							<rule>: [
								"<error-level>",
								{
									// ...
								}
							]

							// <error-level> = "off" | "warn" | "error"

						Example Rules:
							"prettier/prettier": ["warn"], // Trigger ESLint to warn when Code violates Prettier Code Style Rules. Requires the eslint-plugin-prettier Configuration.
					*/
					// ...
				}
			}

			// Editor Integration:
				// VSCode:
					// Enable "Eslint > Lint Task" to let VSCode automatically highlight Linting Errors.

	Commands:
		eslint --init 			# Initialize eslint Config File

		eslint -c .eslintrc.js --ext .js,.jsx,.ts,.tsx 'src/**/*.{<file-extension>, ...}' # Run eslint on Files within the src Sub-Folder.
	
