Webpack.js
	Abbreviations:
		CDN:					Content Delivery Network.

		CSS:					Cascading Style Sheets.
	
	Description: Primarily a Module Bundler, but can be configured to handle other parts of the Development Pipeline too.
	
	Tutorials:
		SurviveJS:				https://survivejs.com/webpack/
	
	Concepts:
		Plugin:					Third-Party Extension that can utilize Webpack Hooks as a means to subscribe to various Events in the Webpack Execution Process.

		Asset:					A File that does not contain code.
		Module:					A File or Directory in a Node Project which has some JS execution entry-point available, allowing it to be loaded in code.
		Dependency:				In the context of a Module, another Asset or Module which it relies upon.
		
		Entry-Point:			A User-specified Module that dictates where should Webpack start the Bundling Process from.
		Loader:					Third-Party Extension that assists in the transformation of encountered Dependencies in a Module. These are required for non JSON / Javascript Dependencies.

		Chunk:					A Module, or group of Modules that is currently being handled by Webpack as part of the Bundling Process.

		Output-Point:			A User-specified Location that dictates where should Webpack output the Bundle(s) it creates.
		Bundle:					An emitted File consisting of the content from a group of Assets, Modules and potentially associated Dependencies, made to be easily consumable for a Browser.

		Source Map:				A mapping between the code in the Bundle and the original Source to aid in debugging during the development process. The Bundle would have a special line at the end to hint to the Browser that a Source Map is available (via a URL).
	
	Details:
		Webpack is best installed locally to each Project; this allows Continuous Integration to work properly.
		
		Webpack initially only understands JSON and JS syntax (ES2015, AMD, and CommonJS variants).

		Webpack works by: 
			1. Starting from User-specified Entry-Points in the Project.

			2. Traversing and Constructing Dependency Graphs via defined Module Imports and Exports, rooted at each Entry-Point.
				For the current Module, if the Module contains a Dependency, Webpack will proceed to recursively resolve the Dependencies first.
				Each Module Dependency is checked against the config for (a) corresponding Loader(s) to transform the Dependency before adding it to the current Output Bundle.

			3. Emitting Output Bundle(s) based on the constructed Dependency Graphs.

		Possible High-Level Features:
			Code Splitting:		Allows for the Project to be split into multiple Bundles based on independent Application Functionality, which can lead to performance improvements.
				Code Split Vendors: Allows for node_modules Dependencies to be compiled into a separate 'Vendor' Bundle from the Application Bundle - most likely the Vendor Bundle won't change as often as the Application Bundle, and can therefore be cached.
			
			Automatic Recompilation: Configure Webpack to monitor for any changes in Resolved Files and selectively recompile them.

			Code Transpilation: Transforms newer variants of code to equivalent, older variants to maintain compatability with older Applications.

			Code Minification: 	Only considers meaningful code during the Building Process. This can mean mangling variable names, or removing unreachable pieces of code.

			Asset Hashing:		Allows Bundles to have a unique identifier as they are created. This helps to invalidate previous Bundles as new ones are made.

			Automatic Reload: 	Triggers a full Browser Reload to propagate the changes in Resolved Files after Automatic Recompilation to the View. Requires the webpack-dev-server Package.
			
			Hot Module Replacement: Detects for changes in Bundles and triggers a patch of the running Browser State without a full Browser Reload.
				This requires implementation of the Hot Module Replacement Interface in the code (via module.hot and module.hot.accept).

		Configuration Template: 
			// Note: Only CommonJS allowed here.
			const path = require('path');

			// <filename> Placeholders:
				// [name] - <entry-chunk-name> from the Entry-Point congifuration.
				// [path] - <entry-point-file-path> from the Entry-Point configuration.
				// [hash] - Build Hash.
				// [chunkhash] - Bundle Hash.

			module.exports = {
				// Indicate which pre-defined bundling behaviour should Webpack use.
				mode: <{'development' | 'production'}>,

				// Specify additional Plugins to expand the functionality of Webpack.
				// Note: Don't forget the new keyword.
				plugins: [
					new <plugin>(<config-obj>),
					...
				],

				// Specify the Entry-Points for Webpack.
				entry: {
					<entry-chunk-name>: '<entry-point-file-path>',
					...
				},

				// Adjust Dependency Resolution Behaviour.
				resolve: {
					// Aliases are used to shorten import or require declarations in Files.
					alias: { 
						<path-alias>: path.resolve(__dirname, '<path>'),
						<exact-match-path-alias>$: path.resolve(__dirname, '<path>'),
						...
					},

					// Specify which Directories should be searched for Dependencies. Upon a match, it will ignore the rest.
					modules: [
						path.join(__dirname, 'src'),
						'node_modules',
						...
					],

					// Specify which Files should be the Entry Point in a Directory Module. Upon a match, it will ignore the rest.
					mainFiles: [
						'index.js',
						...
					],

					// Resolve the listed Extensions in the specified order. Upon a match, it will ignore the rest.
					extensions: [
						'.<extension>',
						...
					], 
				},

				// Specify which type of Dependency imported / required by a Module should use which Loader(s) for transformation.
				module: {
					rules: [
						{
							test: /\.(<file-extension-regex> | ... )$/,
							include: [
								path.resolve(__dirname, <relative-inclusion-path-from-webpack-config>),
								...
							],
							exclude: [
								path.resolve(__dirname, <relative-exclusion-path-from-webpack-config>),
								...
							],

							// Note: the Loader order in the 'use' Array is reversed - the last Loader is applied first.
							use: [
								{
									loader: '<webpack-loader>',
									options: {
										// Dependent on each Loader.
										// ...
									}
								},
								...
							],
						}, ...
					],
				},

				// Specify completeness of any Source Maps generated from the transformations applied.
				devtool: false | 'source-map',

				// Configure Webpack to monitor for any changes in Resolved Files and recompile them (only).
				watch: true,
				watchOptions: {
					// Ignore Folders to save on CPU Usage.
					ignored: [
						'node_modules',
						...
					],

					// Reduce the frequency of change detection.
					poll: <milliseconds>,

					// Specify a delay period for rebuilding to allow for consolidation of any changes that come in shortly after the first.
					aggregateTimeout: <milliseconds>,
				},

				// Specify the Output-Points for Webpack.
				output: {
					path: path.resolve(__dirname, '<output-directory-path>'),
					filename: '<filename>',
				},
				
				// Webpack Dev Server Configuration for enabling Automatic Recompilation and Reload via an In-Memory Server Process - requires the webpack-dev-server Package.
				devServer: {
					// Specify the non-default location(s) of index.html for Webpack to inject the Bundle into.
					contentBase: [
						paths.resolve(__dirname, '<path>'),
						...
					],

					// Display only errors to reduce the amount of output.
					stats: "errors-only",

					// Parse host and port from env to allow customization.
					//
					// If you use Docker, Vagrant or Cloud9, set
					// host: "0.0.0.0";
					//
					// 0.0.0.0 is available to all network devices
					host: process.env.HOST, // Defaults to `localhost`
					port: process.env.PORT, // Defaults to 8080
					open: true, // Open the page in Browser

					// Enable the requesting of resources from Webpack Dev Server to other Servers.
					proxy: {
						'<request-path>': '<full-request-URL>',
						...
					},

					// Request the Server to fallback to index.html if a requested resource cannot be found.
					historyApiFallback: true, 

					// Enable Hot Module Replacement.
					hotOnly: true,
				},
			};

		Common:
			webpack-merge // Used to merge different Webpack Config Objects together, allowing for composability fo Webpack Configuration.

			Plugins:
				Developer Experience:
					npm-install-webpack-plugin // Automatic Package Installation when imported.
					
					// Webpack Dev Server for Automatic Browser Reload upon changes.
						new webpack.HotModuleReplacementPlugin() // Enable Hot Module Reloading.

						write-file-webpack-plugin // Forces Webpack Dev Server to emit the Resolved Files.

				HTML:
					new HtmlWebpackPlugin() // HTML Injection.
						// CDN for specified node_modules:
							webpack-cdn-plugin
							dynamic-webpack-cdn-plugin

				CSS:
					new MiniCssExtractPlugin() // Minifies and Extracts the CSS content into separate CSS Bundles.

			Loaders:
				CSS:
					style-loader // Injects JS Strings with CSS content into index.html through <style> HTML Elements. Implements Hot Module Reloading for Patching CSS.
					OR
					MiniCssExtractPlugin.loader // Minifies and Extracts the CSS content into separate CSS Bundles.

					css-loader // Resolves references and transforms Local CSS Resources into JS Modules containing JS Strings with CSS Content.
						// Additionally facilitates the use of CSS Modules, which enforces Local Scope for the CSS imported and used by a JS Module through dynamically generated CSS Selector Names.

					sass-loader OR less-loader
						fast-css-loader

				JS:
					babel-loader
						@babel/core
						@babel/preset-env // Enables use of latest Javascript.
						@babel/preset-react // Enables use of JSX Syntax for React.

	Commands:
		npx webpack src/<file.js> --output dist/<bundle>.js // Trigger the bundling process for file.js and emits the resultant bundle into <bundle>.js.
			--mode development // Optimizes the bundling process for Build Speed and Debugging.
			--watch // Enables automatic recompilation of changed Application Files.

			--mode production // Optimizes the bundling process for Runtime Speed and Bundle Size.

		npx webpack --config webpack.config.js	// Compiles the project via a specified setup procedure.
	
