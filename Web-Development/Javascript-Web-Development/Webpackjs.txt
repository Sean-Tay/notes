Webpack.js
	Abbreviations:
		CDN:					Content Delivery Network.

		CSS:					Cascading Style Sheets.
		JS:						Javascript.

		SPA:					Single Page Application.
	
	Description: Primarily a Module Bundler, but can be configured to handle other parts of the Development Pipeline too.
	
	Resources:
		SurviveJS:				https://survivejs.com/webpack/
	
	Concepts:
		Plugin:					Third-Party Extension that can utilize Webpack Hooks as a means to subscribe to various Events in the Webpack Execution Process.

		Asset:					A File that does not contain code.
		Module:					A File or Directory in a Node Project which has some JS execution entry-point available, allowing it to be loaded in code.
		Dependency:				In the context of a Module, another Asset or Module which it relies upon.
		
		Entry-Point:			A User-specified Module that dictates where should Webpack start the Bundling Process from.
		Loader:					Third-Party Extension that assists in the transformation of encountered Dependencies in a Module. These are required for non JSON / Javascript Dependencies.

		Chunk:					References a Module, or group of Modules, currently being handled by the Webpack Bundling Process.

		Output-Point:			A User-specified Location that dictates where should Webpack output the Bundle(s) it creates.
		Bundle:					An emitted File consisting of the content from a group of Assets, Modules and potentially associated Dependencies, made to be easily consumable for a Browser.

		Source Map:				A mapping between the code in the Bundle and the original Source to aid in debugging during the development process. The Bundle would have a special line at the end to hint to the Browser that a Source Map is available (via a URL).
	
	Details:
		Webpack is best installed locally to each Project; this allows Continuous Integration to work properly.
		
		Webpack initially only understands JSON and JS syntax (ES2015, AMD, and CommonJS variants).

		Webpack works by: 
			1. Starting from User-specified Entry-Points in the Project.

			2. Traversing and Constructing Dependency Graphs via defined Module Imports and Exports, rooted at each Entry-Point.
				For the current Module, if the Module contains a Dependency, Webpack will proceed to recursively resolve the Dependencies first.
				Each Module Dependency is checked against the config for (a) corresponding Loader(s) to transform the Dependency before adding it to the current Output Bundle.

			3. Emitting Output Bundle(s) based on the constructed Dependency Graphs.

		Possible High-Level Features:
			Code Splitting:		Allows for the Project to be split into multiple Bundles based on independent Application Functionality, which can lead to performance improvements.
				Code Split Vendors: Allows for node_modules Dependencies to be compiled into a separate 'Vendor' Bundle from the Application Bundle - most likely the Vendor Bundle won't change as often as the Application Bundle, and can therefore be cached.
			
			Automatic Recompilation: Configure Webpack to monitor for any changes in Resolved Files and selectively recompile them.

			Polyfill: 			Adds in functionality for newer Web APIs not implemented in older Browsers through emulation.
			Code Transpilation: Transforms newer variants of code to equivalent, older variants to maintain compatability with older Browsers.

			Code Minification: 	Only considers meaningful code during the Building Process. This can mean mangling variable names, or removing unreachable pieces of code.

			Asset Hashing:		Allows Bundles to have a unique identifier as they are created. This helps to invalidate previous Bundles as new ones are made.

			Automatic Reload: 	Triggers a full Browser Reload to propagate the changes in Resolved Files after Automatic Recompilation to the View. Requires the webpack-dev-server Package.
			
			Hot Module Replacement: Detects for changes in Bundles and triggers a patch of the running Browser State without a full Browser Reload.
				This requires implementation of the Hot Module Replacement Interface in the code (via module.hot and module.hot.accept).

		Configuration Template: Webpack will use 'webpack.config.js' if it exists in the Project Root.
			// Note: Only CommonJS allowed here.
			const path = require('path');

			// <filename> Placeholders:
				// [name] - <entry-chunk-name> from the Entry-Point congifuration.
				// [path] - <entry-point-file-path> from the Entry-Point configuration.
				// [hash] - Build Hash.
				// [chunkhash] - Bundle Hash.

			module.exports = {
				// Indicate which pre-defined bundling behaviour should Webpack use.
				mode: <{'development' | 'production'}>,

				// Specify additional Plugins to expand the functionality of Webpack.
				// Note: Don't forget the new keyword.
				plugins: [
					new <plugin>(<config-obj>),
					// ...
				],

				// Specify the Entry-Points for Webpack.
				// Note: Webpack will traverse the Entry-Points in the order that they are specified.
				entry: {
					<entry-chunk-name>: '<entry-point-file-path>',
					// ...
				},

				// Adjust Dependency Resolution Behaviour.
				resolve: {
					// Aliases are used to shorten import or require declarations in Files.
					alias: { 
						<path-alias>: path.resolve(__dirname, '<path>'),
						<exact-match-path-alias>$: path.resolve(__dirname, '<path>'),
						// ...
					},

					// Specify which Directories should be searched for Dependencies. Upon a match, it will ignore the rest.
					modules: [
						path.join(__dirname, 'src'),
						'node_modules',
						// ...
					],

					// Specify which Files should be the Entry Point in a Directory Module. Upon a match, it will ignore the rest.
					mainFiles: [
						'index.js',
						// ...
					],

					// Resolve the listed Extensions in the specified order. Upon a match, it will ignore the rest.
					extensions: [
						'.<extension>',
						// ...
					], 
				},

				// Specify how different Modules in the Project will be treated.
				module: {
					rules: [
						{
							// Conditions for when the Rule Applies.
								// Requesting Resource.
								issuer: /<file-regex>/,

								// OR

								// Requested Resource.
								test: /\.(<file-extension-regex> | ... )$/,
								include: [
									path.resolve(__dirname, <relative-inclusion-path-from-webpack-config>),
									// ...
								],
								exclude: [
									path.resolve(__dirname, <relative-exclusion-path-from-webpack-config>),
									// ...
								],

							// Results of Applying the Rule.
								// Specify which Loader(s) to use for the Resource that matches for the Rule.
								// Note: the Loader order in the 'use' Array is reversed - the last Loader is applied first.
								use: [
									{
										loader: '<webpack-loader>',
										options: {
											// Dependent on each Loader.
											// ...
										}
									},
									// ...
								],
						}, 
						// ...
					],
				},

				// Specify completeness of any Source Maps generated from the transformations applied.
				devtool: false | 'source-map',

				// Configure Webpack to monitor for any changes in Resolved Files and recompile them (only).
				watch: true,
				watchOptions: {
					// Ignore Folders to save on CPU Usage.
					ignored: [
						'node_modules',
						// ...
					],

					// Reduce the frequency of change detection.
					poll: <milliseconds>,

					// Specify a delay period for rebuilding to allow for consolidation of any changes that come in shortly after the first.
					aggregateTimeout: <milliseconds>,
				},

				// Specify the Output-Points for Webpack.
				output: {
					path: path.resolve(__dirname, '<output-directory-path>'),
					filename: '<filename>',
				},
				
				// Webpack Dev Server Configuration for enabling Automatic Recompilation and Reload via an In-Memory Server Process
				// Requires the webpack-dev-server Package.
				// Run with npx webpack-dev-server.
				devServer: {
					// Indicate where should the Webpack Dev Server search for the content to serve.
					contentBase: [
						path.resolve(__dirname, '<path>'),
						// ...
					],

					// Display only errors to reduce the amount of output.
					stats: "errors-only",

					// Parse host and port from env to allow customization.
					//
					// If you use Docker, Vagrant or Cloud9, set
					// host: "0.0.0.0";
					//
					// 0.0.0.0 is available to all network devices
					host: process.env.HOST, // Defaults to `localhost`
					port: process.env.PORT, // Defaults to 8080
					open: true, // Load the content from the contentBase specifications in the Browser.

					// Enable the requesting of resources from Webpack Dev Server to other Servers.
					proxy: {
						'<request-path>': '<full-request-URL>',
						'<request-path>': {
							target: '<full-request-URL>',
							changeOrigin: true, // For URLs that involve external Domains
							// ...
						},
						// ...
					},

					// Request the Server to fallback to index.html if a requested resource cannot be found.
					// Note: Necessary for Front-End Routing, as 404s will be issued for Web Application Page URLs that are sent to the Server directly (i.e. initial Request for the Web Application, but with a URL that would have lead to a Page within the Web Application if the Web Application had already been loaded on the Client).
					historyApiFallback: true, 

					// Enable Hot Module Replacement.
					hotOnly: true,
				},
			};

		Extensions:
			Base:
				Packages:
					webpack										
					webpack-cli										// Run Webpack Commands.
					webpack-dev-server 								// Enable Automatic Browser Reload.
					
					// HTML
						html-webpack-plugin							// Injection of Application JS and Application CSS into a HTML Template for eventual Browser usage.

					// CSS
						style-loader								// Injects JS Strings with CSS content into index.html through <style> HTML Elements. Implements Hot Module Reloading for Patching CSS.
						css-loader									// Resolves local references to and transforms CSS Resources into JS Modules containing JS Strings with CSS Content.

					// JS
						babel-loader								// ESNext Javascript Syntax.
						@babel/core									
						@babel/preset-env							// Use Latest Javascript.

				Plugins:
					new webpack.HotModuleReplacementPlugin() 		// Enable Hot Module Reloading.

					new HtmlWebpackPlugin( 
						// Note: Webpack always parses Application JS first, then potential Application CSS imported by the Application JS, then injection into the HTML Template.
						{ 
							template: <html-template-path>, 
							// ...
						}
					)

				Loaders:
					babel-loader
						// options.presets: [
							'@babel/preset-env'
						]

					style-loader
					css-loader

			Additional:
				Packages:
					webpack-merge 									// Used to merge different Webpack Config Objects together, allowing for composability for Webpack Configuration.

					npm-install-webpack-plugin 						// Automatic Package Installation when imported.
					write-file-webpack-plugin 						// Forces Webpack Dev Server to emit the Resolved Files.

					// HTML
						webpack-cdn-plugin							// CDN for node_modules
						dynamic-webpack-cdn-plugin					// CDN for node_modules

					// CSS
						extract-text-webpack-plugin 				// Predecessor to mini-css-extract-plugin.

						mini-css-extract-plugin 					// Alternative to style-loader - Minifies and Extracts the CSS content into separate CSS Bundles. Does not support HMR.

					// JS
						@babel/preset-react 						// Enables use of JSX Syntax for React.
						@babel/plugin-transform-runtime 			// Enables re-use of Babel's injected helper code to save on code size. Not a Webpack Plugin.

				Plugins:
					CSS
						new MiniCSSExtractPlugin({
							filename: '<filename>.css' 				// File Names of the CSS Bundles.
						})

					JS:
						new webpack.ProvidePlugin({ 
							// Enables Automatic Importing of specified Modules / Functions in every Module of the Project.
							// Will search for Module in Current Folder and the node_modules Folder by default.
							'<alias>': ['<module>', '<path-to-function>', ...],
							// ...
						})

				Loaders:
					CSS:
						MiniCssExtractPlugin.loader
							// options: [
								esModule: <boolean>, 				// Converts the CSS-related CommonJS require / modules.export behaviour within the compiled JS Bundle into ES6 import / export behaviour. Useful for Tree-Shaking.
							]

						css-loader
							// CSS Modules: Enforces Local Scope for the CSS imported and used by a JS Module through dynamically generated CSS Selector Names.
								// General Flow: Define CSS Classes in the CSS File, then in the JS Files:
									// import classes from './index.css';
									// Set the class attribute of DOM Elements to be styled from Keys in the imported classes Object.
							
							// Options:
								modules: <boolean> 					// Enable CSS Modules.
								importLoaders: <number> 			// Indicate the number of Loaders that run before css-loader.
								sourceMap: <boolean> 				// Create Source Map for the compiled CSS.

							fast-css-loader

						sass-loader OR less-loader
							fast-sass-loader

	Commands: Requires the webpack-cli Package.
		npx webpack-cli init 										// Interactively create a Webpack Config File.

		webpack 													// Compiles the Project via a specified Setup Procedure.
		npx webpack-dev-server 										// Starts the Webpack Dev Server for Automatic Code Compilation and Browser Reload.
			--config <config-file>.js  								// Specify the Webpack Config File to use.

			--mode=development 										// Optimizes the bundling process for Build Speed and Debugging.
			--mode=production 										// Optimizes the bundling process for Runtime Speed and Bundle Size.

		// Tip: Use Nodemon to monitor for changes to the Webpack Config Files, and restart running Webpack Processes upon change.
		nodemon --watch <config-file>.js --exec \" <command> \"
		
