Webpack.js
	Abbreviations:
		CDN:					Content Delivery Network.

		CSS:					Cascading Style Sheets.
		JS:						Javascript.

		SPA:					Single Page Application.
	
	Description: Primarily a Module Bundler, but can be configured to handle other parts of the Development Pipeline too.
	
	Resources:
		SurviveJS:				https://survivejs.com/webpack/
	
	Concepts:
		Plugin:					Third-Party Extension that can utilize Webpack Hooks as a means to subscribe to various Events in the Webpack Execution Process.

		Asset:					A File that does not contain code. Usually will be emitted as separate Files in the Output.
		Module:					A File or Directory in a Node Project which has some JS execution entry-point available, allowing it to be loaded in code.
		Dependency:				In the context of a Module, another Asset or Module which it relies upon.
		
		Entry-Point:			A User-specified Module that dictates where should Webpack start the Bundling Process from.
		Loader:					Third-Party Extension that assists in the transformation of encountered Dependencies in a Module. These are required for non JSON / Javascript Dependencies.

		Chunk:					Refers to a group of Assets and Modules that are currently being handled by the Webpack Bundling Process.
		Chunk Group / Graph:	A collection of Chunks which are typically created and generated for each Entry-Point specified.

		Output-Point:			A User-specified Location that dictates where should Webpack output the Bundle(s) it creates.
		Bundle:					An emitted File consisting of the content usually from a Chunk Group / Graph.

		Source Map:				A mapping between the transformed code in the Bundle and the original Source to aid in debugging during the development process.
	
	Details:
		Webpack is best installed locally to each Project; this allows Continuous Integration to work properly.
		
		Webpack initially only understands JSON and JS syntax (ES2015, AMD, and CommonJS variants).

		Webpack works by: 
			1. Starting from User-specified Entry-Points in the Project.

			2. Traversing and Constructing Chunks / Chunk Graphs (Dependency Graphs) via defined Module Imports and Exports, rooted at each Entry-Point.
				For the current Module, if the Module contains a Dependency, Webpack will proceed to recursively resolve the Dependencies first.
				Each Module Dependency is checked against the config for (a) corresponding Loader(s) to transform the Dependency before adding it to the current Chunk / Chunk Graph.

			3. Emitting Output Bundle(s) based on the constructed Chunk Graphs.

		Possible High-Level Features:
			Polyfill: 			Adds in functionality for newer Web APIs not implemented in older Browsers / standardization for inconsistently implemented Web APIs between current Browsers, through emulation.
			Code Transpilation: Transforms newer variants of code to equivalent, older variants to maintain compatability with older Browsers.

			Automatic Recompilation: Configure Webpack to monitor for any changes in Resolved Files and selectively recompile them.

			Automatic Reload: 	Triggers a full Browser Reload to propagate the changes in Resolved Files after Automatic Recompilation to the View. Requires the webpack-dev-server Package.
			
			Hot Module Replacement: Detects for changes in Bundles and triggers a patch of the running Browser State without a full Browser Reload.
				This requires implementation of the Hot Module Replacement Interface in the code:
					module.hot										// Indicates if Hot Module Replacement has been enabled in Webpack.
					module.hot.accept( ['<module>', ...], () => { /* ... */ } ) // Execute a Function whenever one of the '<module>' Dependencies for a File has changed.

			Code Splitting:		Allows for the Project to be split into multiple Bundles based on independent Application Functionality, which can lead to performance improvements.
				Code Split Vendors: Allows for node_modules Dependencies to be compiled into a separate 'Vendor' Bundle from the Application Bundle - most likely the Vendor Bundle won't change as often as the Application Bundle, and can therefore be cached.

			Code Minification: 	Only considers meaningful code during the Building Process. This can mean mangling variable names, or removing unreachable pieces of code.

			Source Maps: 		Mapping between the Transformed Code and the original Source Code.
				Types:
					Inline:		The Bundle would have the Source Map content included within the Bundle itself. Typically more performant during Development.
					Separate:	The Bundle will include a special line at the end to hint to the Browser that a Separate Source Map is available (via a URL). Typically more performant during Production.
						Hidden:	The Bundle will not include any reference to the Separate Source Map.

			Asset Hashing:		Allows Bundles to have a unique identifier as they are created. This helps to invalidate previous Bundles as new ones are made.

		Configuration Template: Webpack will use 'webpack.config.js' if it exists in the Project Root.
			// Note: Only CommonJS allowed here.
			const path = require('path');

			// <*-name> Placeholders:
				// [name] - <entry-chunk-name> from the Entry-Point congifuration.
				// [path] - <entry-point-file-path> from the Entry-Point configuration.

				// [hash] - Build Hash. If any portion of the Build changes, this will change in value.
				// [chunkhash] - Chunk Hash. If any portion of the Chunk changes, this will change in value.
				// [contenthash] - Hash per Extracted Content of a Chunk. If that Content changes, this will change in value.

			module.exports = {
				// Indicate which pre-defined bundling behaviour should Webpack use.
				mode: <{'development' | 'production'}>,

				// Specify additional Plugins to expand the functionality of Webpack.
				// Note: Don't forget the new keyword.
				plugins: [
					new <plugin>(<config-obj>),
					// ...
				],

				// Specify the Entry-Points for Webpack.
				// Note: Webpack will traverse the Entry-Points in the order that they are specified.
				// Note: <entry-point-file-path> is taken relative to where the Webpack Process is running, if not specified as an Absolute Path.
				entry: {
					<entry-chunk-name>: [ path.resolve(__dirname, '<entry-point-file-path>'), ... ],

					// ...
				},

				// Adjust Dependency Resolution Behaviour.
				resolve: {
					// Aliases are used to shorten import or require declarations in Files.
					alias: { 
						<path-alias>: path.resolve(__dirname, '<path>'),
						<exact-match-path-alias>$: path.resolve(__dirname, '<path>'),
						// ...
					},

					// Specify which Directories should be searched for Dependencies. Upon a match, it will ignore the rest.
					modules: [
						path.join(__dirname, 'src'),
						'node_modules',
						// ...
					],

					// Specify which Files should be the Entry Point in a Directory Module. Upon a match, it will ignore the rest.
					mainFiles: [
						'index',
						// ...
					],

					// Allow for resolution of the listed Extensions, in the specified order. Upon a match, it will ignore the rest.
					extensions: [
						'.<extension>',
						// ...
					], 
				},

				// Specify how different Modules in the Project will be treated.
				module: {
					// Note: The Rules specified here only determines if any Loaders are applied to a Dependency; Webpack will still (attempt to) bundle a Dependency into the final Output, even if no Loaders are applied to it in the end.
					// Note: The Rule order in the 'rules' Array is reversed - the last Rule specified is the one that is applied first.
					rules: [
						{
							// Specifying Rule Categories / Order. Within each Category the standard Rule Order applies.
								enforce: 'pre' | 'post'
									// 'pre' - Specify that this Rule should be applied before the normal Rules are executed.
									// 'post' - Specify that this Rule should be applied after the normal Rules are executed.

							// Conditions for when the Rule Applies.
								// Requesting Resource.
								issuer: /<file-regex>/,

								// OR

								// Requested Resource.
								test: /\.(<file-extension-regex> | ... )$/,
								include: [
									path.resolve(__dirname, <relative-inclusion-path-from-webpack-config>),
									// ...
								],
								exclude: [
									path.resolve(__dirname, <relative-exclusion-path-from-webpack-config>),
									// ...
								],

							// Results of Applying the Rule.
								// Specify which Loader(s) to use for the Resource that matches for the Rule.
								// Note: The Loader order in the 'use' Array is reversed - the last Loader specified is the one that is applied first.
								use: [
									{
										loader: '<webpack-loader>',
										options: {
											// Unique Identifier to allow Webpack to avoid using JSON.stringify on this Options Object for the purposes of generating a Unique Module Identifier for the Resource and all involved Loaders.
											ident: '<unique-id>',

											// Dependent on each Loader.
											// ...
										}
									},
									// ...
								],
						}, 
						// ...
					],
				},

				// Specify completeness of any Source Maps generated from the transformations applied, vs Build Speed.
					// Separate Source Map:
						devtool: 
							'hidden-source-map' 		// Does not include the URL to the Source Map at the end of the Output Bundle. Stack Trace Info will link to Output Bundle rather than Source Code.
							| 'nosources-source-map' 	// Does not include the full Source Code in the Source Map. Stack Trace Info will still provide Source Code Line Numbers.
							| 'source-map',

				// Configure Webpack to monitor for any changes in Resolved Files and recompile them (only).
				watch: true,
				watchOptions: {
					// Ignore Folders to save on CPU Usage.
					ignored: [
						'node_modules',
						// ...
					],

					// Reduce the frequency of change detection.
					poll: <milliseconds>,

					// Specify a delay period for rebuilding to allow for consolidation of any changes that come in shortly after the first.
					aggregateTimeout: <milliseconds>,
				},
				
				// Override the default optimization actions that Webpack is set to perform whenever a Webpack mode is specified.
				optimizations: {
					// The algorithm used to derive Module IDs.
					// In the Output Bundle, the Module IDs are used as Keys in the Collection fed into the Main Function, whilst the processed Module Content are the Values tied to each Key.
					moduleIds: false | 'named',

					// ...
				}

				// Specify the Output-Points for Webpack.
				// Note: path should be given an Absolute Path to some Directory.
				output: {
					path: path.resolve(__dirname, '<output-directory-path>'),
					filename: '<filename>',
				},
				
				// Webpack Dev Server Configuration for enabling Automatic Recompilation and Reload via an In-Memory Server Process.
				// Requires the webpack-dev-server Package.
				// Run with npx webpack-dev-server.
				devServer: {
					// Indicate where should the Webpack Dev Server search for the content to serve.
					contentBase: [
						path.resolve(__dirname, '<path>'),
						// ...
					],

					// Display only errors to reduce the amount of output.
					stats: "errors-only",

					// Parse host and port from env to allow customization.
					//
					// If you use Docker, Vagrant or Cloud9, set
					// host: "0.0.0.0";
					//
					// 0.0.0.0 is available to all network devices
					host: process.env.HOST, // Defaults to `localhost`
					port: process.env.PORT, // Defaults to 8080
					open: true, // Load the content from the contentBase specifications in the Browser.

					// Enable the requesting of resources from Webpack Dev Server to other Servers.
					proxy: {
						'<request-path>': '<full-request-URL>',
						'<request-path>': {
							target: '<full-request-URL>',
							changeOrigin: true, // For URLs that involve external Domains
							// ...
						},
						// ...
					},

					// Request the Server to fallback to index.html if a requested resource cannot be found.
					// Note: Necessary for Front-End Routing, as 404s will be issued for Web Application Page URLs that are sent to the Server directly (i.e. initial Request for the Web Application, but with a URL that would have lead to a Page within the Web Application if the Web Application had already been loaded on the Client).
					historyApiFallback: true, 

					// Enable Hot Module Replacement.
					hotOnly: true,

					// Write Bundles to the Output Path on Disk, rather than just serving from Memory.
					writeToDisk: true,
				},
			};

		Extensions:
			Base:
				Webpack Packages:
					webpack											
					webpack-cli										// Run Webpack Commands.
					webpack-dev-server 								// Enable Automatic Browser Reload.

					webpack-merge 									// Used to merge different Webpack Config Objects together, allowing for composability of Webpack Configuration.
					webpack-chain 									// Alternative to webpack-merge.

					// HTML
						html-webpack-plugin							// Injection of Application JS and Application CSS into a Generated or Existing HTML Template for eventual Browser usage.

					// CSS
						style-loader								// Creates JS Code that will inject CSS Content Strings into index.html via <style> HTML Elements during runtime. Implements Hot Module Reloading for Patching CSS.
						css-loader									// Resolves local references to and transforms CSS Resources into JS Modules containing JS Strings with CSS Content.

					// JS
						babel-loader								// Enables JS Transpilation.
						@babel/core									
						@babel/preset-env							// Use Latest Javascript / ESNext.

						// Note: For resolving async / await Arrow Function Errors:
						@babel/plugin-transform-runtime				// Allow for re-use of Babel's Injected Helper Code.
						@babel/runtime								// The Production Variant of @babel/plugin-transform-runtime. Install as a Runtime Dependency. Does not require manual specification inside the 'plugins' Array.

				Plugins:
					new webpack.HotModuleReplacementPlugin() 		// Enable Hot Module Reloading.

					// Note: Instantiate a new Instance of HtmlWebpackPlugin per desired Output HTML File.
					new HtmlWebpackPlugin(
						// Note: Webpack always parses Application JS first.
						{ 
							template: <html-template-path>,

							chunks: [ '<chunk-name>', ... ],		// Include the specified Chunks into the Output HTML File.
							excludeChunks: [ '<chunk-name>', ... ], // Exclude the specified Chunks from the Output HTML File.

							scriptLoading: { 'blocking' | 'defer' }, // Disables or Enables Loading JS Scripts in an Asynchronous Manner.
							// ...
						}
					)

				Loaders:
					babel-loader
						// Loader Specific Configuration:
						options: {
							cacheDirectory: true,					// Caches the Compiled Results from Babel to speed up later Builds.

							configFile: '<config-file-path>',		// Specify the location of the Babel Configuration File to use.
						}

						// Babel Configuration: Either specified within a Project-Wide babel.config.json, or a Folder .babelrc.
						// Note: A Descendant .babelrc will merge and override the configuration specified by the Project-Wide babel.config.json and any Ancestor .babelrc.
						// Note: The content here can also be placed within the Webpack Loader Options Object, but this will prevent other Tools from using Babel.
						{
							"presets": [
								"@babel/preset-env"
							],

							"plugins": [
								"@babel/plugin-transform-runtime"
							],
						}

			Adding General Assets:
				Webpack Packages:
					file-loader										// Copies referenced Dependencies wholesale into the Output-Point, and inserts Links to them inside the Bundle where needed.
					url-loader										// Inlines referenced Dependencies into the Bundle directly as base64 Strings to save on Network Requests, or copies them wholesale into the Output-Point when the size-limit is exceeded. Depends on file-loader.
						// Images:
							svg-url-loader								// Inlines SVG Dependencies as UTF-8 Strings.

							lqip-loader									// Additionally generates an inline base64 String that represents a blurred version of the Image Dependency.
							image-trace-loader							// Additionally generates an SVG representing a monochrome silouette of the Image Dependency.

							image-size-loader							// Additionally sends the Type, Dimensions and Size of the Image Dependency alongside.

				Loaders:
					url-loader:
						options: {
							limit: <size>,							// Specify that if the Dependency exceeds <size> bytes, do not inline them into the Bundle.
							fallback: '<loader-name>',				// If the Dependency exceeds <size> bytes, use <loader-name> to process the Dependency instead.

							name: './images/[name].[ext]'			// Specify location and name of copied Dependencies in the Output-Point. Sub-Folders need not be pre-created before the Bundling Process is run.
						}

			CSS Transpiler:
				Webpack Packages:
					postcss-loader									// Enables CSS Transpilation, in the same vein as Babel for JS.
					postcss-import									// Enables inlining of Imported Resources.
					postcss-preset-env								// Use latest CSS / CSSNext.
						autoprefixer								// Adds or Removes Vendor Prefixes in CSS Rules for specified Browser Compatability. Already incorporated within postcss-preset-env. Note that it will not add other Vendor Prefixes if a specific Vendor-Prefixed CSS Rule is specified.

				Loaders:
					css-loader
						options: {
							importLoaders: <number>, 				// Indicate the number of Loaders that run before css-loader.
						}

					postcss-loader
						options: {
							sourceMap: <boolean>,					// Produces a Source Map if CSS Modules are used. Note: css-loader ultimately also needs to have this option enabled, as CSS Modules are a css-loader feature.
							ident: 'postcss',						// Removes Webpack's usage of JSON.stringify to allow for Dynamic Module Imports within this Webpack Options Object.
							plugins: (loader) => [
								// Top-to-Bottom Order
								require('postcss-import')({ root: loader.resourcePath }),
								require('postcss-preset-env')(),
								// ...
							]
						}

			CSS Pre-Processors:
				Webpack Packages:
					resolve-url-loader								// To allow for relative imports to work correctly in Sass or Less.
					sass-loader OR less-loader						// Enables use of extended CSS-related functionality.
						fast-sass-loader

					extract-text-webpack-plugin 					// Predecessor to mini-css-extract-plugin.
					mini-css-extract-plugin 						// Alternative to style-loader - Minifies and Extracts the CSS content into separate CSS Bundles.

				Loaders:
					css-loader
						options: {
							importLoaders: <number>, 				// Indicate the number of Loaders that run before css-loader.
						}

					sass-loader OR less-loader {
						options: {
							sourceMap: <boolean>,					// Produces a Source Map if CSS Modules are used. Note: css-loader ultimately also needs to have this option enabled, as CSS Modules are a css-loader feature.
						}
					}
				
			CSS Modules: Enforces Scoping for the CSS imported and used by a JS Module through Dynamically Generated CSS Selector Names.
				Webpack Packages:
					css-modules-typescript-loader					// Loader to make CSS Modules work with TypeScript. Place after css-loader in the Webpack Config Module Rules.

				Loaders:
					css-loader
						// Note: If using TypeScript, need to also use css-modules-typescript-loader.
						
						options: {
							modules: {  							// Enable CSS Modules.
								localIdentName: '<selector-identifier-config>', // Specify how the Selectors are named in the Loader's Output.
									// [local]						// Placeholder for the Original Name of the Selector.
									// [hash:base64]				// Placeholder for a Unique Identifier for the Selector.
							},

							importLoaders: <number>, 				// Indicate the number of Loaders that run before css-loader.
							sourceMap: <boolean>, 					// Create Source Map for the compiled CSS. 
								// Note: If style-loader is used, the CSS Source Map information will be embedded in the JS Source Map
								// Note: Webpack will also have to be configured to produce Source Maps via devtool.
						}

						/* 
							General Flow: 
								Define CSS Classes in the CSS Files:
									/* By default, all CSS Selectors are going to be Locally Scoped by css-loader when CSS Modules are active: */
									<css-selector> {
										/* ... */
									}
									/* Would be the Same As: */
									:local <css-selector> {
										/* ... */
									}

									/* To Prevent Scoping Behaviour (i.e don't use a Dynamically Generated Name for <css-selector>) */
									:global <css-selector> {
										/* ... */
									}

									/* Scope Specifiers are Interchangable */
									:local <css-selector-1> <css-selector-2> :global <css-selector-3> /* ... */ {
										/* ... */
									}
								
								In the JS Files:
									import classes from './index.css';
									// Set the class attribute of DOM Elements to be styled from Keys in the imported 'classes' Object.
									// The imported Object is a Mapping between the <css-selector>'s Original Name and the Dynamically Generated Names.
						*/

			CSS Extraction: Minifies and Extracts the content of all CSS Files used into a single CSS File. This allows the Browser to load the Page Structure (.html), Page Bundle (.js) and Page Styling (.css) in Parallel.
				Webpack Packages:
					mini-css-extract-plugin

				Plugins:
					new MiniCSSExtractPlugin({
						filename: '<filename>.css' 					// File Names of the CSS Bundles.
					})

				Loaders:
					MiniCssExtractPlugin.loader
						options: {
							esModule: <boolean>, 					// Converts the CSS-related CommonJS require / modules.export behaviour within the compiled JS Bundle into ES6 import / export behaviour. Useful for Tree-Shaking.

							hmr: <boolean>,							// Specifies if HMR will be active.
						}

			CSS Purging: Filters out unused CSS Content from Final Output by comparing against Source Files.
				// Note: Only works with CSS Extraction implemented.
				// Note: Source Maps will be lost upon implementing this functionality.
			
				Webpack Packages:
					glob											// Allows specification of more advanced File Paths.
					purgecss-webpack-plugin							

				Plugins:
					new PurgeCssWebpackPlugin({
						paths: () => glob.sync(`${<src-dir>}/**/*`, { nodir: true }), // Specify location of Source Files to analyze against.
						whitelistPatterns: [<pattern>, ... ],		// Specify CSS Selector Patterns to avoid Purging for.
						whitelistPatternsChildren: [<pattern>, ... ], // Specify CSS Selector Patterns to avoid Purging their Children Selectors for.
					})

			TypeScript:
				Webpack Packages:
					ts-loader										// Enables use of TypeScript. Predecessor to @babel/preset-typescript. Use for Older Babel Compilers (i.e. < v7).
						// Type Checks with Resultant Errors will show an Error Page in the Browser if the Webpack Dev Server is running.

					@babel/preset-typescript						// Newer Alternative to ts-loader - Enables use of TypeScript with Babel. 
						// It simply strips the TypeScript Code away, whilst assuming that the Type Checking is done separately by another Tool.
						// With this approach alone, Type Checking would not be done during development with Automatic Reload / Hot Module Replacement.
						// Remember to add the TypeScript File Extensions in the resolve.extensions part of the Webpack Config File.

					fork-ts-checker-webpack-plugin					// Executes TypeScript Type Checking as a separate Process from the main Webpack Bundling Process to speed it up.
						// Especially convenient when Automatic Reload / Hot Module Replacement is enabled.

						// Note: Runs Module Resolution independently from Webpack. This may cause it to run on Files that won't be included in the Final Bundle.
							// If those Files have TypeScript Errors, fixing them will NOT trigger Automatic Reloading by Webpack, as Webpack only does so on detecting a change in the Files from the Entry-Points.

				Loaders:
					ts-loader
						options: {
							transpileOnly: true,					// Disable Type Checking to speed up Builds. Used with the fork-ts-checker-webpack-plugin to allow Type Checking to occur on a separate Process.
						}

			React:
				Webpack Packages:
					@babel/preset-react 							// Enables use of JSX Syntax for React.

			Additional:
				Webpack Packages:
					npm-install-webpack-plugin 						// Automatic Package Installation when imported.
					write-file-webpack-plugin 						// Forces Webpack Dev Server to emit the Resolved Files.

					// HTML
						webpack-cdn-plugin							// CDN for node_modules
						dynamic-webpack-cdn-plugin					// CDN for node_modules

					// CSS
						fast-css-loader								// Alternative to css-loader. Does not support CSS Source Maps.

					// JS
						@babel/plugin-transform-runtime 			// Enables re-use of Babel's injected helper code to save on code size. Not a Webpack Plugin.

				Plugins:
					// JS:
						new webpack.ProvidePlugin({ 
							// Enables Automatic Importing of specified Modules / Functions in every Module of the Project.
							// Will search for Module in Current Folder and the node_modules Folder by default.
							'<alias>': ['<module>', '<path-to-function>', ...],
							// ...
						})

	Commands: Requires the webpack-cli Package.
		npx webpack-cli init 										// Interactively create a Webpack Config File.

		webpack 													// Compiles the Project via a specified Setup Procedure.
		npx webpack-dev-server 										// Starts the Webpack Dev Server for Automatic Code Compilation and Browser Reload.
			--config <config-file>.js  								// Specify the Webpack Config File to use.

			--mode=development 										// Optimizes the bundling process for Build Speed and Debugging.
			--mode=production 										// Optimizes the bundling process for Runtime Speed and Bundle Size.
				// Note: The Webpack Configuration can be in the form of a Function to receive the 'mode' value.
				// Note: Does NOT set process.env.NODE_ENV values automatically. Some third-party Webpack Loaders and Plugins may rely on this flag, so there is a need to set it independently in the Node Script Command as well.
				module.exports = (env, options) => {
					// options.mode ...

					// return Webpack Config Object
				};

			--env.<variable>										// Send in Environment Variables to the Webpack Configuration. 
				// Note: The Webpack Configuration can be in the form of a Function to receive the 'env' Object.
				// Note: This is different from the process.env.<variable> global Object from Node.
				module.exports = (env) => {
					// env.<variable> ...

					// return Webpack Config Object
				};

		// Tip: Use Nodemon to monitor for changes to the Webpack Config Files, and restart running Webpack Processes upon change.
		nodemon --watch package.json --watch <config-file>.js --exec \" <command> \"
		
