Webpack.js
	Abbreviations:
		
	
	Description: Asset Transformer / Pre-Processor and Module Bundler.
	
	Tutorials:
		
	
	Concepts:
		Plugins:				Third-Party Addons that add to Webpack's functionality.

		Module:					A File or Directory (with an index.js) whose defined functionality is designed to be re-usable across multiple parts of the Project.
		Entry-Point:			A User-specified Module that dictates where should Webpack start the bundling process from.
		Loaders:				Third-Party Tools that assist in the transformation of encountered Dependencies in a Module.

		Output-Point:			A User-specified Location that dictates where should Webpack output the bundle(s) it creates.
	
	Details:
		Webpack works by: 
			1. Starting from a User-specified 'Input' Modules / Entry-Points in the Project.

			2. Traversing and Constructing Dependency Graphs via defined Module Imports and Exports.
				For the current Module, if the Module contains a Dependency, Webpack will proceed to recursively resolve the Dependencies first.
				Each Module Dependency is checked against the config for (a) corresponding Loader(s) to transform the Dependency into JS first, before adding the transformed Dependency to the current 'Output' Bundle.

			3. Producing 'Output' Bundles based on the constructed Dependency Graphs.

		Features:
			Webpack initially only understands JSON and JS syntax.
			Webpack can parse 'import' and 'export' ES6 statement functionality without the need for Babel.

		Configuration Template: 
			const path = require('path');

			module.exports = {
				// Specify the Entry-Points for Webpack.
				entry: {
					<entry-chunk-name>: '<entry-point-file-path>',
					...
				},

				module: {
					// Specify which type of Dependency imported / required by a Node Module should use which Loader(s).
					// Note: the Loader order in the 'use' Array is reversed - the last Loader is applied first.
					rules: [
						{
							test: /\.(<file-extension-regex> | ... )$/,
							exclude: /<exclusion-path-regex>/,
							use: [
								{
									loader: '<webpack-loader>',
									options: {
										// Dependent on each Loader.
										// ...
									}
								},
								...
							],
						}, ...
					],
				},

				// Configure how Modules are resolved.
				resolve: {
					// Aliases are used to shorten import or require declarations in Files.
					alias: { 
						<path-alias>: path.resolve(__dirname, '<path>'),
						<exact-match-path-alias>$: path.resolve(__dirname, '<path>'),
						...
					},

					// Specify which Directory should be searched for Node Modules.
					modules: ['node_modules', ...],

					// Specify which File should be the Entry Point in a Node Module.
					mainFiles: ['index.js', ...],

					// Resolve the listed Extensions in the specified order.
					extensions: ['.<extension>', ...], 
				},

				output: {
					path: path.resolve(__dirname, '<output-directory-path>')
					filename: '<filename>',
				},
			};

	Commands:
		npx webpack src/<file.js> --output dist/<bundle>.js // Trigger the bundling process for file.js and emits the resultant bundle into <bundle>.js.
			--mode development // Optimizes the bundling process for Build Speed and Debugging.
			--mode production // Optimizes the bundling process for Runtime Speed and Bundle Size.

		npx webpack --config webpack.config.js	// Compiles the project via a specified setup procedure.
	
