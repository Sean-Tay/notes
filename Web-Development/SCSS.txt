SCSS
	Abbreviations:
		CSS: 					Cascading Style Sheets.
		SCSS:					Sassy CSS.
	
	Description:				A superset of CSS3 that adds programmatic features.
	
	Resources:
		node-sass				A wrapper around LibSass for NodeJS usage.
	
	Concepts:
		Rule:					A <{key | rule}>: <value> pair specifying a CSS property.
		Rule-Set:				A grouping of CSS Rules that is usually applied to CSS DOM Selectors.

		List:					A comma or space delimited series of Values.
	
	Details:
		SCSS Syntax needs to be compiled down to CSS before it can be used.
		SCSS Files should have the .scss extension, NOT .sass.

		Features:
			Imports:
				// Note: The SASS_PATH Node Environment Variable can be set to specify a Global Import Root Path(s), in the case a Local Import Path cannot be resolved.
					// SASS_PATH=<path>:<path>:... 
					SASS_PATH=node_modules:src
				
				// Partials: SCSS Files with a leading underscore in their name will not be compiled to CSS.
					// '_<scss-file-name>'

				@import url(<url>); // Note: Relative URLs must be with respect to the Output Root or Web Root.
				@import '~<package-url>'; // Import SCSS Modules from Packages in node_modules. Note: Requires sass-loader to be used.

			Variable Definition:
				$<variable-name>: <value>;

				<css-dom-selector>-base-example {
					<rule>: $<variable-name>; // Variable Usage for a CSS Rule Value.
				}

				<css-dom-selector>#{$<variable-name>}-interpolation-example { // Variable Usage for a CSS DOM Selector Name.
					// ...
				}

			Nested Rule-Sets:
				<outer-css-dom-selector> {

					// ...

					<inner-css-dom-selector> { // Equivalent to '<outer-css-dom-selector> <inner-css-dom-selector>'
						// ... 
					}

					// ...

					// Note: & will refer to <outer-css-dom-selector>.
					// Note: @at-root will force the <inner-css-dom-selector> to be at the level of the <outer-css-dom-selector>.
				}

			Mixins: Use function-like Rule-Sets within other Rule-Sets.
				@mixin <mixin-name>($<arg1>, ...) {
					// ...

					// If another Rule-Set is allowed to be passed in.
					@content;
				}

				<css-dom-selector> {
					@include <mixin-name>(<val1>, ...){
						// Content for Rule-Set.

						// ...
					};

					// ...
				}

			Extension / Inheritance: Apply Rules from a Class to another. 
				// The Silent Class will have no CSS footprint in the compiled CSS if not used.
				%<silent-class> {
					// ...
				}

				<css-dom-selector> {
					@extend %<silent-class>;
					// ...
				}
	
	Commands:
		
	
