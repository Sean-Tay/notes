Web Dev:
	Abbreviations:
		HTTP:					HyperText Transfer Protocol.

		URL:					Universal Resource Locator.
		
		JSON:					Javascript Object Notation.

		SOAP:					Single Object Access Protocol.
		RPC:					Remote Procedure Call.
		RMI:					Remote Method Invocation.

		REST: 					Representational State Transfer.

		HTTPS:					HyperText Transfer Protocol Secure.
		CSP:					Content Security Policy.
		CORS:					Cross Origin Resource Sharing.
	
	Concepts:
		Web Site:				A Service hosted on the Web - meant for Humans.
		Web Service:			A Service hosted on the Web - meant for Applications.

		Web Server:				A running Process that listens for incoming Requests for information over the Web and sends back Responses.
		App Server:				Hosts and Exposes Business Logic and Processes.

		URL:					A String that uniquely identifies a Resource / Site / Service on the Web. Consists of:
			Protocol:			The Protocol used to specify the communication mode with the Server.
			Host and Domain:	The Entity that the Server is running on, and the Administrative Space the Entity is in.
			Path:				The part that points to a Resource within the Host (i.e. one or more of {"/<simple>" | "/:<parameter>" | "/:<parameter><regex>"}).
			Query:				Optional appended String to the Path that represents URL Arguments in Key-Value Pairs (i.e. <path>/?<key>=<value>& ...).

		Origin: 				Protocol + Host + Domain + Port.

		Routing: 				The process of using URLs to determine the part of the Web Application exposed to the User. Traditionally handled Server-Side.

		JSON:					A readable implementation-independent Data interchange format.

		SOAP:					Messaging definition for the interaction between Web Services.

		Cookie:					A Key-Value Pair Data Structure used to store persistent Session State on the Browser when using Stateless HTTP, set via 'set-cookie' HTTP Response Headers. Each Field Attribute consists of:
			Name:				Field Key.
			Value: 				Field Value.

			Domain:				Determines which Domain can access the associated Field.
			Path:				Determines which part of the Web Application is allowed to access the associated Field.
			Expires / Max Age: 	Determines validity lifespan of the associated Field.
			Size:				Number of characters for associated Field Name and Value.

			// Security-Related Fields:
			HTTP / HttpOnly:	Prevents Client-Side manipulation of the Cookie via JS and other vectors - the Cookie is only used for Server-Side meta-session activity.
			Secure:				Only transmit the assosicated Field over HTTPS.
			SameSite:			Used to prevent CSRF Attacks.

		CSP: 					A backwards-compatable HTTP Response mechanism that allows a Web Application to specify the acceptable types and sources of Resources that can be used by the Client for the Resource currently loaded. This prevents the Web Application from inadvertedly loading malicious Resources from a Third-Party, and is helpful in mitigating Injection Attacks, particularly XSS.
			For the Web Application to protect itself.
	
		CORS:					A HTTP Response mechanism that allows a Web Application running on one Origin to dictate to Clients which Third-Parties running on different Origins can access its Resources, and how they can do so. This allows increased flexibility from the Same-Origin only policy whilst still preventing unauthorized Third-Parties from potentially doing something malicious to the User with respect to the Web Application.
			For other Web Applications to protect themselves.

	Details:
		Summary of Full-Stack:
			The Front-End of a Web Site or Application consists of the HTML, CSS, JavaScript, and static assets sent to a Client, like a Web Browser.

			A Web Server is a running Process that listens for incoming Requests for information over the Web and sends back Responses.

			The Server-Side of a Web Application, sometimes called the Application Server, handles important tasks such as Authentication and Authorization.

			The Back-End of a Web Application often has a Web API which is a way of interacting with an Application’s Data through Requests and Responses.
				Creating, Reading, Updating and Deleting Data is a large part of a Web Application’s Back-End. Operational Processes record Data to Databases via Transactions, and may be accessed from Databases or Data Warehouses.

			Together the technologies used to build the Front-End and Back-End of a Web Application are known as the Stack, and many different Languages and Frameworks can be used to build a robust Back-End.

		RPC: A Mechanism that models Communication between two Processes as straightforward Procedure / Function Calls to exchange Data.
			An RPC Mechanism usually defines a Network Protocol, some Format for exchanging Messages, a portable way of serializing and deserializing Data and specific Programming Language support (like Code Generators). 
			
			It typically involves generating some Function Stubs on the Client Process that makes the Function Call appear local, but behind the stub is logic to marshall the Request and send it to the Server Process. 
			The Server Process then unmarshalls the Request and invokes the actual Function before repeating the process in reverse to send whatever the Function returns back to the Client Process. 
			
			RPC's Function Calls are more akin to Verbs representing Operations to perform on Resources. This differs from REST, in which each URL represents a Concept / Noun / Resource.

			RMI is closely related to RPC, but uses Object-Oriented control to execute. This is prevalent in Java.

			REST is usually preferred, as REST features an additional layer of abstraction (i.e. the URLs) to prevent changes pertaining to Functions in Backend to affect Frontend.

		REST: An Architectural Style to facilitate cleaner communication and interaction between Systems via the Web.
			The core problem is that in the past, it was only necessary to facilitate communication between a small group of Machines in the Business' Local Network to operate. However, it has become increasingly necessary to talk to Machines outside of the Business Network (i.e. other Businesses, etc).

			When HTTP was designed, it was with the intention to allow for communication between Machines anywhere in the world.

			The idea is to represent Concepts / Resources / Nouns as URLs. Any other related Concepts / Resources / Nouns are also stored as URLs. Machines can then use HTTP with the URLs to reach other Machines elsewhere and perform operations on the Concepts / Resources / Nouns.
				Example:
					http://MyRestaurant:8080/Orders/Order?OrderNumber=asdf (POST: {Tacos object})
					http://MyRestaurant:8080/Orders/Order?OrderNumber=asdf (GET)
					http://MyRestaurant:8080/Orders/Order?OrderNumber=asdf (PUT: {Pineapple Tacos object})

				The combination allows for a standardized way of communication between all Entities to refer to things.
					URLs used per API Call can be the same, but the accompanying HTTP Verbs used would result in different effects.

				If the URL contains a Verb, it is an indicator that that URL does not represent a Concept / Resource / Noun.

			Additionally, on the premise that all Web Applications only require 4 Universal Verbs to operate on all things successfully:
				POST: Accompanying Data is used to modify the Resource represented in the given URI, following the rules documented by the Resource Type.
				PUT: Replace the Resource represented by the given URI, if anything.
				PATCH: Apply this Diff to the Resource, if the Resource has the same State as it did the last time it was queried.
				
				Create / POST
				Read / GET
				Update (Replacement) / PUT
				Update (Partial-Update) / PATCH
				Delete / DELETE

			The structure of the information in the Application has been mapped directly onto a structure of HTTP URLs, using only standard HTTP operations that allow for HTTP body content.

			The implication is that all information that the Server requires to process the Client's Request is in the HTTP Request, and that the Client would get all other related information from the Server alongside the original Client Request, referenced as other URLs.

			Another implication is that the Client and the Server need not know how the other was implemented in order to interact. As long as each side knows what format of messages to send to the other, they can be kept modular and separate.

			This negates the need to store a Session State for tracking purposes, as the 'State' is now transferred between Client Requests and Server Responses.
				Statelessness allows for Scalability, as now any Node in the Network can serve appropriate Client Requests.
				Statelessness allows for Cacheability.
		
		Web Security:
			HTTP Response Headers:
				// HTTPS Only:
				// Note: Should be supplemented with automatic redirects to HTTPS connections if a Browser attempts to load a URL with the regular HTTP protocol.
					Strict-Transport-Security:
						max-age=<expire-time> // The time in seconds that the Browser should remember this Strict-Transport-Security configuration for this Site.
						includeSubDomains // Optional Flag to indicate if this rule should apply to sub Network Domains as well.

				// CSP:
					Content-Security-Policy: <policy-directive>; ...
						// Note: The more <policy-directive>s specified (including duplicated directives), the more restricted it becomes.
						
						default-src: <source> [<source>] // Can be seen as a fallback for other directives if they are not specified. Specify this at the beginning of the Content-Security-Policy directive string.
							'self' // Specify that all resources should only originate from the Web Site's own Domain.

				// CORS: 
					
			Cookie Configuration: See the Security-Related Fields section of the Cookie concept above for more exposition on each Field listed below.
				HttpOnly
				Secure
				SameSite

