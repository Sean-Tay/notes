Gradle
	Abbreviations:
		GAV: Group + Artifact + Version Maven Coordinates.
	
	Description: Configurable Automation Tool for Software Projects (usually Java oriented, as it requires the JVM to run). Built with Kotlin and Groovy.
	
	Resources:
		Tutorial: https://docs.gradle.org/current/userguide/part1_gradle_init.html
		Lifecycle: https://docs.gradle.org/current/userguide/build_lifecycle.html
		In-Built Task Reference List: https://docs.gradle.org/current/dsl/index.html

		Plugin List: https://plugins.gradle.org/
	
	Concepts:
		Project: The Project that Gradle manages.

		Gradle Wrapper: A Tool that allows Gradle to be run without having to install Gradle on the System before invoking Gradle. Primarily used to make the version of Gradle consistent between Project Users.

		gradle-wrapper.properties: Configuration File for the Gradle Wrapper.
		gradlew / gradlew.bat: Script used to prepare the workspace for running Gradle. This includes downloading Gradle based on the configuration defined in gradle-wrapper.properties, and setting JAVA_HOME, among other things.

		gradle.properties: Configuration for Gradle itself. Can be used to define Variables that can be retrieved within settings.gradle and build.gradle.

		settings.gradle: Script that is executed before 'build.gradle'. Used to configure Settings that apply to all Sub-Projects in the Gradle Build.
		settings.gradle.kts: Same as above, but based on the Kotlin DSL.

		build.gradle: Script that contains the Build Logic for the current Project, based on the older Groovy DSL.
		build.gradle.kts: Same as above, but based on the Kotlin DSL.

		Plugin: An extension used to add functionality to the Build Tool.
		Dependency: An extension used to add functionality to the Application itself.
		Task: An atomic piece of work to be executed by Gradle.
		Action: Steps within a Task.

		Initialization Phase: The first phase; Mainly reads the settings.gradle.kts File to determine Projects and sub-Projects.
		Configuration Phase: The second phase; Parses the build.gradle.kts File for each Project / sub-Project, and creates a Task DAG.
		Execution Phase: The third phase; Schedules and executes selected Tasks.
	
	Details:
		Differences between Gradle and Maven:
			Maven serves as an alternative to Gradle in terms of a Build Tool:
				Maven utilizes a Project-Object-Model specified in an XML File (pom.xml) to describe Project Structure, Dependencies and Build Process.

			Maven has also introduced a standardized way to distribute and share Java Libraries and Plugins.
				Other tools, including Gradle, can connect with Maven Repositories to download Project Dependencies.

		// gradle-wrappper.properties
			// Syntax: <key>=<value>

			// Specify from which Repository should the Gradle Binary be downloaded from.
			distributionUrl=<url>
			// Specify where should the Gradle Binary be downloaded to.
			zipStorePath=<path>
			// Specify where the Gradle Binary should be installed to. Even though it defaults to wrapper/dist, it appears that it ultimately ends up in the .gradle Folder.
			distributionPath=<path>

		// gradle.properties
			// Syntax: <key>=<value>
			<gradle-variable>=<value>

		// settings.gradle.kts
			// Code specified here is executed during the Initialization Phase.

			// Reference <gradle-variable> from a gradle.properties File:
			val <gradle-variable>: String by project

			// Specify Configuration that would be common to all 'plugins' Blocks within all Sub-Project build.gradles.
			pluginManagement {
				// Define Repositories to retrieve Sub-Project Plugins from.
				repositories {
					maven {
						url = uri("<artifactory-path>")
						isAllowInsecureProtocol = true
					}
					// ...
				}
			}

			// Specify the name of the Project.
			// Note: Controls the name of the Build Artifact generated.
			rootProject.name = "<name>"

			// Include Sub-Projects
			// Note: Each Sub-Project should have its own build.gradle.
			include '<module-name>'

		// build.gradle.kts
			// Code specified here is executed in the Evaluation Phase.

			// Specify the Group or Organization that it belongs to.
			// Note: Don't include the Project in the <reverse-domain-name>.
			group "<reverse-domain-name>"

			plugins {
				kotlin("<plugin-package-url>") version "<sem-version>"

				// OR

				id("<plugin-package-url>") version "<sem-version>"

				// Useful Plugins
				jacoco // For generating Test Coverage Reports

				id("com.github.node-gradle.node") version "<latest-version>"	// run npm / yarn / pnpm via Gradle; ensure that node packages installed are for the same OS Environment as where gradle is run.

				id("com.github.johnrengelman.shadow") version "<latest-version>"	// For generating uberJars with the shadowJar Gradle Command

				id("maven-publish")
			}

			// Define Repositories to retrieve Project Dependencies from.
			repositories {
				maven {
					url = uri("<artifactory-path>")
					isAllowInsecureProtocol = true

					credentials {
						username = System.getenv("<env-variable>") // Do not expose Plaintext here
						password = System.getenv("<env-variable>") // Do not expose Plaintext here
					}
				},
				// ...
			}

			// Reference <gradle-variable> from a gradle.properties File:
			val <gradle-variable>: String by project // or use findProperty("<gradle-variable>") in the places that it is used
				// Usage
				// "${<gradle-variable>}"

			// Version Catalogue
			dependencies {
				// Used during both Compile Time and Run Time, and is exported to Consumers.
				api("<gav-maven-coordinates>")

				// Used during both Compile Time and Run Time, but is not exported to Consumers.
				implementation("<gav-maven-coordinates>")

				compileTimeOnly("<gav-maven-coordinates>")

				runTimeOnly("<gav-maven-coordinates>")

				testImplementation("<gav-maven-coordinates>")
			}

			// Create a new Task
			tasks.register<<task-type>>("<task-name>") {
				doFirst | doLast {
					// Code specified here (i.e. Actions) is executed in the Execution Phase.

					// ...
				}
				
				// Code specified here (i.e. Task Configuration) is executed in the Configuration Phase.

				// ...

				// cwd
				setWorkingDir("<relative-path>")
			}

			// Modify an Existing Task (i.e. from a Plugin)
			// Tip: Usually register is used to configure a Task, whilst named is used to define the Actions for a Task via doFirst or doLast
			tasks.named("<task-name>") {
				// ...
			}

			// Specify that executing <task-name> will trigger <parent-task-name> first
			tasks.findByName("<task-name>").dependsOn("<parent-task-name>")

			// Example: Exec Task
			tasks.register<Exec>("<task-name>") {
				// Execute CLI Command
				// Note: If the original command has spaces, delimit it via ','
				commandLine("<command>","<sub-command>", ... )
			}

			// Example: Copy Task
			// Tip: Sync can be used instead of Copy with the exact same syntax; Sync will clear the Target Directory first before copying.
			tasks.register<Copy | Sync>("<task-name>") {
				from("<path>")
				into("<path>")
				include("<file-glob-pattern>")
			}

			// Tip: Example Tasks can be made to run during the Configuration Phase:
				// Example: Copy Task
				copy {
					// ...
				}

			allprojects / subprojects {
				// Setup Tests with JUnit
				tasks.withType(Test) {
					useJUnitPlatform()
					
					// OR

					useJUnitPlatform {
						include '<path>'
						exclude '<path>'
					}

					testLogging {
						events "passed", "skipped", "failed"
					}
				}

				// Setup Jacoco Coverage Report
				tasks.jacocoTestReport {
					reports {
						xml.required = true
					}
				}

				// Setup Publishing Routines
				publishing {
					repositories {
						// ...
					}

					publications {
						create<MavenPublication>("Maven") {
							groupId = "<group-name>"
							artifactId = "<artifact-name>"
							version = "<version>" // Optional - if left out it will default to the Gradle Project Version
							from(components["java"])
						}
					}
				}
			}

	Commands:
		// Initialize a Gradle Project in the current directory:
		gradle init
			--type java-application
			--type kotlin-application

			// Specifies that settings.gradle and build.gradle should be in Kotlin (i.e. .kts Files).
			--dsl kotlin

		// General gradlew Syntax - execute Tasks:
			// Note: Executes <task>s for all Sub-Modules.
			gradlew <task> ...

			// Execute <task>s only for Root Module.
			gradlew :<task> ...
		
			// Execute <task>s in specific Sub-Modules.
			gradlew :<module>:<task>

		// Build using the build.gradle File in the current directory:
		gradlew build

		// Execute a Task defined within the build.gradle in the current directory:
		gradlew -q <task-name>
	
