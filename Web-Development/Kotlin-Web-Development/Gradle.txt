Gradle
	Abbreviations:
	
	Description: Configurable Automation Tool for Software Projects (usually Java oriented, as it requires the JVM to run). Built with Kotlin and Groovy.
	
	Resources:
	
	Concepts:
		Project: The Project that Gradle manages.

		Gradle Wrapper: A Tool that allows Gradle to be run without having to install Gradle on the System before invoking Gradle. Primarily used to make the version of Gradle consistent between Project Users.

		gradle-wrapper.properties: Configuration File for the Gradle Wrapper.
		gradlew / gradlew.bat: Script used to prepare the workspace for running Gradle. This includes downloading Gradle based on the configuration defined in gradle-wrapper.properties, and setting JAVA_HOME, among other things.

		gradle.properties: Configuration for Gradle itself. Can be used to define Variables that can be retrieved within settings.gradle and build.gradle.

		settings.gradle: Script that is executed before 'build.gradle'. Used to configure Settings that apply to all Sub-Projects in the Gradle Build.
		settings.gradle.kts: Same as above, but based on the Kotlin DSL.

		build.gradle: Script that contains the Build Logic for the current Project, based on the older Groovy DSL.
		build.gradle.kts: Same as above, but based on the Kotlin DSL.

		Plugin: An extension used to add functionality to the Build Tool.
		Dependency: An extension used to add functionality to the Application itself.
		Task: An atomic piece of work to be executed by Gradle.
	
	Details:
		// gradle-wrappper.properties
			// Syntax: <key>=<value>

			// Specify from which Repository should the Gradle Binary be downloaded from.
			distributionUrl=<url>
			// Specify where should the Gradle Binary be downloaded to.
			zipStorePath=<path>
			// Specify where the Gradle Binary should be installed to. Even though it defaults to wrapper/dist, it appears that it ultimately ends up in the .gradle Folder.
			distributionPath=<path>

		// gradle.properties
			// Syntax: <key>=<value>
			<gradle-variable>=<value>

		// settings.gradle.kts
			// Reference <gradle-variable> from a gradle.properties File:
			val <gradle-variable>: String by project

			// Specify Configuration that would be common to all 'plugins' Blocks within all Sub-Project build.gradles.
			pluginManagement {
				// Define Repositories to retrieve Sub-Project Plugins from.
				repositories {
					maven {
						url = uri("<artifactory-path>")
						isAllowInsecureProtocol = true
					}
					// ...
				}
			}

			// Specify the name of the Project.
			// Note: Controls the name of the Build Artifact generated.
			rootProject.name = "<name>"

			// Include Sub-Projects
			// Note: Each Sub-Project should have its own build.gradle.
			include '<module-name>'

		// build.gradle.kts
			// Specify the Group or Organization that it belongs to.
			// Note: Don't include the Project in the <reverse-domain-name>.
			group "<reverse-domain-name>"

			plugins {
				kotlin("<plugin-package-url>") version "<sem-version>"

				// OR

				id("<plugin-package-url>") version "<sem-version>"
			}

			// Define Repositories to retrieve Project Dependencies from.
			repositories {
				maven {
					url = uri("<artifactory-path>")
					isAllowInsecureProtocol = true
				},
				// ...
			}

			// Reference <gradle-variable> from a gradle.properties File:
			val <gradle-variable>: String by project // or use findProperty("<gradle-variable>") in the places that it is used

			dependencies {
				// Used during both Compile Time and Run Time, and is exported to Consumers.
				api("<dependency-package-url>")

				// Used during both Compile Time and Run Time, but is not exported to Consumers.
				implementation("<dependency-package-url>:${<gradle-variable>}")

				compileTimeOnly("<dependency-package-url>:${<gradle-variable>}")

				runTimeOnly("<dependency-package-url>:${<gradle-variable>}")

				testImplementation("<dependency-package-url>:${<gradle-variable>}")
			}

			task <task-name>( ... ) {
				// ...
			}

			allprojects / subprojects {
				// Setup Tests with JUnit
				tasks.withType(Test) {
					useJUnitPlatform()
					
					// OR

					useJUnitPlatform {
						include '<path>'
						exclude '<path>'
					}

					testLogging {
						events "passed", "skipped", "failed"
					}
				}
			}

	Commands:
		// Initialize a Gradle Project in the current directory:
		gradle init
			--type java-application
			--type kotlin-application

			// Specifies that settings.gradle and build.gradle should be in Kotlin (i.e. .kts Files).
			--dsl kotlin

		// General gradlew Syntax - execute Tasks:
			// Note: Executes <task>s for all Sub-Modules.
			gradlew <task> ...

			// Execute <task>s only for Root Module.
			gradlew :<task> ...
		
			// Execute <task>s in specific Sub-Modules.
			gradlew :<module>:<task>

		// Build using the build.gradle File in the current directory:
		gradlew build

		// Execute a Task defined within the build.gradle in the current directory:
		gradlew -q <task-name>
	
