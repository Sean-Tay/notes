http4k
	Abbreviations:
	
	Description: Lightweight and Type Safe HTTP Client and Server Library for Kotlin Applications.
	
	Resources:
	
	Concepts:
	
	Details:
		// Relevant Packages:
			org.http4k.core.*
			org.http4k.routing.* // Library for setting up Server Routes
				// Relevant Types:
					// Server
						Request
						Response
						HttpHandler // (Request) -> Response
						RoutingHttpHandler

						Filter // (HttpHandler) -> HttpHandler
							.then(next: Filter): Filter
							.then(next: HttpHandler): HttpHandler

		// Setting up the Server
			// Middleware Definition
				val filter: Filter = Filter {
					// Tip: next is a HttpHandler
					next -> {
						req -> 
							// ...
							val res = next(req)
							// ...
							res
					}
				}.then(
					// Another Filter
					next -> {
						req -> 
							// ...
					}
				)

			// Route Definition
				fun <handler-function>( ... ): RoutingHttpHandler {
					val staticHandler = static(ResourceLoader.Directory("./public"))
					val redirectToStaticHandler = { request -> staticHandler(request.uri(Uri.of("<fallback-route>"))) }

					return routes(
						// "<route>/{<path-parameter>}" bind Method.<http-method-type> to HttpHandler
						"<route>/{<path-parameter>}" bind Method.<http-method-type> to { 
							req ->
								val pathParam = req.path("<path-parameter>")
								val queryParam = req.query("<query-parameter>")

								// ...

								Response(Status.<status>)
									.header(<header-field>, <header-value>)
									.header()
									// ...
									.body("<value>")
						},

						// Note: You cannot have <path-parameter>s before the deepest Handler Function.
						// Note: The Handler Function must specify a RoutingHttpHandler, NOT HttpHandler, otherwise the nested paths will NOT register.
						"<route>" bind <another-handler-function>( ... ),

						// Filter-Augmented Route
						"<route>" bind Method.<http-method-type> to <filter>.then {
							req -> 
								// ...
						},

						// Filter-Augmented Handler
						"<route>" bind Method.<http-method-type> to <filter>.then(<handler-function>( ... )),

						// Inline Nested Routing
						// Tip - Useful to adjust Filters w.r.t some Path / Query Param
						"<route>" bind Method.<http-method-type> to {
							req ->
								// ...

								<filter>.then(
									<filter>
								). // ...
								).then {
									req ->
										// ...
								} (req)
						}

						// Serving Static Content
						// Tip - Should be specified close to the bottom of the Routing Configuration.
						"<route>" bind staticHandler,
						// History API Fallback for SPA UIs
						"/{_:.*}" bind redirectToStaticHandler,

						// Fallback Route
						Fallback bind <fallback-handler-function>( ... )
					)
				}

			fun main() {
				<handler-function>.asServer(<server>(<port>)).start()
					// <server>
						// SunHttp
			}

		// Setting up and using the Client
			fun main() {
				val client: HTTPHandler = <http-client>()

				val request = Request(Method.<http-method-type>, "<url>")

				val response = client(request)
			}
	
	Commands:
		
	
