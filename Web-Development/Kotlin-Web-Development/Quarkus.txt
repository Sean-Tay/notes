Quarkus
	Abbreviations:
		META-INF: Meta Information.

		CDI: Contexts and Dependendency Injection.
	
	Description: Java Stack for creating Applications tailored to run on a OpenJDK HotSpot (Java) or GraalVM (Native) Container within a Kubernetes (Container-Based) Environment.
	
	Resources: 
	
	Concepts:
		Bean: An Object managed by the Quarkus Container that can be injected into other Components as part of Dependency Injection.
			Scope: An Annotation that denotes the lifespan of the Bean, and the degree by which it is shareable between Components.

		Quarkus Container: The entity in Quarkus responsible for providing a Runtime Environment for the Application, and managing its lifecycle and its Components - creating and destroying Beans as needed.

		CDI: Java EE-related API that provides a framework for managing the dependencies between Components in an Application. It faciliates Dependency Injection via Annotations (e.g. @Inject), and is responsible for instructing the Quarkus Container on when to create and destroy a Bean Instance based on its Scope.
			Injection Point: The location at which a Bean Instance is to be injected into a Class (typically denoted via the @Inject Annotation).
				Qualifiers: Additional Specification for a Bean and Injection Point to allow for more precise matching in the case where there's multiple existing Beans of the same Type.

			Interceptors: Components that allow for the addition of behaviour before or after the invocation of a Bean's Method or Lifecycle Event.

			Decorators: Allows extension of existing Beans without modification of the Bean's Code.

		META-INF: Directory that traditionally contains Meta-Information about the jar File being generated.
		META-INF.resources: Directory that would contain Static Assets to be served when the Quarkus Application is running.

		uber-jar: Contains all the Dependencies needed to run the Application within.

		OpenJDK Hotspot: High Performance VM for running Java Applications.
		GraalVM: High Performance VM for running Applications written in different languages.
	
	Details:
		Application Lifecycle:
			The Quarkus Container starts up the Application and initializes all Components, including Beans.

			CDI manages the Dependencies used within Components, injecting the Beans Instances into Injection Points where needed.
				Injection of a Bean into an Injection Point can only be done when the Bean's Type and Qualifier matches the one at the Injection Point; if there are none, an UnsatisfiedResolutionException is thrown; if there are multiple, an AmbiguousResolutionException is thrown.

			Depending on the Scope of the Bean Instance, it is either preserved or maintained once the Component is done with the Bean Instance to save on Memory.

		Typical Template Project Structure:
			// <module>
				// build

				// gradle
					// wrapper
						// graddle-wrapper.jar
						// graddle-wrapper.properties

				// src
					// main
						// docker

						// kotlin

						// resources
							// META-INF.resources
								// index.html

							// application.properties
								

					// native-test
						// kotlin

					// test
						// kotlin

					// gradle.properties
					// settings.gradle.kts
					// build.gradle.kts
					// gradlew
					// gradlew.bat
	
		Configuration:
			// Profiles: Designate which set of Configuration Variables should be used during Runtime:
				// Set the quarkus.profile Configuration Property:
					// gradlew quarkusDev "-Dquarkus.profile=<value>"
			
				// Standard Profiles:
					dev: quarkusDev
					test: When Running Tests
					prod: When there is no Active Profile

			// In Decreasing Order of Priority:
				// System Properties:
					// gradlew ... "-D<key>.<subKey> ... <subKey>=<value>"

				// Environment Properties:
					// export <key>_<subKey> ... <subKey>=<value>; gradlew ...

				// .env File:
					// _<profile>_<key>_<subKey> ... <subKey>=<value>

				// application.properties / application-<profile>.properties:
					// <key>.<subKey> ... <subKey>=<value>
					// <key>.<subKey> ... <subKey>=${ ... }

					// <key>.<arrayKey>=<value>,<value>, ...
					// <key>.<arrayKey>[0]=<value>
					// <key>.<arrayKey>[1]=<value>
					// ...

					// Set Quarkus to search w.r.t the Classpath (includes the root of the jar File it gets bundled into):
					// <filpath-property>=classpath:<filepath-value>

					// %<profile>.<key>.<subKey> ... <subKey>=<value>

					// http
						// Set Quarkus to use http 2 or not:
						// Tip: Use curl to check if a Service supports HTTP 2.
						quarkus.http.http2=false // default true

		Syntax:
			// Basic Class Bean:
				@<scope-annotation>
				class <bean-name> {
					// Note: Try to avoid injection into a Private Variable as this will require CDI to use Reflection internally, resulting in less performance.
					@Inject
					lateinit var <injected-bean>: <bean-type>

					// ...
				}

				<scope-annotation>
					@ApplicationScoped: A Single Bean Instance is lazily created for the duration of the Application and shared amongst all Injection Points. Creation occurs whenever a method of the Bean is invoked.
					@Singleton: A Single Bean Instance is eagerly created for the duration of the Application and shared amongst all Injection Points. Note: These cannot be mocked by QuarkusMock during Testing.
					@Dependent: A Bean Instance is created for each Injection Point separately; no sharing occurs between Injection Points. It lasts as long as the owning Bean Instance lasts.
					@RequestScoped: A Bean Instance is created for the current Request.

			// Class Bean with Constructor Injection:
				@<scope-annotation>
				class <bean-name> @Inject constructor (
					private val <injectable-bean-variable>: <injectable-bean-type>
					// ...
				) {
					// ...
				}

			// Class Bean with Initializer Methods:
				@<scope-annotation>
				class <bean-name> {
					lateinit var <bean-ref>: <bean-type>

					@Inject
					fun <initializer-name>( <bean>: <bean-type>, ... ) {
						<bean-ref> = <bean>
						// ...
					}

					// ...
				}

			// Qualifiers:
				@Qualifier
				@Retention(RUNTIME)
				@Target({METHOD, FIELD, PARAMETER, TYPE})
				annotation class <qualifier-name>

				// Qualified Bean: Can only be used at Injection Points with the same Qualifier.
					@<qualifier-name>
					@<scope-annotation>
					class <bean-name> {
						// ...
					}

				// ... 

				// Usage:
					@<scope-annotation>
					class <another-bean-name> {
						@<qualifier-name>
						@Inject
						lateinit var <bean-ref>: <bean-name>

						// ...
					}

			// Interceptors:
				@InterceptorBinding
				@Retention(AnnotationRetention.RUNTIME)
				@Target({TYPE, METHOD, CONSTRUCTOR}) 
				[@Inherited]
				annotation class <interceptor-name>

				// Implementation:
					@<interceptor-name>
					// Note: <number> denotes the order in which the Interceptor will run w.r.t the chain. Lower = Higher Priority.
					@Priority(<number>)
					@Interceptor
					class <interceptor-class-name> {
						@Inject
						lateinit var <depedency>: <type>

						// ...

						// Denotes a method that imposes on the Target's Method Invocation.
						@AroundInvoke
						fun <interceptor-method-name>(context: InvocationContext): Object {
							// Logic before next Interceptor / Target Invocation

							val ret = context.proceed()

							// Logic after next Interceptor / Target Invocation

							return ret
						}
					}

				// Usage:
					@<interceptor-name>
					@<scope-annotation>
					class <bean-name> {
						fun <method-name>() {
							// Will trigger <interceptor-method-name> when <method-name> is invoked.
						}
					}

			// Decorators:
				interface <interface-bean-name> {
					fun <bean-method>( ... )
				}

				// Note: <number> denotes the order in which the Decorator will run w.r.t the chain. Lower = Higher Priority.
				@Priority(<number>)
				@Decorator
				class <decorated-bean-name>: <interface-bean-name> {
					@Inject
					lateinit var <dependency>: <type>

					@Inject
					@Any
					@Delegate
					private val <delegate-bean>: <interface-bean-name>

					override fun <bean-method>( ... ) {
						<delegate-bean>.<bean-method>( ... )
						
						// ...
					}
				}

			// Events: Enables Communication between two or more Beans.
				class <event-name> ( ... ) {
					// ...
				}

				@<scope-annotation>
				class <bean-name> {
					@Inject
					lateinit var <event-driver>: Event<<event-name>>

					fun <method-name>() {
						// ...

						<event-driver>.fire(<event-name>( ... ))

						// ...
					}
				}
				
				// ...

				@<scope-annotation>
				class <observing-bean-name> {
					fun <observing-method-name>(
						@Observes <event-ref>: <event-name>
					) {
						// Executes when <method-name> fires the <event-name> Event.
					}
				}

		Non-Default Dependencies:
			io.quarkus:quarkus-smallrye-health: Dependency that adds Liveness and Readiness Endpoints for a Quarkus Application.
				/q/health/started: If the Application has started.

				/q/health/live: If the Application is up and running; if this returns false the Application would be restarted by the Cloud Platform.

				/q/health/ready: If the Application is ready to serve Requests.
					// Example Readiness Check:
						// If using the quarkus-rest-client Dependency, define a Function to get the Health of the external Service on the Client Class.
						@ApplicationScoped
						@Readiness
						class <custom-healthcheck>: HealthCheck {
							@Inject
							@RestClient
							lateinit var <service-name>: <client-name>

							override fun call(): HealthCheckResponse {
								val healthCheckResponseBuilder = HealthCheckResponse.named("<service-name>")

								try {
									val response = <service-name>.<get-health-function>()
									healthCheckResponseBuilder.up().withData("success", response)
								} catch (e: Exception) {
									healthCheckResponseBuilder.down().withData("error", e.stackTraceToString())
								}

								return healthCheckResponseBuilder.build()
							}
						}

			io.quarkus:quarkus-rest-client: Dependency that adds support for querying other Services via Java's HTTP Client or Apache HttpClient.
			io.quarkus:quarkus-rest-client-jackson: Dependency that adds jackson Processing Support for the above.
				// application.properties
					// Set the Rest Client that is registered under "<config-key>" to use Mutual TLS when communicating to other Service.
						// Key Store Properties: Determines Cert to submit to other Service for verification.
							quarkus.rest-client."<config-key>".key-store
							quarkus.rest-client."<config-key>".key-store-password

						// Trust Store Properties: Determines Cert used to verify Cert received from other Service.
							quarkus.rest-client."<config-key>".trust-store
							quarkus.rest-client."<config-key>".trust-store-password
							// OR
							// Note: This will affect all Rest Clients.
							quarkus.tls.trust-all=true

						// Hostname Verifier Properties
							quarkus.rest-client."<config-key>".hostname-verifier=<class-name>
							// OR
							quarkus.rest-client."<config-key>".hostname-verifier=io.quarkus.restclient.NoopHostnameVerifier
							// OR
							quarkus.rest-client."<config-key>".verify-host=false

					// Set the Rest Client that is registered under "<config-key>" to query this URL to communicate with the other Service.
					quarkus.rest-client."<config-key>".url

				// Example Client:
					// Note: Use javax.* Annotations here as they can accommodate for different JAX-RS implementations.
					// Note: Use org.eclipse.microprofile.rest.* Annotations here.

					// Interceptor: Use a Client Interceptor to intercept a Request before it is sent to the external Service Endpoint, and a Response before it is returned to our Application.
						// Declare a custom Interceptor NameBinding Annotation to enforce that an Interceptor should only be used on Clients / Client Methods annotated with @<interceptor-name-binding>.
						// Note: Without this, the Interceptor would by default act on all Clients in the Application.
						@NameBinding
						@Retention(AnnotationRetention.RUNTIME)
						annotation class <interceptor-name-binding>

						@<interceptor-name-binding>
						class <interceptor-name>: ClientRequestFilter, ClientResponseFilter {
							// ...
						}

					// Client
						@ApplicationScoped
						@RegisterRestClient(configKey = "<config-key>")
						@<interceptor-name-binding>
						interface <client-name> {
							// Specify an external Service Endpoint that is callable by the Application.
							@<uppercase-http-verb>
							@Path("/<value>/{<path-param>}/...")
							@Produces(MediaType.<media-type>)
							fun <fun-name>(
								// Tip: The arguments defined in a Client's Function allow our Application to augment the HTTP Request made to the external Service when calling this Function.
								@PathParam("<path-param>") <path-param-variable>: <path-param-type>,
								@QueryParam("<query-param>") <query-param-variable>: <query-param-type>,

								// Set HTTP Request Headers when the Request is made to the external Service.
								@HeaderParam("<http-header>") <http-header-variable>: <http-header-variable-type>,

								// ...

								payload: JsonNode
							): <service-return-type>

							// ...
						}

			io.quarkus:quarkus-rest-client-reactive: Reactive variant of quarkus-rest-client implemented via Eclipse Vert.x's Web Client.
			io.quarkus:quarkus-rest-client-reactive-jackson: Reactive variant of quarkus-rest-client-jackson.
				// application.properties
					// Enable Logging for Client Requests and Responses:
					quarkus.rest-client.logging.scope=request-response
					quarkus.rest-client.logging.body-limit=50 // Default: 100
					quarkus.log.category."org.jboss.restwasy.reactive.client.logging".level=DEBUG

				// Differences v.s. non-Reactive variants:
					// Setting the url for Rest Clients is necessary during Testing (just set it to a dummy value in the Test Configuration Profile).

			io.quarkus:quarkus-resteasy: Dependency that adds support for exposing RESTful APIs via Servlet Containers such as Apache Tomcat and Jetty.
			io.quarkus:quarkus-resteasy-jackson: Dependency that adds jackson Processing Support for the above.
				// application.properties
					// Set Application to use SSL / HTTPs when communicating with Clients.
					// Note: Port will change to 8443 if used.
					quarkus.http.ssl.certificate.key-store-file
					quarkus.http.ssl.certificate.key-store-password

				// Example Resource:
					// Note: Use javax.* Annotations here as they can accommodate for different JAX-RS implementations.
						// Note: Switch to jakarta.* Annotations for Quarkus 3.0 and above.
					// Note: Use org.eclipse.microprofile.rest.* Annotations here.

					private const val RESOURCE_PATH = "/<value>"
					val RESOURCE_PATH_REGEX = "$RESOURCE_PATH/.*".toRegex()

					// Interceptor: Use an Interceptor to intercept a Request before it reaches a Resource Endpoint, or a Response before it gets sent back to the User-Agent.
						// Declare a custom Interceptor NameBinding Annotation to enforce that an Interceptor should only be used on Resources / Resource Methods annotated with @<interceptor-name-binding>.
						// Note: Without this, the Interceptor would by default act on all Resources in the Application.
						@NameBinding
						@Retention(AnnotationRetention.RUNTIME)
						annotation class <interceptor-name-binding>

						@<interceptor-name-binding>
						// Register the Interceptor with the JAX-RS Runtime.
						@Provider
						class <interceptor-name>(
							@RestClient var <service-name>: <client-name>,
							// ...
						): ContainerRequestFilter, ContainerResponseFilter {
							// Alternative to setting the Rest Client in the Constructor:
							@Inject
							@RestClient
							lateinit var <service-name>: <client-name>

							// Request Interceptor: Intercept Requests before they are passed to the Resource Endpoint.
							override fun filter(requestContext: ContainerRequestContext?) {
								// Cookie Upsert Example
									// Get Cookie Value
									val <cookie-value> = requestContext?.cookies?.get("<cookie-key>")

									if (<cookie-value> == null || <cookie-value>.value.isNullOrEmpty()) {
										// Create a new Cookie on the fly
										val newCookie = NewCookie(
											"<cookie-key>",
											<cookie-value>,
											<cookie-applicability-path>,
											<cookie-applicability-domain>,
											<comment>,
											<max-age>,
											<secure>
										)

										// Add to the Request Header so that Resource Endpoints will receive the Cookie Value
										requestContext?.headers?.add(HttpHeaders.COOKIE, newCookie.toString())

										// Store the new Cookie on the Request, to be used in the later Response Interceptor
										requestContext?.setProperty("<cookie-key>", newCookie)
									}
								
								// Call a Service via the Client defined for it:
								// <service-name>.<fun-name>( ... )

								// ...

								// ...
							}

							// Response Interceptor: Intercept Responses before they are passed to the User-Agent.
							override fun filter(requestContext: ContainerRequestContext, responseContext: ContainterResponseContext) {
								// Cookie Upsert Example
									// Retrieve the Cookie created in the Request Interceptor
									val newCookie = requestContext?.getProperty("<cookie-key>")

									if (newCookie != null) {
										requestContext?.headers?.add(HttpHeaders.SET_COOKIE, newCookie.toString())
									}

								// Call a Service via the Client defined for it:
								// <service-name>.<fun-name>( ... )

								// ...

								// ...
							}
						}

					// Resource:
						@<interceptor-name-binding>
						@Path(RESOURCE_PATH)
						class <resource-name>(
							@RestClient var <service-name>: <client-name>,
							// ...
						) {
							// Alternative to setting the Rest Client in the Constructor:
							@Inject
							@RestClient
							lateinit var <service-name>: <client-name>

							@<uppercase-http-verb>
							@Path("/<value>/{<path-param>}/...")
							@Produces(MediaType.<media-type>)
							fun <fun-name>(
								// Tip: The arguments defined in a Resource's Function allow the Framework to feed in the associated values in the Client's Request to our Function to be read.
								@PathParam("<path-param>") <path-param-variable>: <path-param-type>,
								@QueryParam("<query-param>") <query-param-variable>: <query-param-type>,

								// Receive HTTP Request Headers when the Request is marshalled here.
								@HeaderParam("<http-header>") <http-header-variable>: <http-header-variable-type>,

								// Read Cookies attached to the HTTP Request by the User-Agent.
								@CookieParam("<cookie-key>") <cookie-value-variable>: <cookie-value-type>,

								// ...

								payload: JsonNode
							): Response {
								// ...

								return Response
									.ok(
										<response-body>,
										MediaType.<media-type>
									)
									// if needed
									.cookie(
										<cookie>
									)
									.build()
							}
						}

			io.quarkus:quarkus-resteasy-reactive: Reactive variant of quarkus-resteasy implemented via Eclipse Vert.x.
			io.quarkus:quarkus-resteasy-reactive-jackson: Reactive variant of quarkus-resteasy-jackson.
				// Differences v.s. non-Reactive variants:
					// Exception Mappers: Use @ServerExceptionMapper Annotations.
						class GlobalExceptionMapper {
							@ServerExceptionMapper
							fun mapException(e: WebApplicationException): Response? {
								return e.response
							}

							// ... other @ServerExceptionMapper(s) here handling different types of Exceptions ...
						}

						// OR

						class <resource-name>(
							// ... 
						) {
							// 
							@ServiceExceptionMapper
							fun mapException(e: WebApplicationException): Response? {
								return e.response
							}

							// ... other @ServerExceptionMapper(s) here handling different types of Exceptions ...
						}

					// Interceptors: Use @ServerRequestFilter and @ServerResponseFilter Annotations instead of implementing ContainerRequestFilter and ContainerResponseFilter.
						// ...

						@ApplicationScoped
						// Register the Interceptor with the JAX-RS Runtime.
						@Provider
						class <interceptor-name>(
							@RestClient var <service-name>: <client-name>,
							// ...
						) {
							// Note: No need for @Inject.
							// Alternative to setting the Rest Client in the Constructor:
							@RestClient
							lateinit var <service-name>: <client-name>

							// Request Interceptor: Intercept Requests before they are passed to the Resource Endpoint.
							// Note: Parameter List can be populated with more Arguments than just requestContext; check Documentation for details.
							@<interceptor-name-binding>
							@ServerRequestFilter
							fun filterRequest(requestContext: ContainerRequestContext?) {
								// ...
							}

							// Response Interceptor: Intercept Responses before they are passed to the User-Agent.
							// Note: Parameter List can be populated with more Arguments than just requestContext and responseContext; check Documentation for details.
							@<interceptor-name-binding>
							@ServerResponseFilter
							fun filterResponse(requestContext: ContainerRequestContext, responseContext: ContainterResponseContext) {
								// ...
							}
						}

					// Resources: Different Annotations used in Endpoint Function Params.
						// ...

						@ApplicationScoped
						@<interceptor-name-binding>
						@Path(RESOURCE_PATH)
						class <resource-name>(
							@RestClient var <service-name>: <client-name>,
							// ...
						) {
							@Inject
							lateinit var requestContext: ContainerRequestContext

							// Note: No need for @Inject.
							// Alternative to setting the Rest Client in the Constructor:
							@RestClient
							lateinit var <service-name>: <client-name>

							@<uppercase-http-verb>
							@Path("/<value>/{<path-param>}/...")
							@Produces(MediaType.<media-type>)
							fun <fun-name>(
								// Tip: The arguments defined in a Resource's Function allow the Framework to feed in the associated values in the Client's Request to our Function to be read.
								@RestPath("<path-param>") <path-param-variable>: <path-param-type>,
								@RestQuery("<query-param>") <query-param-variable>: <query-param-type>,

								// Receive HTTP Request Headers when the Request is marshalled here.
								@RestHeader("<http-header>") <http-header-variable>: <http-header-variable-type>,

								// Read Cookies attached to the HTTP Request by the User-Agent.
								@RestCookie("<cookie-key>") <cookie-value-variable>: <cookie-value-type>,

								// ...

								payload: JsonNode
							): Response {
								// ... requestContext ...

								// ...
							}

							// Sending Files to User Agent from External Service:
							@<uppercase-http-verb>
							@Path("/<value>/{<path-param>}/...")
							fun <fun-name>(
								...
							): Response {
								val serviceRes = <service-name>.<get-file>( ... ); // returns RestResponse<ByteArray>
								// Further manipulate the Response here
								val res = Response.fromResponse(serviceRes.toResponse).header( ... ).build()
								return res
							}
						}

			io.quarkus.quarkus-junit5: JUnit Testing Framework.
			io.quarkus:quarkus-junit5-mockito: Dependency that allows for Mocking during Testing via JUnit.
			org.mockito.kotlin:mockito-kotlin:4.1.0
			io.rest-assured:rest-assured: Dependency that faciliates Testing of RESTful Web Services.
				// Exmaple Test Profile Override:
					class <test-profile-override>: QuarkusTestProfile {
						override fun getConfigOverrides: MutableMap<String, String> {
							return mutableMapOf(
								"<key>" to "<value>",
								// ...
							)
						}
					}

				// Example Test Class:
					@QuarkusTest
					class <test-suite> {
						// Stub Client that is typically injected via @Inject in the Class to be tested.
						// Note: Not compatible if the Clients are passed in via Class Constructor Arguments.
						// Note: Only works with @ApplicationScoped Clients.
						@InjectMock
						@RestClient
						lateinit var <service-name>: <client-name>

						@Test
						fun `<test-name>`() {
							// Stub Client Call:
							Mockito.`when`(<service-name>.<method-name>(eq(<arg>), anyOrNull(), ...)).thenReturn(
								// Tip: Use Jackson ObjectMapper.valueToTree to convert mapOf() values to JsonNode.
								<stub-value>
							)

							// ...

							// Assert via RestAssured
							given()
								// Allow RestAssured to test Redirect Responses
									.redirects().follow(false)

								// Section to configure Test Request
									// Set <http-header> to a <http-header-value>:
									.header(<http-header>, <http-header-value>)


									// Assert Request Body Content:
									.contentType(MediaType.<content-type>)
									.body(
										// Tip: Use Jackson ObjectMapper.writeValueAsString to convert mapOf() values to JSON Content.
										// ...
									)

								.`when`().<http-verb>("<path>")
								// Section to configure Expected Response
									// Assert Response has particular Status Code:
									.statusCode(<value>)

									// Check that <http-header> is set to a <http-header-value>:
									.header(<http-header>, <http-header-value>)

									// Check that <http-header> is not set:
									.header(<http-header>, Matchers.nullValue())
									.header(<http-header>, `is`(nullValue()))

									// Assert Response Body Content:
									.body(
										// Tip: Use Jackson ObjectMapper.writeValueAsString to convert mapOf() values to JSON Content.
										`is`("<text-value>`)
									)
						}
					}

			io.mockk:mockk:1.13.4

			io.quarkiverse.quinoa:quarkus-quinoa:1.2.9: Dependency for integrating a Web UI with a Quarkus Server.
				// Note: SPA Routing incompatible with non-Reactive quarkus-rest-client and quarkus-resteasy Dependencies; use quarkus-rest-client-reactive and quarkus-resteasy-reactive instead.

			io.quarkus:quarkus-vertx: Utility used to build Reactive Applications on the JVM.
				// Note: Can be used in tandem with rest-client-reactive, but the Client's Methods have to return a Reactive Type (i.e. Uni, Multi)
					import io.vertx.core.json.JsonObject
					import io.ext.vertx.web.*

					class RouterInitializer(
						// ...
					) {
						@Inject
						@RestClient
						lateinit var <service-name>: <client-name>

						fun init(
							@Observes router: Router
						) {
							// Tip: <order> determines the order in which multiple Handlers will be executed in, if they are all attached in the same manner.
							// Note: Runtime Ordering (normal functions) takes precedence over Deployment Ordering (functions annotated with @BuildStep).

							// Capture all Requests with a given Handler:
							router.route()[.order(<order>)].hander {
								// Query via rest-client-reactive
								// Note: <method-name> has to return a Reactive Type (i.e. Uni, Multi).
								// Tip: Uni is analogous to Javascript's Promise.
								<service-name>.<method-name>( ... ).subscribe().with(
									{
										item -> 
											// ...
									},
									{
										failure ->
											// ...
									}
								)

								// Create a JsonObject
								val jsonObject = JsonObject()
								jsonObject.put("<key>", "<value>")

								// Prematurely terminate the execution, and return a Response to the Client.
								it.response()
									.setStatusCode( ... )
									.putHeader( ..., ... )
									.addCookie( Cookie.cookie(<cookie>, <value>) )
									.end(jsonObject.encode())

								// OR

								// Pass execution over to the next RoutingHandler.
								// Tip: The Request and Response can be edited before passing execution over.
								it.next()
							}

							// OR

							// Capture all Requests of a certain <http-verb> Request Type and for a given <url> with a given Handler:
							router[.<http-verb>()].route(["<url>"])[.order(<order>)].handler {
								// ...
							}
						}
					}

		Syntax:
			// Getting Configuration Properties via MicroProfile Config Annotations:
				@ConfigProperty(
					name = "<key>.<subkey> ... <subkey>",

					// If defaultValue is not set, the Annotation will throw a Runtime Exception.
					defaultValue = <value>
				) val <runtime-constant-name>: <type>

			// Quarkus Tests
				@QuarkusTest
				class <test-suite> {
					@Test
					fun `<test-name>`() {

					}

					// ...
				}

	Commands:
		# Quarkus CLI
			quarkus create

		# Gradle Wrapper
			# Start a Local Development Server with Hot Reload capabilities for the Quarkus Application.
			gradlew quarkusDev

			# Clear the Build Directory. Useful to run just before a Build.
			gradlew clean

			# Compile and Build the Quarkus Application into a .jar File.
			gradlew build

			# Compile and Build the Quarkus Application into an uber-jar File.
			gradlew build "-Dquarkus.package.type=uber-jar"

		# Java
			# Run the built jar with a defined Configuration Profile:
			java -Dquarkus.profile=<profile> -jar <name>.jar
				java -D<quarkus-application-property>=<value> ... -jar <name>.jar

			# Preview jar Directory Structure and Files
			jar tf <name>.jar

