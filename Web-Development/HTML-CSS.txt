HTML: Defines the structure of the Web Document. It specifies both the content, and the rendering instructions for a Browser.

General HTML Structure:
	A HTML Element is represented by 1 or 2 HTML Tags.
	
	Any Element can have an ID Attribute associated to them - but only one Element in the HTML Document can have the specific ID.

	Any Element can have one or more Class Attributes associated to them - no restrictions.

HTML Tags / Elements:
	<!-- Comment --> - A Comment Tag.

	<!DOCTYPE html> - A Tag which declares that the content below it is HTML.

	<html> ... </html> - Tags which specify the start and end of the HTML content respectively.
		lang="en-US" - Attribute which specify language of the page. Important for coding with Bootstrap.

	<script src="js/main.js"> </script> - Defines a scripting envrionment where JS functionality from the main.js file can be executed.
		CDN - Can reference JS Script libraries from Content Delivery Network - no need to download and reference.
		
		<script async="async" src="js/main.js"> </script> - Same as above, but this isn't a blocking JS runtime environment.
		<script defer="defer" src="js/main.js"> </script> - Blocks the execution of the specified JS until the HTML page has fully loaded.
		
		If the src Tag is non-empty, there cannot be anything between the script Tags.
		
		<script src="jslib/require.js" data-main="main.js"> </script> - Loads the require.js module loader, which then synchronously initializes / runs the main.js file.

	<head> ... </head> - Tags which specify the start and end of the metadata related to the HTML content respectively.

	<title> Put Title Here </title> - Tags which specify Title of Webpage.

	<meta charset="utf-8" /> - Specify encoding.

	<style type="text/css"> ... </style> - Define an environment to specify CSS with.

	<link href="main.css" rel="stylesheet" type="text/css" /> - Defines a link to a CSS Type Document.
		CDN - Can reference CSS Style libraries from Content Delivery Network - no need to download and reference.
		
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons">

	<body> ... </body> - Tags which specify the start and end of the actual HTML content respectively.

	<a href="http://www.google.com"> Click Me! </a> - Anchor Element. Tags which denote a clickable link to the website specified in the href parameter of the tag.
		<a href="#elementid"> Link </a> - Can be used to jump to Elements with the specified id within the same webpage as well.

	<p> ... </p> - Tags which denote a paragraph.

	<{h1|h2|h3|h4|h5|h6}> Header Content </{h1|h2|h3|h4|h5|h6}> - Tags which denote a Header. Used by Search Engines to index Webpages.

	<b> ... </b> or <strong> ... </strong> - Tags which specify bolded content.

	<i> ... </i> or <em> ... </em> - Tags which specify italicized content.

	<div> ... </div> - Tags which is used to group Block Elements in a document. 

	<span> ... </span> - Tags which is used to group Inline Elements or Inline-Block Elements in a document. Cannot contain Block Elements within it.

	<ul> <li> Unordered List Item 1 </li> <li> Unordered List Item 2 </li> </ul> - Tags used in specifying an unordered list.

	<ol> <li> Ordered List Item 1 </li> <li> Ordered List Item 2 </li> </ol> - Tags used in specifying an ordered list.

	<table> <tr> <th> Table Header 1 </th> <th> Table Header 2 </th> </tr> <tr> <td> Item 1 Value 1 </td> <td> Item 1 Value 2 </td> </tr> </table>
		style="width:100%"
		colspan / rowspan

	<img src="example.jpg" height="256" width="256" /> - Image Tag. 
		alt="example.jpg" - Shows alternate text when the image cannot be displayed.
		
	<canvas id="myCanvas" width="256" height="256"></canvas> - A tag that allows drawing of graphics via Javascript. 
		Note: Need to set id Attribute so that can reference within JS.

	<template> ... </template> - A Tag that holds HTML but does not render it at the start. Use Javascript to conditionally show it.
	
CSS: Decorates Webpages. 
	Forms: 
		/* General Form */
			<css-selector> { 
				<rule>: <value>; 
			}

			/* id */
			#id {}
			
			/* class */
			.class {}
			
			/* media conditional - apply css only if conditional is satisfied */
			@media all and (conditional) {
				// css here
			}

		/* Selector Forms */
			/* To select for HTML Elements, but only under a certain condition. */
			selector1:pseudo-class ... {}

			/* To introduce new HTML Elements not specified in the Document Markup. */
			selector1::pseudo-element ... {}
			
			/* To select for HTML Elements are either selector1 OR selector2. */
			selector1,selector2 ... {}

			/* To select for HTML Elements that satisfy both selector1 AND selector2. */
			selector1selector2 ... {}

			/* To select an immediate selector2 HTML Element that follows after a sibling selector1 HTML Element. */
			selector1+selector2 ... {}

			/* To select any selector2 HTML Element that follows after a sibling selector1 HTML Element. */
			selector1~selector2 ... {}

			/* To select only direct selector2 HTML Elements contained within a selector1 HTML Element. */
			selector1>selector2 ... {}

			/* To select all selector2 HTML Elements contained within a selector1 HTML Element. */
			selector1 selector2 ... {}

	Types:
		Inline CSS - CSS defined with the style attribute of the HTML Element. Performance friendly.
		Internal CSS - CSS defined with the <style> </style> tags. Performance friendly.
		External CSS - CSS defined in an external file, referenced by the current file through the <link> tag. Less Performance friendly.

	CSS Reset - Removes all CSS that a browser automatically adds - make design consistent amongst different browsers, which may have their own implicit styling for certain Elements.
	
	Unit Specification:
		x vw, y vh - Relatively scale Element by x% of the viewport width and y% of the viewport height.
		em - Specify scale according to Element size.
	
	Spacing Properties: 
		Specification Order: Top Right Bottom Left.
		
		Box Model:
			Margin: Outer Separation from other neighbouring Elements.
			Border: A border around the Element.
			Padding: Inner Separation between the Content and the Border of the Element.
			Content: Element Children.
		
	Arrangement Properties: 
		position: Specify how the Element is to interpret its Positional Properties.
			static: 
				Default.
				Adheres to Document Flow.
				Ignores Top, Bottom, Left, Right, and z-index settings.
			relative:
				Adheres to Document Flow.
				Interprets Top, Bottom, Left, Right, and z-index settings with respect to position derived from Document Flow.
			absolute:
				Adheres to Document Flow.
				Interprets Top, Bottom, Left, Right, and z-index settings with respect to position derived from closest Ancestor Element with non-static positioning, or <body> </body> if there is none.
			fixed:
				Ignores Document Flow.
				Interprets Top, Bottom, Left, Right and z-index settings with respect to the Browser Viewport.
			sticky:
				Whilst the position derived from Document Flow is in Browser Viewport: follows the 'relative' positioning.
				Whilst the position derived from Document Flow is outside Browser Viewport: follows the 'fixed' positioning.
				Interprets Top, Bottom, Left, Right, and z-index settings when 'fixed' positioning is active.

		display: Specify if the Element is block or inline, and the layout of Child Elements.
			Element Display:
				block:
					Normally takes up the whole Width of the Parent Container.
					Force a Line Break after the block Element regardless of Width; Elements are laid out vertically one after the other.
					Default Element: <div> </div>

				inline:
					Respect Left & Right Margins and Padding, but not Top & Bottom.
					Cannot have a Width and Height set - fully accommodates Children.
					Allow other Elements to sit to their Left and Right if their total Width can fit into the Parent Container ; Elements are laid out horizontally one after the other.
					Default Element: <span> </span>
				
				inline-block:
					Respect Top & Bottom Margins and Padding.
					Respect Width and Height.
					Allow other Elements to sit to their Left and Right if their total Width can fit into the Parent Container ; Elements are laid out horizontally one after the other.

			Children Element Display:
				flex / inline-flex: 
					One Dimensional Layout Model which allows the assigned Container to determine Children proportions for the best utilization of available space.
					The Main Axis is the direction in which Children are placed along, whilst the Cross Axis is perpendicular to it.
						The size of Children corresponding to the Main Axis will be overriden by flex behaviour.
						The size of Children corresponding to the Cross Axis will be honored by the Parent.

					Children Margins (and directional variants) will automatically expand to consume available space if set to auto.

					/* Container-Defined Rules */
						/* Determine Main Axis (and implicitly, Cross Axis). */
						flex-direction: <'row' | 'column' | 'row-reverse' | 'column-reverse'>

						/* Determine Children Layout Behaviour / Proportion along Main Axis. */
						justify-content: <'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-evenly'>

						/* Determine Children Behaviour / Proportion along Cross Axis. */
						align-items: <'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline'>

						/* Determine Children Wrapping Behaviour along Main Axis. */
						/* Main Axis will wrap to another 'line' if set to wrap, potentially causing Overflow along the Cross Axis if there's not enough space. */
						flex-wrap: <'nowrap' | 'wrap' | 'wrap-reverse'>

						/* Determine how space between multiple 'lines' of the Main Axis is distributed among the Cross Axis. */
						align-content: <'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-evenly'>

					/* Children-Defined Rules */
						/* Determine Child's order of appearance w.r.t Main Axis. */
						order: <number>;

						/* Determine ideal size of Child before taking into account flex behaviour. */
						/* Note: There is an existing bug on all major browsers that causes a nested flex Parent to not account for Children flex-basis specifications, causing unneccessary wrapping or overflow along its Main Axis. Specify Children width / height instead to correct it, which functions similarly to flex-basis in the context of a flex Parent. */
						flex-basis: <size>;

						/* Determine capability for Child to grow to consume free space <number>-times proportionally w.r.t other Siblings along the Main Axis. */
						flex-grow: <number>;

						/* Determine capability for Child to shrink to fit into space <number>-times proportionally w.r.t other Siblings along the Main Axis. */
						flex-shrink: <number>;

	Extensions: Usually a Preprocessor Style Sheet Language that adds programmatic features to CSS.
		SASS: Syntactically Awesome Style Sheets.
			SCSS: Sassy CSS - a different form of SASS with the added advantage of being immediately compatible with regular CSS.

		LESS: Leaner Style Sheets.
	
