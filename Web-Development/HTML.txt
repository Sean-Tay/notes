HTML:
	Abbreviations:
		HTML: 					HyperText Markup Language.
	
	Description:				Defines the structure of the Web Document. It specifies both the content, and the rendering instructions for a Browser.
	
	Resources:
		
	
	Concepts:
		HTML Flushing:			Instead of sending the entire HTML Document to the Browser at once, the critical part of the HTML Document that contains Above-the-Fold Content can be sent first via a smaller but faster Network Response, and secondary HTML containing Below-the-Fold Content can be deferred to later Network Responses.
			Modern Browsers are able to "build up" the HTML Document that arrives with subsequent Network Reponses.

		DOM Node: 				A Node within the DOM Tree.
		DOM Element:			A subset of DOM Nodes; only those that can be specified with a HTML Tag (within the html DOM Node).
	
	Details:
		General HTML Structure:
			A HTML Element is represented by 1 or 2 HTML Tags.
			
			Any Element can have an ID Attribute associated to them - but only one Element in the HTML Document can have the specific ID.

			Any Element can have one or more Class Attributes associated to them - no restrictions.

		HTML Tags / Elements:
			<!-- Comment --> - A Comment Tag.

			<!DOCTYPE html> - A Tag that declares that there is HTML Content below.

			<html> ... </html> - Tags that specify the start and end of the HTML Content respectively.
				lang="en-US" - Attribute that specifies language of the Webpage.

			<script> ... </script> - Tags that specify a scripting environment where JS functionality can be executed.
				<script src="js/main.js"> </script> - Downloads and Executes JS specified in another File. Blocks further HTML Parsing until JS Process is completed.
					async - Allows HTML Parsing and JS Downloading to happen concurrently. Blocks further HTML Parsing until JS Execution completes.
					defer - Allows HTML Parsing and JS Downloading to happen concurrently. Blocks JS Execution until HTML Parsing is complete.

					type="module" - Similar to defer, except allows downloading of JS ES Module Dependencies at the same time (interprets JS in 'strict' Mode).
						async - Similar to async, except allows downloading of JS ES Module Dependencies at the same time.

						nomodule - Runs the included Script in case a sibling Script Tag with type="module" is unable to be processed.

						importmap - Defines an Import Map between Package Names and Package URLs, such that JS ES Modules need only reference the Package Name for Imports.
				
				<script src="jslib/require.js" data-main="main.js"> </script> - Loads the require.js module loader, which then synchronously initializes / runs the JS File.

			<template> ... </template> - Tags that contain additional HTML Content but does not render it at the start. Use JS to conditionally show it.

			<head> ... </head> - Tags that specify the start and end of metadata related to the HTML Content.
				<title> Title Content </title> - Tags that specify the Title of the Webpage.

				<meta charset="utf-8" /> - Tag that specify Webpage encoding.

				<meta http-equiv="..." content="..."> - Tag to simulate a HTTP Response Header (specified by the http-equiv attribute) with the associated value (specified by the content attribute).

				<style type="text/css"> ... </style> - Tags that specify an environment to define Internal CSS with.

				<link type="text/css" rel="stylesheet" href="main.css" /> - Reference CSS from an External CSS File.
					CDN - Can reference CSS Style libraries from the Content Delivery Network - no need to download and reference.

				<link type="<mime-resource-type>" rel="preload" href="<resource-url>" as="<fetch-spec-resource-type>" /> - Indicates to the Browser that this Resource should be loaded ASAP (via the rel="preload" specification).
					CSS:
						<link type="text/css" rel="preload" href="main.css" as="style" /> 

			<body> ... </body> - Tags that specify the start and end of the actual HTML Content.
				<iframe src="" srcdoc="<html_code>" > ... </iframe> - Tags used to represent an Inline Section to show another HTML Document.

				<span> ... </span> - Tags that are usually used to group Inline Elements or Inline-Block Elements together with. Cannot contain Block Elements within it.

				<div> ... </div> - Tags that are usually used to group other Block Elements together with. 

				<{h1|h2|h3|h4|h5|h6}> Header Content </{h1|h2|h3|h4|h5|h6}> - Tags that specify a Header. Used by Search Engines to index Webpages.

				<a href="http://www.google.com"> Click Me! </a> - Anchor Tags that specify a clickable link to a URL specified via the href parameter of the Tag.
					<a href="#elementid"> Link </a> - Can be used to jump to Elements with the specified id within the same Webpage as well.

					HTML Anchor Elements can be set to use the ‘javascript’ pseudo protocol within the href specified URI to avoid redirection when clicked.
						<a href="javascript:;"> Link </a> - Still clickable, but does nothing.

				<p> ... </p> - Tags that specify a Paragraph.

				<b> ... </b> or <strong> ... </strong> - Tags that specify Bolded Content.

				<i> ... </i> or <em> ... </em> - Tags that specify Italicized Content.

				<ul> - Tags that specify an Unordered List.
					<li> Item 1 </li> 
					...
				</ul>

				<ol> - Tags that specify an Ordered List.
					<li> Item 1 </li> 
					... 
				</ol> 

				<table> - Tags that specify Tabular Content.
					<tr> 
						<th> Column Header 1 </th> 
						...
					</tr> 
					<tr> 
						<td> Row 1 Column 1 </td> 
						... 
					</tr> 
					...
				</table>

				<img src="example.jpg" height="256" width="256" /> - Image Tag. 
					alt="example.jpg" - Shows alternate text when the Image cannot be displayed.
					
				<canvas id="myCanvas" width="256" height="256"> </canvas> - A Tag that allows drawing of graphics via JS. 
					Tip: Should set id Attribute for easier reference within JS.

				<form onsubmit="handler()" action="/handler.js"> - Tags that specify an Input Form.
					<label for="form-input-id-1" > 
						... 
						<input id="form-input-id-1" name="form-field-1" type="{text | radio | file | ...}" /> 
					</label>
					<br />

					...

					<input type="button" />

					...

					<input type="reset" />

					<input type="submit" />
					<!-- OR -->
					<button> ... </button>
				</form>

		DOM Selectors:
			<!-- To select for DOM Elements are either selector1 OR selector2. -->
			selector1,selector2 ...

			<!-- To select for DOM Elements that satisfy both selector1 AND selector2. -->
			selector1selector2 ...

			<!-- To select an immediate selector2 DOM Element that follows after a sibling selector1 DOM Element. -->
			selector1+selector2 ...

			<!-- To select any selector2 DOM Element that follows after a sibling selector1 DOM Element. -->
			selector1~selector2 ...

			<!-- To select only direct selector2 DOM Elements contained within a selector1 DOM Element. -->
			selector1>selector2 ...

			<!-- To select all selector2 DOM Elements contained within a selector1 DOM Element. -->
			selector1 selector2 ...

			<!-- Attribute Selectors -->
				<!-- Tip: selector1 is not necessary. -->

				<!-- To select selector1 DOM Elements with a specific attribute. -->
				selector1[<attribute>] ...

				<!-- To select selector1 DOM Elements with a specific attribute and value for that attribute. -->
				selector1[<attribute>="<value>"] ...

				<!-- To select selector1 DOM Elements with a specific attribute whose value is a whitespaced-separated list of values, one of which is exactly <value>. -->
				<!-- Tip: Useful for class specifications -->
				selector1[<attribute>~="<value>"] ...

				<!-- To select selector1 DOM Elements with a specific attribute whose value contains at least one occurance of <value>. -->
				<!-- Tip: Useful for inline styles -->
				selector1[<attribute>*="<value>"] ...

				<!-- To select selector1 DOM Elements with a specific attribute whose value starts / ends / starts and ends with <value>. -->
				selector1[<attribute>^="<value>"][<attribute>$="<value>"] ...

				<!-- Enable Case-Insensitivity during matching -->
				selector1[<attribute> ... i]

			<!-- To select for DOM Elements, but only under a certain condition. -->
			selector1:pseudo-class ...
				<!-- To select for the Last Child of selector1 DOM Element. -->
				selector1:last-child ...

				<!-- To select for the Last Type of selector1 DOM Element among siblings. -->
				selector1:last-of-type ...

			<!-- To style certain parts of selected DOM Elements. -->
			selector1::pseudo-element ...
				<!-- To select for the first letter within selector1 DOM Elements. -->
				selector1::first-letter ...

				<!-- To select for all Content in the first line within selector1 DOM Elements. -->
				selector1::first-line ...

				<!-- To select for List Markers of selector1 DOM Elements. -->
				selector1::marker ...



