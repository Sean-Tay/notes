Linux / Unix:
	Resources: 
		https://www.youtube.com/playlist?list=PLS1QulWo1RIYmaxcEqw5JhK3b-6rgdWO_
	
	Concepts: 
		Cronjob 				- A Shell Script that gets executed periodically.
	
	Details:
		Metadata:
			File Permissions: For executable jobs defined in script, need to set the eXecutable bit.
				- File Type {- | d | c | l | p | s | b | D} (1)
					- Regular Files	: -
					- Directory		: d
				
				- You (3), Group (3), Others (3)
					- Readability (0, 1), Writability (0, 1), Executability (0, 1, S for Root User Execution).

				- Intepretation:
					- Directories:
						- Readability - Allows affected User to List Files within the Directory.
						- Writability - Allows affected User to Create, Rename or Delete Files within the Directory, as well as modify the Directory Attributes.
						- Executability - Allows affected User to enter the Directory.
						- Sticky - Files or Directories within may only be Renamed or Deleted by their Owners.

		Standard IO:
			stdin				- Considered as file at /dev/stdin
			stdout				- Considered as file at /dev/stdout
				- 				- Alias to reference stdout. Useful when piping.

		Tips:
			1. Use absolute filepaths when referencing files: "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )/file"
			2. Encapsulate content of each Sourceable Script within a Function, and then call that Function at the end of the Sourceable Script.
			3. For Commands that accept <file> inputs:
				a. stdin and stdout are also considered as 'files'.
				b. '|' operator redirects LHS command stdout to RHS command stdin.
				c. Don't pipe from the ls Command - use either Glob Patterns or find.
		
	Commands:
		Note: Command arguments are always separated with spaces.
		
		: 						- Dummy Command
		
		Execution Flow: https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators
			<command1> ; <command2>	- Execute <command2> after <command1> finishes.
			<command> ... &		- Run <command> in the background.
			<command1> & <command2>	- Execute <command1> in background and <command2> in foreground.
			
			<command1> && <command2> - Execute <command2> only if <command1> exits 0 / succeeds.
			<command1> || <command2> - Execute <command2> only if <command1> exits 1 / fails.
			! <command>			- Negate the success outcome of <command>.
			
			<command1> | <command2>	- Chain <command1> stdout to <command2> stdin.
			<command1> |& <command2> - Chain <command1> stdout and stderr to <command2> stdin.
			
			( <command1> ... ) - Execute <command> in a subshell.
			$( <command1> ... ) - Command Substitution: Execute <command> in a subshell and return the output of the last executed <command> back.
			<( <command1> ... ) - Process Substitution: Execute <command> in a subshell and return the output of the last executed <command> back as a File Handle, avoiding the need to explicitly create temp Files. Note: Not supported by Pure Shell (use Bash to execute).
			
			{ <command1> ... } - Group Command: Execute <command> with the current shell.
			
			<command> < <source1> ... - Receive input from <source>.
			<command> <> <target1> ... - Receive input from <target> into <command>, and send <command> output back to <target>.
			
			<command> <stream_name> > <target1> ... - Send output in <stream_name> generated by <command> to <target>, overwriting prior content.
			<command> <stream_name> >> <target1> ... - Send output in <stream_name> generated by <command> to <target>, preserving prior content.

		Parameter Expansion: http://wiki.bash-hackers.org/syntax/pe

		Terminal Specific:
			visudo				- Allow configuration for Users to run Commands without the need to keep entering Passwords. Look for the 'wheel' Group.

			useradd <id>		- Add a new User.

			ssh-keygen			- Generate SSH Pub/Pri Key Pair for the current User.

			ssh-copy-id <target-host> - Copy the SSH Pub Key for the current User to the <target-host>, so that the User can login without the need to enter a Password.
				Alternative: cat ~/.ssh/id_rsa.pub | ssh <user>@<target-host> 'cat >> ~/.ssh/authorized_keys'

			ssh <user>@<target-host> "<command> ... " - Login from the Source Host to <target-host> as the <user> and run <command>.
				Note: If <user> is not defined the Root User is assumed.
				Note: If <command> is not defined a Persistent Connection is created and subsequent CLI Commands to the Terminal will be executed on the <target-host> instead.
					exit		- Logout of <target-host>.

			uname -a			- Show OS information.

			du <path>			- Display used Disk Space within <path>.
				-s				- Display only top-level Files and Directories.
				-h				- Display in terms of Megabytes.
			
			df 					- Display free Disk Space.
				-h				- Display in terms of Megabytes.

			top					- View all running processes.
				E				- Cycle through Size Magnitudes.

			cron				- Schedule a Task to be executed at a specific time.
			crontab	<task> 		- "Cron Table".
				-e				- Create new cronjob for current user.
				-l				- See list of existing cronjobs tied to current user.
				-r				- Remove all existing cronjobs tied to current user.
				<file>			- Overwrite all existing cronjobs for current user with the cronjobs in the <file>.

				-u <user>		- Scope command to current user.

				<task>: <m>,... <h>,... <dom>,... <mon>,... <dow>,...

				Append Job: 
					(crontab -u <user> -l ; echo "<job>") | crontab -u <user> -
					(crontab -u <user> -l ; cat <cronfile>) | crontab -u <user> -
				Remove Job: crontab -u <user> -l | grep -v "<job>" | crontab -u <user> -

				Note: Comments are not allowed to be on the same line as cronjobs.

			which <executable>	- View location of specified executable.
			
			cd <path>			- Change Present Working Directory.
				cd -			- Change Present Working Directory to the last Directory.
			
			pwd					- View path of Present Working Directory.
			
			tree 				- View structure of Present Working Directory.
				find . -print | sed -e "s;[^/]*/;|____;g;s;____|; |;g" - Alternative to above.
				
			chmod <permissions> <file> - Change <file> permissions.
				-R				- Apply <permissions> recursively to contents within directory <file>.

			chown <user>:<group> <file> - Change <file>'s ownership.
				-R				- Apply ownership recursively to contents within directory <file>.

			clear				- Clear accumulated output produced by previous commands from the current view.

		General:
			getconf ARG_MAX		- Obtain maximum length of argument to the exec functions, including environment data.
				- Shell built-in commands are executed by shell, which means the shell doesn't use exec() family of functions and therefore aren't affected by ARG_MAX variable.
					- for ; while
					- echo
					- printf
				- Certain external commands, such as xargs and find are aware of ARG_MAX variable and repeatedly perform actions under that limit.

			xargs <command>		- Reads in stdin and converts the content into arguments for the succeeding <command>.
				-I <placeholder> - Allows usage of stdin at specific parts inside <command> via <placeholder>.
				-n<number> 		- Limit the number of arguments 

				-r 				- Prevent execution if stdin is empty.

			ps					- Get snapshot of User's current processes.
				-e 				- Get snapshot of all processes.

				axo <field>		- Get only part of the information.
			
			pgrep "<pattern>"	- Get PIDs whose process information matches <pattern>.
				-f				- Use all of the process information, rather than just the process name.
				
				pgrep -f "<pattern>" | xargs -n1 -I PID readlink -f /proc/PID/exe - Get Executable of PIDs whose process information matches <pattern>.
			
			find <filepath>	-name "<pattern>" 2> /dev/null - Find files in <filepath> that match a certain <pattern>, excluding quotes.
				-mtime	<n>		- Check for files that are older than <n>*24 hours.
				
				-prune			- Do not traverse into directories.
			
			ls ...				- List files and directories in Present Working Directory.
				-l 				- List all files with their permissions.
				-a				- List all files, including hidden files.
				-r				- List all files in reverse lexicographic order.
				-t 				- List files sorted according to date ; newest to oldest.
				-h				- List files alongside their disk occupancy in terms of greater orders of magnitude.

				-R 				- List files within sub-Directories recursively.
				-o				- Like -a, but without group permissions.

			touch <file>		- Create <file> or edit <file> metadata.
				-a 				- accessed
				-m 				- modified
				-t 				- timestamp - use [[CC]YY]MMDDhhmm[.ss] time format
			
			cat <file>			- Concatenate <file> and print on stdout. If <file> is empty, stdin.
				- Replace with $(< <file>) for better performance.
			
			sort <file>			- Sort content from <file>.
				-f				- Ignore case.
				-f				- Ignore non-printable characters.

				-u				- Only print unique lines.

			uniq <fileA> <fileB> - Report or Omit repeated lines from <fileA> and output to <fileB>. 
				-i 				- Ignore case.
				-s <number>		- Skip comparison involving the first <number> of characters.
				-f <number>		- Skip comparison involving the first <number> of fields.

				-c				- Prefix lines by number of occurrences.
				-d 				- Only print duplicate lines.
				-u				- Only print unique lines.

			cp <fileA> <fileB> 	- Duplicate or Overwrite <fileA> as <fileB>.
				-r 				- If <fileA> is a directory, also copy contents within with the same directory structure.
				-p				- Preserve permissions and ownership when copying.

				-a 				- Copy <fileA> exactly as they are (archive).
			
			mv <fileA> <fileB>	- Move or Rename <fileA> as <fileB>. If <fileB> is present, it will be overriden.
			
			. ./<file.sh> [<args>, ...] - Execute executable <file.sh> in the current shell.
			./<file.sh> [<args>, ...] - Execute executable <file.sh> in a child shell.

			tar	<file>.tar 		- Utility to bundle or unbundle files together, without compression.
				-p				- Preserve Permissions of bundled or unbundled files.
				
				--exclude={'<regex>', ...} -cvf <file>.tar <pattern> ... - Bundle files matching <pattern>s into <file>.tar whilst preserving directory structure. 
					- Note: Does not store and preserve permissions and ownership of intermediate directories when used with the -p option, unless they are explicitly added in.
					- Note: For --exclude, if specifying a Directory, do not end with a '/'.
					- Tip: For --exclude, if only one item, just equate to one string and not an array.

				-tvf <file>.tar - List all files within <file>.tar verbosely.

				-xvf <file>.tar - Extract all <file>s within <file>.tar into a new folder at the current directory whilst preserving directory structure.
				--overwrite -xvpPf <file>.tar - Extract all <file>s within <file>.tar whilst preserving directory structure.
				-C <path> - Extract all <file>s to <path>.

				-z				- Activate compression for the file bundle. This operation can be invoked separately by the gzip command.
		
			gzip <file>.gz		- Utility to compress / uncompress specified file.
				-d				- Decompress <file>.gz
				-c				- Output Result to stdout.

			unzip <file>.zip	- Utility to uncompress specified file.
				-d 	<directory>	- Specify custom directory to extract file to.
				-j 				- Extract all file to the current directory without creating expanded archive directory.

		Script Specific:
			#!<script_interpreter>: Shebang or Hashbang Line to specify which Interpreter to use to read and execute the program.
			
			<command> [<flag>, ...] [<arg>, ...];

			set					- Set or Unset Shell Options.
				-e				- Exit immediately if Command exits with a non-zero status.
				-x				- Print commands and arguments as they are executed.
			
			#					- Denote comment line.

			: '
				"Multi-Line Comment"
			# '

			# : '
				"Activated Multi-Line Comment"
			# '
						
			# Variables:
				# Note: Spaces around the equals sign will confuse the interpreter into thinking that <variable> or <value> is a command!
				<variable>=<value> - Create and initialize a variable. 
				
				declare -a <array>=(<val1> <val2> ...) - Create and initialize an array.
				<array>+=(<val3> ...) - Add further elements to <array>.
				<array>[<index>]=<value> - Add <value> at non-consecutive specified <index>.
				
				"${<array>[@]}" - Expand <array> into a space-delimited string.
				
				declare -r <const>=<value> - Create and initialize a constant.
				declare -i <int>=<value> - Create and initialize an integer.

				export <variable> - Marks <variable> to be included in the current process environment, which is useful when spawning sub-shells. Note: Don't use "${<variable>}".
				-n				- Remove the <variable> from the current environment instead.

				# Variable Dereferencing
				# Note: Invalid references will fail silently!
				"${<variable>}"	- Reference value stored in specified <variable>.
				"${<array>[<index>]}" - Reference value stored in <array> variable at <index>.
				
				# System Variables: Uppercase Convention.
					$OSTYPE		- OS Information.
					
					$BASH		- Interpreter location.
					$BASH_VERSION - Interpreter version.
				
					$USER		- User Name.
					$HOME		- Home Directory.
				
				# Internal Shell Variables: Uppercase Convention.
					$OLDPWD		- Previous Working Directory.
					$PWD		- Present Working Directory.

					$BASH_SOURCE - Currently executing Script.
					$$			- Script PID.

					"$0"		- Basename of the function / program as it was called.
					"${1-9}" 	- Reference arguments passed into the function / program when it was executed.
					"$#"		- Number of arguments passed into the function / program. Excludes "$0".
					"$*"		- Reference arguments passed into the function / program as one long string. Excludes "$0".
					"$@"		- Reference arguments passed into the function / program. Excludes "$0".

					$? 			- Exit Code of last Command run.

					$RANDOM		- Reference a Randomly Generated Number.

				cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )" - Go to directory of current Script.
				
			# Control Flow:
				# Test Command: [
				# '[' requires ']' as the last argument.
				[ <conditional> ]
					-ne, -gt, ... - Numeric / Algebraic Inequality
					!=, ==, ...	- String Inequality
					=~			- Regex Matching Operator
					
				[ <conditional1> ] && [ <conditional2> ] - AND	
				[ <conditional1> ] || [ <conditional2> ] - OR	
				
				# Conditional Blocks
				if [<conditional1>]
				then
					...
				elif [<conditional2>]
				then
					...
				else
					...
				fi
				
				# Switch Case
				case ${<variable>} in
					<value1>) 
						...
						;;
					<value2>)
						...
						break
						;;
					*)
						#default
						;;
				esac

				case "1" in
					$((<arithCond1>))) 
						...
						;;
					$((<arithCond2>))) 
						...
						;;
					
				esac
				
				# For Loop
				# <sequence> 	- Space delimited entities, or {<start> .. <end>}, or $(seq <first> <second>).
				for <counter> in <sequence>; do ... ; ... done;
				
				for <counter> in <sequence>;
				do
					... ;
				done;
				
				# While Loop
				while [<conditional>]
				do
					...
				done
				
				# Do-While Loop
				while
					...
					[<conditional>]
				do :; done
				
				# Function
				string_return='' # Declare Global Placeholder for Function Return Value.
				
				function <fn_name>() {
					# Note: Empty Functions need to include at least the Dummy Command.
					# Tip: Functions are overridable.

					<global_var>=<val>				# Specify a global variable.
					readonly <global_var>=<val> 	# Specify a readonly global variable.
					
					declare <local_var>=<val> 		# Declare a local variable scoped to <fn_name>.
					declare -r <local_var>=<val>	# Declare a readonly local variable scoped to <fn_name>.

					# ...
					
					string_return="<return_value>"

					return <code>					# Exit out of Function
					exit <code>						# Exit out of Entire Execution
				}
				
				<fn_name> [<arg>, ...] # To use a Function	
				${string_return} # Obtain Return Value from Function.
			
			$(( <expr> ))		- Arithmetic Evaluation. Allows Arithmetic Parenthesises to be used.
			
			# IO
				mkdir <path> 	- Create Directory at specified <path>.
					-p 			- Create recursively if it does not exist at <path>.

				mktemp 			- Create Temp File.
					-d			- Create a Directory instead of a File.
			
				echo "<output>"	- Output <output> to output stream.
					-n			- Disable automatic newline after execution.
					-e			- Enable interpretation of backslashes in <output>.
				
				print '<format_string>' "<output>" - Output <output> to output stream. More portability and functionality than echo.
					\r			- <format_string> - Carriage Return. Useful for fixed-position output that gets updated.

				tee <file>		- Write to both stdout and <file>.
					- a			- Append as opposed to overwrite to <file>.
				
				read <var1> <var2> ... - Read user input and store it in <var1>, <var2>, etc.
					-a 			- Store multiple user inputs in an array. Only one <var> is allowed if this is used.
					-d			- Specify termination delimiter.
					-s			- Mask user input.
					-p '<prompt>' - Output <prompt> before attempting to read user input on the same line.
					
					-u <file_descriptor> - Specify to read from a different file descriptor (something other than stdin, stdout, and stderr).

					-e			- If stdin is coming from a terminal, readline is used to obtain the line.
					-i "<default>" - Fill in stdin with a <default> value first. Needs -e to work, and does not work with bash versions older than 4.
				
				wc <input>		- Count number of words in <input>.
					-l			- Count number of lines in <input>.

				head <input>	- Extract the first part of <input>.
					-<number>	- Specify number of lines to display.

				tail <input>	- Extract the last part of <input>.
					-<number>	- Specify number of lines to display.

				cut <input>	- Remove or cut out sections of <input>.
					-d '<delimiter>' - Specify delimiter to seperate <input> into fields.
					-f <field_index> - Specify field to extract from <input>. Is 1-index based.

				tr <string1> <string2> - Translate <string1> occurrences into <string2> from stdin to stdout.
					-d 			- Delete characters in <string1>, do not translate.
				
				grep <regex> <file_pattern> ... - Search through files matching <file_pattern> and only print to stdout the lines which matches <regex>.
				grep -e <regex> ... <file_pattern> ... - Search through files matching <file_pattern> and only print to stdout the lines which matches at least one of the <regex>s.
				grep -f <regex_file> <file_pattern> ... - Search through files matching <file_pattern> and only print to stdout the lines which matches the content in <regex_file>.
					-E 			- Use Extended Regex functionality (deprecated shorthand: egrep).
					-F			- Treat <regex> / content within <regex_file> as a literal and not as a Regex.

					-r 			- Recursive search for files in subdirectories as well.

					-i 			- Ignore case.
					-w 			- Only consider exact matches.
					-v 			- Invert the selection matched by the <regex>.

					-q 			- Suppress output to stdout.
					-l			- Print only the filenames that contain content that matches against the <regex>, and not individual lines.
				
				sed " <address>{<command> ; ...} ; ... " <file> - Stream Transforms based on given <command>s.
					-r 			- Use Extended Regex functionality.

					-n 			- Suppress automatic printout of pattern space.
					-e			- Read from stdin instead. Multiple -e can be chained, with each -e specifying a new string of <command>s.

					- Buffer Types:
						"Pattern" - Used by default. This is cleared between each cycle, and is filled at the start of each cycle.
						"Hold"	- Not used by default. This is not cleared between each cycle.

					<address>	- Specify optional scope of succeeding Command.
						<line_num>	- Succeeding Command to only execute on the line with the line number <line_num>.
						<line_num1>,<line_num2> - Succeeding Command to only execute on lines with the line numbers within the range <line_num1> to <line_num2> inclusive.
						/<search_pattern>/ - Succeeding Command to only execute on lines with the <search_pattern> in their content.
						$ 		- Alias for last line in Stream.

						! 		- Negation Operator. Succeeds the above to negate the scope.
					
					<command>	- Specify Operation to be done on each line in scope.
						Regex Patterns - https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions.html
						Note that the / delimiter for <command>s can be replaced by any other punctuation character.

						:<label_id>		- Create a Label for execution flow branching purposes.

						"s/<search_pattern>/<replace_pattern>/<flags>" - String Substution.
							g	- Flag to specify that the transformation should be done for every occurrence within the input stored within the "Pattern" Buffer.

						"/<search_pattern>/d" - Regex String Deletion.

						n or N 	- Read or Append content from the next line (which is consumed) into "Pattern".

						d 		- Delete "Pattern" content.

						h or H 	- Copy or Append content from "Pattern" to "Hold".
						g or G 	- Copy or Append content from "Hold" to "Pattern".

						x 		- Exchange "Pattern" and "Hold" content.

						<branch> <label_id> - Specify branching behaviour to the suceeding specified <label_id> if required. If the <label_id> is not specified, then it will branch to the end of the script.
							b 		- Unconditional Branch.
							t 		- Conditional Branch. Will Branch only if the previous <command> manages to execute.

				awk '<program>' <file> - Match for <pattern>s within <file>, and execute <action>s on each match. More portable than sed.
					- https://www.gnu.org/software/gawk/manual/gawk.html

					- <program>: Nested Collection of <pattern> { <action> ; ... } or ( <conditonal> ) { <action> ; ... }

					- Built-In Patterns:
						BEGIN 	- At the start.

					- Built-In Variables:
						RS 		- Record Separator.
						ORS 	- Output Record Separator.
						FS		- Field Separator.
						OFS		- Output Field Separator.

						NR 		- Record Number.
						NF 		- Number of Fields in a Record.

						$n...	- Reference nth Field of Record.

					- Use nawk instead if <action> involves system("<shell-command>s").

					-f <filepath> - Reference .awk file for execution.
					-F <delimiter> - Set Field Separator character.

					-v <var>=<value> ... - Set awk variables.
				
				perl 			- For almost any task, but especially when the task needs complex regular expressions.

			# Utility
				
		
