
Python Notes (as of 3.4)

Note: Indentation is important. Curly braces cannot be used to group blocks of code here.
Note: The comments that appear at the side for a given construct (for-loop, function, etc.) in this document should actually be placed within the construct so as to avoid 
	  indentation issues. The comments are placed as such for clarity's sake.
Note: x++ cannot be used here. Use x+=1 instead.
Note: No switch control block in Python.
Note: No function overloading in Python. Latest function with same name will be used.
  
Math Operations: Given two numbers, a and b:
	Add: 					a + b
	Subtract: 				a - b
	Multiply: 				a * b
	Division: 				a / b
	Integer Division:		a // b	#Since base-10, if b is a number of the powers of 10, this operation can be used to mask len(b) RHS digits of a.
	Remainder of Division:	a % b 	#Since base-10, if b is a number of the powers of 10, this operation can be used to obtain len(b) RHS digits of a.
	Power:					a ** b	#a to the power of base-10

Newline character: \n

Branching: if, elif (vs else if in Java), else
	
Obtain input (Prompt) from user: userInput = input("Enter Prompt Here");

Boolean Values: True, False;

Print things out on the screen: 
	print("ExampleString"); 		#print "ExampleString"
	print(2 + 3); 					#print "5"
	print(9, "ExampleString")		#print "9 ExampleString"
	print("9" + "ExampleString")	#print "9 ExampleString"
	
Raw String Example. Add the 'r' character without quotes to tell interpreter to treat next String literally,
and ignore escape characters: print(r'C:\Users\user\Desktop');

String: Surround content of Strings with single or double quotes. Alternate between quotes if there are quotes within the content.
Alternatively, we can use an escape character. \"

Length of a String: len("ExampleString");

Addition and Multiplication of a String possible.

Access a character(s) within a String Example (String Slicing): 
	"ExampleString"[0] == "E";
	"ExampleString"[-1] == "g";
	"ExampleString"[1:3] == "xa"; #Take the group of characters within "ExampleString" from position 1 and stop and exclude the character at position 3.
	"ExampleString"[1:-1] == "xampleStrin";
	"ExampleString"[:5] == "Examp";
	"ExampleString"[:5:2] == "Eap"; #Third argument is to edit how many inbetween-character-jumps to take after taking a character.
	
	Note: Strings are immutable. Their content cannot be changed once created. However, the String variable can be assigned to hold a different String.
	
Lists:

	Invocation:
		ExampleList = ["ExampleItem1", "ExampleItem2"]; #Need not contain the same type of data, unlike Java Arrays.
	
	List Slicing == String Slicing
	
	List Item Reassignment Example:
		ExampleList[0] = "ExampleItem3";
		ExampleList == ["ExampleItem3", "ExampleItem2"];
	
	Append Two Lists together: 
		ExampleList + [3, 5] == ["ExampleItem3", "ExampleItem2", 3, 5]; #Does not affect original ExampleList
		ExampleList.append([3, ]) == ["ExampleItem3", "ExampleItem2", [3]]; #Affects original ExampleList
	
	Multiple List Item Reassignment Example:
		ExampleList[:2] = [2, 1];
		ExampleList == [2, 1, [3]];
	
	List Item(s) Deletion Example:
		ExampleList[0] = [];
		ExampleList == [1, [3]];
		ExampleList[:] = [];
		ExampleList == [];
	
	Unpack List Example:
		ExampleList = ["ExampleItem1", "ExampleItem2"]; #Need not contain the same type of data, unlike Java Arrays.
		exampleVar1, exampleVar2 = ExampleList;			#Unpack list
		
		*variableVar = ExampleList 						#Unpack List into another list
	
	Zip:
		
		combinedList = zip(ExampleList1, ExampleList2); #combinedList is a List of Tuples.
	
Sets:

	A List, but without the capability to hold repeated items.
	
	Invocation:
		ExampleSet = {1, 2, 1, 5};
		print(ExampleSet); # Will print only one of each number: 1, 2, 5
		
Dictionary:

	Associative Arrays for Python consisting of keys and values. Acts similarly to a set (i.e. no repeat keys).
	
	Invocation:
		ExampleDictionary = { "ExampleKey":"ExampleValue", "ExampleKey2":"ExampleValue" };
	
	Obtain value associated with key:
		ExampleDictionary[ExampleKey] == "ExampleValue";
	
	Zip:
		
		zip(ExampleDictionary.values(), ExampleDictionary.keys()); #Sorted in accordance to whichever is the first argument
		
	
Looping Examples: Both logically the same

	for item in exampleList:
		print(item);
		
	for index in range(0, len(exampleList)):
		print(exampleList[i]);
	
	for item in exampleList[:3]:
		print(item);
		
	for k, v in exampleDictionary.items():
		print (v, k);
	
	for index in range(0, len(exampleList), 2): #increment the counter by 2 each time
		print(item);
		
	while (index < len(exampleList)):
		print(exampleList[index]);
		i+=1;
		
	Break Statement: Used to stop a loop: break;
	Continue Statement: Used to skip to the next loop: continue;
	
Functions: 
	
	Normal Function:
	
		def addEverything(x, y):
			return x+y;
	
	Normal Function with variable number of arguments:
	
		def addEverything(x, *args): # *args makes the function to be able to handle a variable number of arguments, stored in a iterative construct
			
			for i in args:
				x += i;
			
			return x;
		
		#Unpacking Arguments: Easier way to do than addEverything(argumentList[0], argumentList[1], argumentList[2]);
		argumentList = [1, 2, 3];
		addEverything(*argumentList);
		
		
	Normal function with default values for parameters:
	
		def addEverything(x=5, y=3, *args): # first argument has a default value, in case one is not supplied.
			
			for i in args:
				x += i;
				
			return x+y;
		
		# Keyword Argument: Used to specify which parameter is the argument for. Will return 11.
		addEverything(y=6); 	
	
		Function "Overloading": Can be simulated. Cannot actually be implemented:
		
			def addEverything(x, y=0):
				return x+y;
			
			instead of:
			
			def addEverything(x): # Will get ignored by Python if below function is also added into code
				return x;
				
			def addEverything(x, y):
				return x+y;
	
	Anonymous Functions: Lambda
		
		answer = lambda x: x*25;
		answer(5);

Class: Group similar variables and functions together:

	class ExampleClassName:
	
		ExampleAttribute = ExampleValue;
		
		def __init__(self): #Constructor
		
			self.ExampleAttribute #"Instance" variable
		
		def ExampleMethod(self):
		
			self.ExampleAttribute #Counterpart to Java's this
	
	class AnotherClassName:
	
		pass; #Do nothing line 
	
	class InheritedClassExample(ExampleClassName, AnotherClassName): #ExamplaClassName has priority, will override AnotherClassName's method and attribute if it can
	
		def __init__(self): #Constructor
		
			
		
		def ExampleMethod(self): #Overrides ExampleClassName's ExampleMethod
	
	
	ExampleObject = ExampleClassName(); #Initialize Object
	
	ExampleClassName.ExampleAttribute = ExampleValue; #Change a Class variable "statically", ExampleObject will not get affected.			
				
Exception Example:

	try: 
		
		... enter code here ...
		
	except ExampleError:
				
		... enter follow-up code here ...
	
	except: #Generic Error
		
		...enter follow-up code here ...
	
	finally: 
		
		...execute code block here regardless of error or not...
	
Modules: 

	Is similar to a Java library. A separate file that contains more commonly used functions to neaten code.
	
	To use the function in a module:
		
		import ExampleNameofFile; # no need to include .py
		ExampleNameofFile.ExampleFunction();
		
		or
		
		from ExampleDirectory import ExampleModule;
	
	Random Numbers:
	
		import random;
		x = random.randrange(0, 1000);

	Download images from websites:
		
		import urllib.request;
		
		def download_web_images(url):
			name = random.randrange(0, 1000);
			full_name = str(name) + ".jpg";
			urllib.request.urlretrieve(url, full_name);
			
		download_web_images(url);
	
	Download (csv) files from websites:
	
		from urllib import request;
		
		def download_files(url):
			response = request.urlopen(url);
			data = response.read();
			
			stringData = str(data);				#Make data entirely a string format.
			
			lines = stringData.split("\\n"); 	#Delimiter: \n
			
			file_dest = r"data.csv";			#Create file at destination
			
			fwrite = open(file_dest, "w");
			
			for line in lines:
				fwrite.write(line + "\n");
			
			fwrite.close();
		
	Read and Write Files:
	
		fwrite = open("ExampleName.txt", "w"); #Open a file and write to it
		fwrite.write("ExampleText \n");
		fwrite.write("More example text \n");
		fwrite.close();						   #Closes a file to prevent memory leaks.
		
		fread = open("ExampleName.txt", "r");  #Open a file and read from it
		textString = fread.read();
		fread.close();						   #Closes a file to prevent memory leaks.
	
	Web Crawler:
		
		import requests;			   #May require an external module called requests
		from bs4 import BeautifulSoup; #Requires an external module called beautifulsoup4
		
		def spider(max_pages=5, url) { #url should not have the page number appended to it: "page="
			current_page = 1;
			
			while current_page <= maxpages:
				
				full_url = url + str(current_page);
				page_src = requests.get(full_url);	#Gets page source from url
				plain_text = source_code.text;		#Filters through the unneccsary information from the page source
				
				soup = BeautifulSoup(plain_text);	#Create a BeautifulSoup object with the HTML page source code loaded
				
				for link in soup.findAll("ExampleHTMLElementwithout<>", {"ExampleHTMLAttribute":"ExampleValue"});
					
					title = link.string;
					print(title);
					
					href = link.get('href');		#Tutorial substituted ExampleHTMLElementwithout<> with 'a', ExampleHTMLAttribute with 'class'
					complete_url = url + href; 		
					
				current_page += 1;
		}
		
Threading:

	Run at the same time. Example: Messaging.
	
	import threading;
	
	class Messenger(threading.Thread):
	
		def run(self): #Run function special for Threads
			
			for _ in range(10):
				
				print(threading.currentThread().getName());
		
		
	ExampleThread1 = Messenger(name = "TestSend");
	ExampleThread2 = Messenger(name = "TestReceive");
		
	ExampleThread1.start(); #start() likely calls run()
	ExampleThread2.start();
		

Images:		
	
	Library required: Pillow
	
	from PIL import Image; 		#Basic Image Functionality
	from PIL import ImageFilter #Advanced Image Functionality
	
		
	img = Image.open("ExampleImage.jpg"); #Should be in the same directory
	
	img.size;  							  #Returns a tuple containing the size of the image
	img.format; 						  #Returns the format of the image	
	img.show();							  #Opens the image in the default picture viewer used in OS
	
	cropped = img.crop((top_left_x, top_left_y, bottom_right_x, bottom_right_y)); #Crop an Image
	img.paste(img, (top_left_x, top_left_y, bottom_right_x, bottom_right_y));	  #Paste an Image over another Image
	
	img.mode; 	#Prints channel of image
	img.split; 	#Tuple of channels in an image
	
	merge_img = Image.merge("RGB", (r_image, g_image, b_image));	#Merge channel images together
	
	img.resize((x_scale, y_scale)); #Resize
	img.transpose(Image.FLIP_LEFT_RIGHT); #Flip 
	img.transpose(Image.ROTATE_90); #Rotate
	
	img.convert("L"); #Switch between Channel Modes; "L" converts the image to a Black and White Image

	img.filter(ImageFilter.BLUR); #Blur Image
	img.filter(ImageFilter.DETAIL); #Sharpen Image
	img.filter(ImageFilter.FIND_EDGES); #Chalkboard Effects