To list all modules: python > help("modules")

To keep working version of Python clean, and prevent any conflicts between installed packages...

For Windows:
-If using virtualenv (skip Steps 1 and 2 if virtualenv already installed in system)
1) pip install virtualenv
2) run (from the Scripts folder inside the Python Root Folder via Windows Shell) "virtualenv <ENV>" where the <ENV> is the absolute file path. 
   Note that this file path cannot contain spaces.
3) Install the necessary packages via the pip script in the new environment (use "python -m pip <PACKAGE>")
4) After installing all necessary packages, to make that environment relocatable, run "virtualenv --relocatable <ENV>"
5) Place the project within the scripts folder, then run the activate.bat file within Windows Shell, following which run python.exe in the same dir. 
   If Python IDLE is desired, run "python -m idlelib.idle" instead.

For Linux:
-Assuming p34env is to be the name of the environment, and the current root of the shell is at the desired location of the virtualenv

1)	$ virtualenv -p python3 p34env
	(...)
	New python executable in p34env/bin/python3.4
	Also creating executable in p34env/bin/python
	Installing setuptools, pip...done.

	$ source p34env/bin/activate

	(p34env)$ python -V
	Python 3.4.2

	(p34env)$ deactivate 
	$
	
2)	Do the relative imports as  from ..sub2 import mod2 and then, if I want to run mod1.py then I go to the parent directory of app and run the module using the python -m switch as  python -m app.sub1.mod1.
	The real reason why this problem occurs with relative imports, is that relative imports works by taking the __name__ property of the module. If the module is being directly run, then __name__ is set to __main__ and it doesn't contain any information about package structure. And, thats why python complains about the relative import in non-package error.