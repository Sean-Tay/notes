ELK
	Abbreviations: 
	
	Description: Service for Searching Data.
	
	Resources:
	
	Concepts:
		Nested Field: A List Field whose Object Elements have been flattened by taking the original Document and cloning it for each Element in the List, such that each clone only contains a single Element in its List Field.

		Query DSL: The JSON-based language that ELK uses to define Queries.
			Query Context: Query Clauses run under this Context will decide how well Documents match, and their order in the final results.
			Filter Context: Query Clauses run under this Context will decide if the Document should even appear in the final results.

		Query String: A String with Lucene-based Syntax that is used by the "q" Query Parameter / "query_string" JSON Value within the Query DSL. Offers only a subset of the Query DSL's functionality.
	
	Details:
		Note: <field> below refers to Field Paths Specifications:
			<field>.<sub-field>. ...

		Search API:
			Kibana Console:
				// Search
				<http-request-method> /<index-name>/ ... /_search
				{
					// Query DSL
					"query": <query>,
						// <query>
						{
							// Term Level: More for checking if a <field> has a particular <value>.
								// Exists - Check if a <field> has a non-null Value, or is a non-empty (String) Array.
								// Note: Don't use this to check for the existance of Nested Objects; use the ignore_unmapped flag in the Nested Query instead.
								"exists": {
									"field": "<field>"
								}

								"term": {
									"<field>": <value>
								}

								"terms": {
									"<field>": [<value>, ... ]
								}

								// Range - Can also be used for Date <field>s.
								"range": {
									"<field>": {
										"gte": <lower-bound-value>
										"lte": <upper-bound-value>,
									}
								}

							// Compound:
								// Matches for Documents based on Boolean Combinations of other <query>s.
								"bool": {
									// Query Context
										"must_not": [ <query>,  ... ], // NOT AND Behaviour.
										"must": [ <query>, ... ], // AND Behaviour.
										"should": [ <query>, ... ], // Varying OR Behaviour possible with "minimum_should_match" specification.

									// Filter Context
										"filter": {
											"script": {
												"script": """
													// Should return a Boolean on whether a given Document is included in the Results:
													// <boolean-expression> <boolean-operator> ...
														// <boolean-expression>:
															// Tip: Cannot query <list-field>s directly; instead try querying on a <element-field> that would be present on all Elements in the List as a proxy to query on the <list-field>:
																// Example: Get all Documents whose <list-field> has more than one Element:
																	doc['<list-field>.<element-field>'].size() > 1

															// Check if <field> exists on Document:
															doc['<field>'].size() != 0

															// Reference <field> Value:
															// Note: Does not work on text and annotated_text Fields.
															doc['<field>'].value

														// <boolean-operator>:
															&&
															||
												"""
											},

											// OR

											<query>,

											// ... 
										},

										// ...

										"must_not": { <query>, ... },

									// Options
										"minimum_should_match": <number> // Specifies the minimum number of should Clauses that the Document must match.
								},

							// Joining:
								// For querying Nested Type Fields (i.e. List Fields with the correct typing in the Index Configuration). This itself can be nested.
								"nested": {
									"path": "<nested-field>",
									"query": {
										// <query> Object as defined above

										// Note: Absolute Paths must still be specified for the <field>s within.
										// Example: <nested-field>. ... .<field>
									},

									// Prevent ELK from throwing an Error if the Document Mapping for the <nested-field> does not exist / is not nested.
									"ignore_unmapped": true
								}

							// Full-Text Queries:
								// Matches for Documents via a simpler but less capable Mechanism - see Query String Syntax Section below.
								// Note: By default, query_string has a 1024 Character Limit.
								"query_string": {
									"query": <query-string>
								}
						}

					// Specify the maximum number of Documents that will be returned (default 10, max 10000).
					"size": <number>, // Does not affect hits.total.value.
					"track_total_hits": <boolean>,

					// Specify the <field>s that will be returned from each Document that fulfills the Query.
					"fields": [ "<field>", ... ], // Uses the original Document and Indexes to reference <field> Values. Can only return Primitive / "Leaf" Values.
					"_source": <{boolean | field-path-with-wildcard | field-array}>, // Uses the original Document to reference <field> Values. If set to false, the full Document will not be returned (default true).
				}

				// Get Index Configuration
				<http-request-method> /<index-name>/ ... /_mapping
			}

		Query String Syntax:
			// Note: Be aware of URL Character Limit.

			_exists_:<field> // Search for <field> Values which are non-null.

			<field>:<term> ... // Search for <field> Values which match any of the specified <term>s
				// <term>
					// Plain Text Values:
						<value> // Without Quotes

					// Phrase Values:
						// Note: Wildcards cannot be used with Phrase Values (Double Quoted Values).

						"<prefix> <suffix> ..." // Search for Values which exactly contains the specified Phrase Term

					// Text Values with Wildcards:
						// Note: Wildcards cannot be used with Phrase Values (Double Quoted Values).
						// Note: Wildcards are incompatable with Fuzzy Searches.

						<value>? // Search for Values which contain the specified <value> with a Single Character Wildcard
						<value>* // Search for Values which contain the specified <value> with Zero or More Character Wildcards

						// Note: Wildcards before <value> are extremely Memory Intensive.
						*<value>* // Search for Values which contain the specified <value> as a substring

					// Regex Values:
						/<regex>/ // Search for Values that match the <regex> Term

					// Range Values:
						// Note: Inclusive and Exclusive Range Boundaries can be both used in a Single Range.
						[<start> TO <end>] // Search for Values which fall within the Inclusive Range Boundaries
						{<start> TO <end>} // Search for Values which fall within the Exclusive Range Boundaries

						// Dates:
							[<YYYY-MM-DD> TO <YYYY-MM-DD>]
							{* TO <YYYY-MM-DD>} // All Dates before <YYYY-MM-DD>
							{<YYYY-MM-DD> TO *} // All Dates after <YYYY-MM-DD>

							// Alternatively "<YYYY-MM-DD>T<HH-MM-SS.MS>"

						// Note: The colon after the <field> is still required for the below
						><value> // Greater Than
						>=<value> // Greather Than or Equal To
						<=<value> // Lesser Than or Equal To
						<<value> // Lesser Than

					// Fuzzy Terms:
						// Note: Wildcards are incompatable with Fuzzy Terms.
						<term>~<fuzziness-number> // Search for Values that approximately match <term>
							// For Values, differ by Insertion, Deletion or Substitution of <fuzziness-number> characters)

					// Term Relevance:
						<term>^<relevance-number> // Assign <term>s with different Weight
							0 to 1 <relevance-number> // Less Relevance
							> 1 <relevance-number> // More Relevance

					// Boolean Term Operators:
						-<term> // Results should exclude <term>
						+<term> // Results should include <term>

			<field>:(<term1> OR ... ) // Search for Values which match any of the specified Terms
				// Note: If Boolean Term Operators are involved, then Results must conform to all Boolean Terms
				// Note: For Array Fields, if at least one of the Element matches a Boolean Term, the whole thing will be included / excluded.

			// Query Boolean Logic
				<query1> AND <query2> ...
				<query1> OR <query2> ...
				NOT <query> 

				// Note: AND has higher precedence than OR
				// Tip: Use Parenthesis to override default AND precedence
				<query1> AND ( <query2> OR <query3> ... ) ...

	Commands:
		
	
