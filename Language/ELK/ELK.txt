ELK
	Abbreviations: 
	
	Description: Service for Searching Data.
	
	Resources:
	
	Concepts:
		Query DSL: The JSON-based language that ELK uses to define Queries.
			Query Context: Query Clauses run under this Context will decide how well Documents match, and their order in the final results.
			Filter Context: Query Clauses run under this Context will decide if the Document should even appear in the final results.

		Query String: A String with Lucene-based Syntax that is used by the "q" Query Parameter / "query_string" JSON Value within the Query DSL. Offers only a subset of the Query DSL's functionality.
	
	Details:
		Note: <field> below refers to Field Paths Specifications.

		Search API:
			Kibana Console:
				<http-request-method> /<index-name>/ ... /_search
				{
					"query": <query-dsl-object>,

					// Specify the maximum number of Documents that will be returned (default 10, max 10000).
					"size": <number>,
					"track_total_hits": <number>,

					// Specify the <field>s that will be returned from each Document that fulfills the Query.
					"fields": [ "<field>", ... ], // Uses the original Document and Indexes to reference <field> Values. Can only return Primitive / "Leaf" Values.
					"_source": <{boolean | field-path-with-wildcard | field-array}>, // Uses the original Document to reference <field> Values. If set to false, the full Document will not be returned (default true).
				}

		Query DSL:
			{
				"query": {
					// Matches for Documents based on Boolean Combinations of other <query>s.
					"bool": {
						// Query Context
							"must": [ { <query>, ... }, ... ], // AND Behaviour.
							"should": [ { <query>, ... }, ... ], // Varying OR Behaviour possible with "minimum_should_match" specification.

						// Filter Context
							"filter": {
								"script": {
									"script": """
										// Should return a Boolean on whether a given Document is included in the Results:
										// <boolean-expression> <boolean-operator> ...

										// <boolean-expression>:
											// Check if <field> exists on Document:
											doc['<field>'].size() != 0

											// Reference <field> Value:
											doc['<field>'].value

										// <boolean-operator>:
											&&
											||
									"""
								},

								// OR

								<query>,

								// ... 
							},

							"must_not": { <query>, ... },

						// Options
							"minimum_should_match": <number> // Specifies the minimum number of should Clauses that the Document must match.
					},

					// Matches for Documents via a simpler but less capable Mechanism - see Query String Syntax Section below.
					"query_string": <query-string>
				}
			}
			
			// <query>
				// <term-level>: More for checking if a <field> has a particular <value>.
					"term": {
						"<field>": <value>
					}

					"terms": {
						"<field>": [<value>, ... ]
					}

		Query String Syntax:
			_exists_:<field> // Search for <field> Values which are non-null.

			<field>:<term> ... // Search for <field> Values which match any of the specified <term>s
				// <term>
					// Plain Text Values:
						<value> // Without Quotes

					// Phrase Values:
						"<prefix> <suffix> ..." // Search for Values which exactly contains the specified Phrase Term

					// Text Values with Wildcards:
						// Note: Wildcards are incompatable with Fuzzy Searches.

						<value>? // Search for Values which contain the specified <value> with a Single Character Wildcard
						<value>* // Search for Values which contain the specified <value> with Zero or More Character Wildcards

						// Note: Wildcards before <value> are extremely Memory Intensive.
						*<value>* // Search for Values which contain the specified <value> as a substring

					// Regex Values:
						/<regex>/ // Search for Values that match the <regex> Term

					// Range Values:
						// Note: Inclusive and Exclusive Range Boundaries can be both used in a Single Range.
						[<start> TO <end>] // Search for Values which fall within the Inclusive Range Boundaries
						{<start> TO <end>} // Search for Values which fall within the Exclusive Range Boundaries

						// Dates:
							[<YYYY-MM-DD> TO <YYYY-MM-DD>]
							{* TO <YYYY-MM-DD>} // All Dates before <YYYY-MM-DD>
							{<YYYY-MM-DD> TO *} // All Dates after <YYYY-MM-DD>

						><value> // Greater Than
						>=<value> // Greather Than or Equal To
						<=<value> // Lesser Than or Equal To
						<<value> // Lesser Than

					// Fuzzy Terms:
						// Note: Wildcards are incompatable with Fuzzy Terms.
						<term>~<fuzziness-number> // Search for Values that approximately match <term>
							// For Values, differ by Insertion, Deletion or Substitution of <fuzziness-number> characters)

					// Term Relevance:
						<term>^<relevance-number> // Assign <term>s with different Weight
							0 to 1 <relevance-number> // Less Relevance
							> 1 <relevance-number> // More Relevance

					// Boolean Term Operators:
						-<term> // Results should exclude <term>
						+<term> // Results should include <term>

			<field>:(<term1> ... ) // Search for Values which match any of the specified Terms
				// Note: If Boolean Term Operators are involved, then Results must conform to all Boolean Terms

			// Query Boolean Logic
				<query1> AND <query2> ...
				<query1> OR <query2> ...
				NOT <query> 

				// Note: AND has higher precedence than OR
				// Tip: Use Parenthesis to override default AND precedence
				<query1> AND ( <query2> OR <query3> ... ) ...

	Commands:
		
	
