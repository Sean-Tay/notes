MongoDB:
	Abbreviations:
	
	Description: 
		Cross-Platform Document Database.
	
	Resources:
		MongoDB Atlas: 			Cloud-Based MongoDB Service Provider.
	
	Concepts:
		Non-Relational Database: Databases that store their Data in a Document-based Approach / Semi-Structured Manner. 
			No Joins Required: Data pertaining to an Entity is stored together, making the average Query more performant than traditional Relational Databases.
			Flexible Structure: Because the Data is stored in a non-Tabular Format, Data of different Types can be stored together.

		Document:				Flexible Data Structure that features field-Value Pairs. Analogous to a Record.
		Collection:				A grouping of Documents. Analogous to a Table from a Relational Database.

		Index:					An additional Data Structure accompanying a Collection that speeds up Document Access during Queries.
			Single Field Index: An Index which tracks Documents based on a single field.
			Compound Field Index: An Index which tracks Documents based on multiple Attributes.

			Multikey Index:	An Index which accounts for Attributes with Array / Document Type Values.

			Sparse Index:		An Index which only tracks Documents that have the Attributes involved in the Index.
			Partial Index:		An Index which only tracks Documents that fulfill some Filter Expression.

		Aggregation Pipeline:	Data Processing Pipeline focusing on Grouping-Type Operations.
		View:					In-Memory Read-Only Data Structure whose Contents are defined via an Aggregation Pipeline on Collections or other Views, and is generated only when a Query to that View has been made.

		Replica Set:			A Cluster of Server Processes that maintain copies of the same Data Set to achieve High Availability.
		Shard:					A group of Server Processes or Replica Sets that each handle Database Operations for different Document subsets of a Collection to achieve Horizontal Scalability.
	
	Details:
		MongoDB is known as a schemaless Database. This means that the Database does not enforce a consistent Data Structure in the Data that it stores.
			Application Level Drivers may enforce their own Schema Definitions outside of MongoDB (i.e. Mongoose.js).

		Default Port:			27017

		Document:
			_id:				Reserved as a Primary Key
				// Consists of 24 Hexadecimal Numbers:
					// First 8 Numbers represent a Timestamp for when the Document was created.
					// Next 6 Numbers represent a unique ID for the machine that generated this Document.
					// Next 4 Numbers represent a unique ID for the process in the machine that generated this Document.
					// Last 6 Numbers represent an incrementing sequence for each Document entered.
	
	Commands:
		MongoDB Shell: JavaScript / Nodejs REPL Environment:
			mongosh <mongodb-url> // Connect to the MongoDB Deployment at the URL specified.

			use <database>		// Switch to the Database named <database>. MongoDB will automatically create the Database when the first instance of Data is stored.
			db					// Get the name of the current Database in use.

			db.getCollectionNames() // View all saved Collections under the current Database being used.
			
			db.createCollection("<collection-name>") // Create a Collection under the current Database being used.

			// Insert one or more Documents under <collection-name>. Will create the Collection if it does not already exist.
			db.<collection-name>.insert( 
				[
					{
						// ...
					},
					// ...
				]
			)

			db.<collection-name>.drop() // Drop <collection-name> from a Database. 

			db.<collection-name>.getIndexes() // View all Indexes for <collection-name>.

			// Create an Index on a Collection:
			db.<collection-name>.createIndex( 
				{ 
					// The Index orders the Documents based on their values for the <field>s, prioritising the Attributes which are specified first:
					"<field>": <{ 1 | -1 }>, 
					// ...
				}, 
				{	
					// Options:
						// name: <name> - Specify a Name for the Created Index.
						// unique: <boolean> - Enforce whether the underlying Collection will not accept Documents with the same values for the specified Index Attributes.
						// sparse: <boolean> - Specify if the Index should include Documents in the Collection without defined values for the specified Index Attributes.

					// ...
				}
			)

			db.<collection-name>.dropIndex("<index-name>") // Drop <index-name> from <collection-name>.
			
			/*
				Common Operators: https://docs.mongodb.com/manual/reference/operator/
					<query>
						{
							"<field>": <value> // To Select for Documents whose value under the <field> matches the <value> exactly.

							// OR

							"<field>": {
								"$in": [<value>, ... ], // To Select for Documents whose value under the <field> matches one of the <value>s in the specified Array.
								"$ne": <value>, // To Select for Documents whose value under the <field> does NOT match the <value>.
								"$nin": [<value>, ... ], // To Select for Documents whose value under the <field> does NOT match all of the <value>s in the specified Array.

								"$gte": <value>, // To Select for Documents whose value under the <field> is greater than or equal to <value>.
								"$lte": <value>, // To Select for Documents whose value under the <field> is lesser than or equal to <value>.

								"$size": <length>, // To Select for Documents whose value under the <field> is an Array containing <length> Elements.
							}
							
							// OR

							// Embedded Document Query:
							"<document-field>.<sub-field>. ... ": // ...
						}

						// <query> can be an empty Document to match all Documents under a Collection.

					<projection> // Specifies the Fields to include for each Document that fulfills <query> criteria.

					<pipeline> // https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/
			*/

			// Select Documents under <collection-name> which satisfy the <query>'s Criteria.
			const results = db.<collection-name>.find(<query>, <projection>)

			results.limit(<length>) // Get only the first <length> Matches.
			results.skip(<length>) // Ignore the first <length> Matches.
			results.pretty() // Format into Human-Readable Output.

			// Execute Aggregate-Type Queries under <collection-name>, according to the specified Aggregation <pipeline> Array.
			const aggregateResults = db.<collection-name>.aggregate(<pipeline>)
			
			// Update Document(s) in <collection-name>:
			db.<collection-name>.update(<query>, <update>, <options>)
				<options>:
					{
						"multi": <boolean>, // If this Update Operation should affect all Documents that match the <query>, or just the first.
						"upsert": <boolean>, // If a new Document should be created if no existing Documents match the <query>.
					}
			
			// Delete Document(s) in <collection-name>:
			db.<collection-name>.remove(<query>, <justOne>)
			
	Language Syntax:
		Kotlin:
			Relevant Packages: 
				com.mongo.*
				org.bson.Document

			Example Document for CRUD Operations:
				val <operation> = Document(mapOf(
					"<field>" to "<value>"

					// ...

					"\$<operator>" to Document(mapOf(
						// ...
					))
				))
