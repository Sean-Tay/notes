Database
	Abbreviations: 
		DBMS:					DataBase Management System.

		CMDB: 					Configuration Management Database.

	Description: 
		A Database is an Organized, Long-Term Collection of Data, generally Stored, Managed and Accessed via some System.
	
	Resources:
	
	Concepts:
		Data Types:
			Structured Data:	Data whose Elements are Directly Addressible (i.e. Tabular or Array-like Data).
			Semi-Structured Data: Data whose Elements may not be Directly Addressible, but still contain other forms of Organizational Properties (i.e. Tagged Data: XML).
			Unstructured Data:	Data which is currently observed to have no immediately helpful Pre-Defined Format (i.e. Binary Data: PDFs).

		Attribute / Key / Field: Refers to a characteristic of some type of Entity.
		Record:					A collection of Attributes pertaining to some instance of an Entity.
		Group:					A collection of Records.

		Index: 					An additional Data Structure that maps between a defined subset of each Record's Data, and Virtual Addresses of the Full Records on Disk.
			Types:
				Sparse:			Contains a mapping only for every n Records in the Table to the Disk Location. Typically used in Multi-Level Indexing (i.e further Indexing of a Dense or overly Large Index).
				Dense:			Contains a mapping for every Record in the Table to the Disk Location.

			The optimization is more effective when Records are large => Less Records per Disk Partition => More Disk Accesses without an Index, which are Expensive.

		In-Memory Database: 	A Database which stores Data in Main Memory, which is much faster than Disk Storage as I/O is skipped. Suitable for Operations in which Response Time is critical.

		Database Types:
			Relational Database: Consists of Tables storing Rows of Structured Data.
				Pros:
					ACID-strengthened Transactions:
						Atomicity:		Transactions containing multiple Statements will either succeed as a whole, or not be processed at all.
						Consistency:	Transactions can only bring the Database from one valid State to another, respecting Constraints, Cascades and Triggers within affected Data.
						Isolation: 		Transactions executed concurrently will behave the same if the Transactions are executed sequentially.
						Durability:		Transactions that have been commited will remain commited, even during System Failure (Power Outage / Crash).

						Benefits diminish in Distributed Settings.

					Relational Structure allows minimization of Data Duplication across Tables.

				Cons:
					Scalability:
						CAP Theorem suggests that Availability, Consistency and Partition Tolerance cannot be satisfied at the same time.
						Row-Based Data Structure not optimal for Data Compression.

						Challenging to Horizontally Partition due to JOINs.
						Data may not always be stored in one Partition / Machine, and may require several Network Calls to fulfill.

				Related Content:
					SQL
					NewSQL:		Seeks to combine the strengths of Relational Databases with the strengths of Document Databases.

				Examples:
					PrestoDB:	Facebook's Distributed SQL Query Engine.

			NoSQL: Anything that is not storing Data in a Structured Table Format:
				Document Database:
					Pros:
						Performance:
							Data Locality minimizes the distance of Disk Lookups, as the Document is usually stored in one place on Disk, and in one Machine.

						Scalability:
							Easier to Horizontally Partition without ACID Considerations.

					Cons:
						Larger Network Calls as a result of sending over whole Documents with unneeded Information.

					Related Content:

					Examples:
						MongoDB
						DynamoDB:	Amazon's NoSQL Solution.
						Firestorm

				Graph Database: Stores Data in a Graph (i.e. Vertices and Edges). Queries involve traversing the Graph.
					Pros:
						Good for storing Heterogenous and Homogenous Types of Data.

					Cons:

					Related Content:

					Examples:
						Cassandra

				Key-Value Database:
					Pros:

					Cons:

					Related Content:

					Examples:
						Redis: In-Memory based Database with Disk Persistence that is often used as a Caching Layer on top of other RDBMSes.

			Data Warehouse

		Database Partitioning:
			Horizontal Partitioning: Different Records into Separate Groups (e.g. Sharding).
			Vertical Partitioning: Different Record Attributes into Separate Groups (e.g. Normalization or simple Record Splitting).

	Details:
		
	
	Commands:
		
	
