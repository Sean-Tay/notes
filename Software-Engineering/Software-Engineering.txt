Software Engineering:
	Concepts:
		Language Server Protocol: 	The Protocol used for communication between IDEs and a Language Server to provide advanced Developer Features such as Autocompletion or Reference Navigation.
		
		Constructs:
			Polyglot:				A single Entity which is designed to express the same functionality across usage of multiple Programming Languages at the same time.
			Shims:					Emulation of API for Legacy Environments that would not have them implemented / repair incorrect implementations of the API in Problematic Environments.
			Stub:					Dummy implementation of some part of a Program / Software / System, usually used in scenarios where the full functionality of the Program / Software / System is not strictly required.
			Mixins:					Classes with implemented Methods meant for reuse amongst other Classes, forgoing direct Inheritance to acquire said functionality.

		Idempotency:				Property of Operations that allow them to be applied multiple times without changing the end result beyond the initial application.

		Type Variance: 				Describes the Degree of Interchangeability between two different Types of diferent Specificity.
			Invariant: 				No Interchangeability between both Types.

			Covariant: 				A Type T is Covariant if S <: P, then T<S> <: T<P>.
				Tip: When the implementing Class is swapped with a More Specific Variant, the Return Type of its API can only move in the same Direction with respect to Specificity (i.e. Co Variance) to maintain compatability with the Invoking Entity (Return Type Narrowing).

			Contravariant: 			A Type T is Contravariant if S <: P, then T<S> >: T<P>.
				Tip: When the implementing Class is swapped with a More Specific Variant, the Parameter Type of its API can only move in the opposite Direction with respect to Specificity (i.e. Contra Variance) to maintain compatability with the Invoking Entity (Parameter Type Expansion).

			Bivariant: 				Full Interchangeability between both Types.

		Type Projection: 			Taking and Reducing an existing Type to what is minimally needed, until it becomes possible to Subtype it.
		Type Erasure:				Types meant for Compilation Checks are not preserved during Runtime Execution.

		Metaprogramming:			The practice of making Programs that makes other Programs.
			Introspection:			Finding out the structure and semantics of the Code that makes up the Program.
			Reflection:				Finding out and adjusting the structure and semantics of the of the Code that makes up the Program.

		Unit Testing: 				These Tests focus on a small part / unit of the Codebase, but in a very detailed way (i.e. both correct and incorrect scenarios).
		Integration Testing: 		These Tests focus on the integration of Modules within a part of the Tech Stack (i.e. Backend or Frontend, in isolation).
		Smoke Tests:				These Tests check for Simple Failures (i.e. is the API available?) that may cause other, more extensive Tests to fail as well.
		Functional Testing:			These Tests are similar to End to End Testing, but are not as expensive as they only verify the final Output of a given Input across the Web App.
		End to End Testing: 		These Tests run across the Full Tech Stack (i.e. both Backend and Frontend). They usually simulate complex User Actions that may extend across multiple features.

		Black Box Testing: 			Tests that are implemented with no perspective on the internals of the Entity that they test.
		Brittle Tests:				Tests that would have to change each time a new Feature or Modification is done to the content being Tested.

	Design:
		Bad Code:					Mainly caused by Coupling.
			Rigidity:				Modification of one part of code requires changes to other parts of the code due to non-isolation and coupling.
			Fragility:				Modification of one part of code requires changes to many other non-related parts of the code.
			Non-Reusability:		
		
		OOP:						"OO is about managing Dependencies by selectively inverting key Dependencies in the architecture to prevent the problems with Bad Code."
			Abstraction:			To hide away low level implementation details and only expose high level functionality.

			Encapsulation:			The act of grouping all the Elements of a Concern within a Structure.
				Tip: Functions, Classes, Objects and Modules can be "Structures".

			Inheritance:			Extend parent Class functionality with child Classes that have a "is-a" relationship.

			Polymorphism: 			The provision of a single Symbol / Interface to represent Entities of different types.
				Note: The behaviour of the more specific Entity overrides whatever behaviour it may have Inherited from the less specific Entity, even if it is referenced as a less specific Entity.
				
				Examples:
					Compile-Time	Method Overloading
					Run-Time		Object Implementation / Inheritance + Method Overriding

			Delegation:				Allows an Object to fulfill a part of its API via a second Dependency Object. Functionality is handled by the Delegate, but with the context of the Object using it.
		
		SOLID:						Set of Design Principles to make Software more Flexible, Understandable and Maintainable.
			Single Responsibility:	Components should only handle one part of the Software's Specification, and it should only have one reason to change.
				Tip: Bad for Maintenability if two things are Coupled, which could change differently / at different times.
				Tip: Avoid coupling State of a Component with the Operations of the Component. Use a Class to solely represent State, and another Class that acts upon the State?
				Example: Module for Compiling a Report, and Module for Printing the Report.

			Open-Close:				Components should be Open to Extension but Closed for Modification. Basically, Inherit rather than modify.
				Tip: More about improving Code Maintenability by reducing chance of Regression / Bugs.
				Tip: Avoid using Private Variables, or be sure to expose Protected Getters and Setters, when considering this.

			Liskov Substitution:	Instances of a Higher Level should be replaceable by Instances of a Lower Level, without breaking the Application.
				Note: Not just in terms of the Contractual Interface, but also the behaviour of the two.
				Example: Ellipse and Circle. A Circle may be modelled as a special kind of Ellipse, but it violates the Liskov Substituion Principle.

			Interface Segregation:	No Module should be forced to depend on Functionality it does not use, given an Interface.
				Tip: Prefer Simple Interfaces for Composability over Large, General ones. Classes can then more easily implement these Interfaces.
				Tip: Prefer adjectives in Interface Names that more concretely document the functionality and purpose of the Interface (i.e. IOrderCalculator instead of IOrderManager).

			Dependency Inversion:	High Level Modules should not depend on concrete Low Level Modules, both should depend on Abstractions which dictate the details.
				Tip: Avoid coupling High Level Modules with specific types of Low Level Modules by introducing Abstractions on the Lower Level Modules.
			
		Dependency Injection:		Allow Dependencies of one Entity be initialized and passed in by another Entity.
		
		Inversion of Control:		Rather than having the Application determine when the Framework Functionality is used, the flow is reversed, and the Framework will trigger specified Application Functionality. It helps with Dependency Injection.
			Analogy: Hollywood Principle - Don't Call Us, We'll Call You.

		DRY:						Don't Repeat Yourself. Avoid Code Duplication whenever possible.
		WET:						Write Everything Twice. Avoid Over Abstraction, which can be more harmful than Code Duplication. 
		AHA:						Avoid Hasty Abstractions. Wait until a piece of Code has been Duplicated several times before looking into Abstraction to get a better sense of what the potential use-case for that piece of Code is.

		Patterns:
			Creation:
				Singleton:			A Class designed to only have one Instance, typically via a Private Constructor. Has to be Thread-Safe, and good to be Lazily Initialized.
				
				Factory:			A Method used to create different Sub-Class Instances with a consistent Parameter List,
				Static Factory:		Static Methods on Classes, designed to produce Instances of those Classes (e.g. Int.valueOf("5")). Idiomatic "Named" Constructors + generally accepted that these throw Exceptions vs regular Constructors + ability to return Instances of Sub-Classes.
				Abstract Factory:	A Method used to create different Class Instances with a consistent Parameter List, usually for functionality that requires one or more Classes.

				Builder:			Construction of a complex Class Instance one step at a time.

				Prototype:			Allows adaptability of code in the face of changing requirements via Instance Cloning. Helpful to avoid unnecessary sub-Classing and Inheritance.

			Structure:
				Decorator:			Used to tack on different functionality to Class Instances. Extension of the Prototype Design Pattern.

				Adapter: 			Conversion between different Interfaces.

			Repository:				Used to control how shared State can be interacted with via provision of Data Access Objects.

