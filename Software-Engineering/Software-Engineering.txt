Application Development:
	Design:
		Bad Code:					Mainly caused by Coupling.
			Rigidity:				Modification of one part of code requires changes to other parts of the code due to non-isolation and coupling.
			Fragility:				Modification of one part of code requires changes to many other non-related parts of the code.
			Non-Reusability:		
		
		OOP:						"OO is about managing Dependencies by selectively inverting key Dependencies in the architecture to prevent the problems with Bad Code."
			Abstraction:			To hide away low level implementation details and only expose high level functionality.
			Encapsulation:			Group Fields and related Methods together.
			Inheritance:			Extend parent Class functionality with child Classes that have a "is-a" relationship.
			Polymorphism: 			The provision of a single Interface to Entities of different types.
		
		SOLID:
			Single Responsibility:	
			Open-Close:				Components should be Open to Extension but Closed for Modification. Basically, Inherit rather than modify.
			Liskov Substitution:	
			Interface Segregation:	Have a specific Interface for each Client as opposed to one big Interface.
			Dependency Inversion:	High Level Modules should not depend on concrete Low Level Modules, both should depend on Abstractions which dictate the details.
			
		Dependency Injection:		Allow Dependencies of a Client be initialized and passed in by an external Server.
		
		Inversion of Control:		Reverses the flow of control between Client Applications and Frameworks.
		
	Constructs:
		Mixins:						Classes with implemented Methods meant for reuse amongst other Classes, forgoing direct Inheritance to acquire said functionality.

Application Lifecycle:
	Containerization:				Bundling an Application, related Binaries and Libaries into some Self-Contained Package for execution.

	Container Orchestration: 		Schedules and Manages Container Deployment.
