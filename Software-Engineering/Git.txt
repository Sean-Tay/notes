Git:
	Abbreviations:
		VCS						- Version Control System.
	
	Description:	
		Decentralized VCS.
			Larger Local Copy - Repo History saved.
			Does not need to be connected to Repo before Commits are made.
	
	Resources:
		
	
	Concepts: 
		Monorepo				- A single Repository that manages all the parts of the Project.
		Polyrepo				- A single Repository that manages individual Repositories, which each manage a part of the overall Project.
		
		Submodule				- Representation of the Local Copy of another Repository within the current Repository.

		origin					- A Local Alias for the Remote Repository's URL in interest.

		HEAD					- A Local Alias for the latest Commit in the current Branch.
		@						- A shorter Local Alias for the above.
		
		Downstream				- Information Flow from Remote Repo to Local Repo.
		Upstream				- Information Flow from Local Repo to Remote Repo.
	
	Details:
		Files:
			.gitmodules			- Houses metadata regarding the Submodules used in the current Repository.
				.git/config		- Houses metadata regarding the Submodules used in the current Repository for the Local Copy. Can be synchronized with .gitmodules via 'git submodules sync'.

			.gitignore			- Tracks Files and Directories to be ignored by Git.
				.git/info/exclude - Tracks Files and Directories to be ignored by Git for the Local Copy.

		Submodules:
			Treat these as their own Repositories: Local Changes can be done / commited in these in the same way as how Local Changes are done in a regular Repository.
	
	Commands:
		git config				- Configure Git.
			# Scope
				--local			- Per Repo.
				--global		- Per User.
				--system		- System-Wide.

			--get <variable>	- Check Git Config Variable.

			--global http."https://code.example.com/".sslVerify false - Disable SSL Cert Check for "code.example.com" domain.

		git init <directory>	- Create a Local Repository in the current *empty* Local Directory.
		git clone <repo-url>	- Copies a Remote Repository into the current *empty* Local Directory; creates Local Branches that track each available Remote Branch, before checking out the Local Branch that tracks the active Remote Branch of the Remote Repository.
			-o <repo-url-alias> - Specify a custom Local Alias to reference the Remote Repository URL (default is origin).

			--recurse-submodules - Also populate Submodule Directories w.r.t the Commit SHA specified in the Submodule Directory Object.

		git remote add <repo-url-alias> <username>@<server>:<repo-path-on-server> - Add a Local Alias for a Remote Repository URL.
		git remote -v			- View all Local Aliases within the current Repo.
		git remote remove <repo-url-alias> - Remove a Local Alias for a Remote Repository URL.

		git fetch				- Preview updates for all Local Branches tracking Remote Branches.
			FETCH_HEAD			- Creates a short-lived reference that keeps track of what has just been fetched from the Remote Repository. 

			-p 					- Clear Local Branches that track deleted Remote Branches.

		git branch -r 			- List all Remote Branches.
		git fetch <repo-url-alias> <remote-branch> <local-branch> - Creates a new Local Branch that tracks the specified Remote Branch.

		git branch <branch> [<commit-hash>] - Create a new Local Branch, optionally at a specified <commit-hash>. Tip: Do NOT use # in the Branch Name - will interfere with certain Commands.
			-d <branch> 		- Delete a Local Branch.

			-u <repo-url-alias>/<remote-branch> <branch> - Set which Remote Branch the Local Branch pushes to.

			--track <remote-branch> - Set the currently checked out Local Branch to track <remote-branch>.
			--unset-upstream - Set the currently checked out Local Branch to no longer track the Remote Branch it was assigned to track.

		git branch -l			- List all Local Branches.
		git branch -a 			- List all Local and Remote Branches.

		git branch -m <new-name> - Rename currently checked out Local Branch.

		git checkout <branch> - Switches Local Branches.
			-B <new-branch>	- Creates a new Local Branch called <new-branch> based on the current Local Working Copy if it doesn't already exist, or resets it if it does already exist, and switches over to it.
				--track <repo-url-alias> <branch> - Forces <new-branch> to track a specified Remote Branch.

			--recurse-submodules - Ensure that Submodules are in the right state for the Local Branch being switched to.

		git checkout <commit-hash> -- <file> ... - Switch current version of <file> with the <commit-hash> version of <file>.

		git merge [<repo-url-alias>] <branch> - Merge updates from the Branch <branch> into the currently checked out Local Branch.
			Tip: If there are pending changes prior to the merge, *do a Commit for those changes first ; do NOT use stash*. In the event the merge is done wrongly, there will be a Commit containing all prior work to revert to.

			--abort				- If Merge Conflicts will occur, this will revert the Merge. If there are prior Local Working Copy changes, those will be lost.
			--continue			- If Merge Conflicts will occur, this will allow for retrying the Merge after the edits are made and added to the Local Staging List (via git add).

			--no-commit			- Prevent the automatic Commit behaviour of the Merge operation, allowing for edits to be made before actually making the Commit.
			
			--squash			- Combine all updates from the Branch <branch> into one, and add that combined update as one Commit into the currently checked out Local Branch. Does not actually merge <branch>, which helps keep git history of the currently checked out Branch clean.

		git pull [<repo-url-alias>] <branch> - git fetch + git merge.
			--allow-unrelated-histories - Merges two Repos that started independently.

			--recurse-submodules - Also populate Submodule Directories w.r.t the Commit SHA specified in the Submodule Directory Object.

		git cherry-pick <commit-hash> - Selectively bring in a Commit from another Branch to the currently checked out Local Branch.
		git cherry-pick <older-commit-hash>~1..<newer-commit-hash> - Bring in a range of Commits from another Branch to the currently checked out Local Branch.
			--no-commit			- Apply the changes only to the Local Working Copy without Commiting.

			--continue			- Continue the operation, in case it was interrupted by a Merge Conflict.
				Note: git add and git commit to let Git know the Merge Conflict has been handled first.

		git status				- Get status of added, modified and removed <file>s in the current Local Branch.

		git submodule add <repo-url> [<local-submodule-path>] - Create a Submodule Entry that references the master Branch of the other Repository.

		git submodule set-branch -b <submodule-branch> -- <local-submodule-path> - Set the Branch of the other Repository that a Submodule will reference.
		git submodule set-branch -d -- <local-submodule-path> - Reset the Branch of the other Repository that a Submodule will reference to the default.

		git submodule sync --recursive [-- <local-submodule-path>] - Syncs the Submodule Entry / Entries in the .git/config File with .gitmodules.

		git submodule update --recursive [-- <local-submodule-path>] - Updates the Local Copies and Contents of the Submodule(s) to the matching Commits.
			--init 				- Initialize .git/config for the Submodule(s) if they are not already present in the Local Copy.

			--remote 			- Updates the Local Copies and Contents of the Submodule(s) to be of their latest Commits.

			--merge 			- Merge in any Upstream Changes with Local Changes made to the Submodule(s).
			--rebase			- Rebase Local Changes on top of Upstream Changes made to the Submodule(s).

		git submodule status	- Reports the Status of all Local Submodules.

		git submodule foreach '<git-command>' - Execute a Git Command on each Submodule.
			Tip: Useful <git-command>s:
				git stash
				git diff

		git deinit -- [<local-submodule-path> ...] - Unregister the specified Submodules locally. 

		git push --recurse-submodules=on-demand - Push Local Changes to Submodules to the Upstream.

		git mv <folder-name> <new-folder-name> - Change the name of a Folder.
			Note: Windows and Mac Filesystems will not recognize Case-Sensitive changes, but Git will.
				git mv <folder-name> <temp> && git mv <temp> <folder-name>

		git diff [HEAD] <file> <file> - See differences between checked out <file> and Local Working Copy <file>.

		git add	<file> ...		- Specify changed <file>s to be added into the Local Staging List.
			--patch 			- Interactively chose which part of <file> should be added.
			-e					- Specify the parts of changed <file>s should be added into the Local Staging List.

			-A 					- Specify that all new, modified or deleted files be added.
			--ignore-removal 	- Specify that only new or modified files be added.
			-u 					- Specify that only modified or deleted files be added.

			.					- <file> specification to add all new, modified or deleted files.

		git rm <file> ...		- Specify <file>s to be removed within the Local Branch.
			-r					- Allows for contents within a directory to be recursely removed.
			-n					- Preview removals.

		git checkout -- . 		- Reset all files not in the Local Staging List in the current Directory.

		git reset -- <file> ... - Specify <file>s to be removed from the Local Staging List.
			--hard				- Reset all uncommited Local Changes to files.

		git checkout HEAD -- . 	- Reset all Local Changes to files in the current Directory.

		git clean 				- Remove untracked files from the current Directory.
			-n 					- Preview removals.
			-f 					- Execute removals.

			-fd 				- Remove untracked Directories.
			-fX					- Remove ignored files.

		git stash <option> -- <file> - Save Local Working Copy Changes.
			stash@{<index>}		- Naming Convention of Stashes, with <index> 0 being the latest.

			-m "<stash-message>" - Optional Stash Label.
			-u					- Also include untracked files in the Stash.

			push - Option to additionally revert back Local Working Copy to HEAD ; push as in push and pop.

			list 				- Option to view all Stashes.

			show stash@{<index>} - Option to show differences between Stash contents and Commit contents for which the Stash was created.
			apply				- Option to apply Stash onto current Local Working Copy.
			pop stash@{<index>}	- Option to apply Stash onto current Local Working Copy, and to delete the Stash ; pop as in push and pop.
			branch <branch> stash@{<index>} - Pop the Stash onto a Local Branch rooted at the Commit at which the Stash was created.

			drop stash@{<index>} - Option to delete a specified Stash.
			clear				- Option to delete all Stashes.

		git commit -m "<commit-message>" - Commit the changes of the <file>s in the Local Staging List to the Local Branch.
			-a 					- Automatically stages all modified Files with the Commit.
		
		git commit --amend --no-edit - Add in changes to the most recent Commit in the Local Staging List.
		git commit --amend -m "<commit-message>" - Change the message of the most recent Commit. Note: Staged Changes will be included in this commit.

		git rebase -i <earliest-hash-of-commit-to-amend>~1 - Technique to change one or more Commits prior to the most recent Commit of the checked out Local Branch.
		git rebase -i HEAD~<number-of-commits-in-branch> - Technique to adjust Commits in checked out Local Branch.
			Amending: Change the operation to be performed on the row from 'pick' to 'e'.
			Rewording: Change the operation to be performed on the row from 'pick' to 'r'.

			Sorting:
				dd to Cut a Line.
					k to Move Up a Line.
					j to Move Down a Line.
					p to Paste a Line below the current Line.
					P to Paste a Line above the current Line.

			Squashing: Change the operation to be performed on the row from 'pick' to 's'.

			Deleting: Just remove the Line of the Commit from the List.

		git reflog				- Show a list of when Branches and other references were updated in the Local Repository.
		git reset --hard "HEAD@{<number-of-moves>}" - Revert Local Branch to the point before the Branch Ref was updated.
			Tip: Useful for undoing a botched rebase.

		git reset HEAD~<number-of-commits> - Revert Local Branch by <number-of-commits>.
			--soft 				- Keep accumulated changes from <number-of-commits> in the Local Staging List.
			--hard				- Discard accumulated changes from <number-of-commits>.

		git reset --hard <repo-url-alias>/<remote-branch> - Revert current Local Branch to match state of the one on the Remote Repository <repo-url-alias>.

		git rebase <commit-hash> - Shift (Reapply) all Commits in current Local Branch onto <commit-hash>.
		git rebase --onto <desired-branch-base> <old-branch-base> [<branch>] - Shift (Reapply) all Commits in <branch> to <desired-branch-base>.
			Tip: If trying to rebase multiple Local Branches in the form of a linear Tree, just rebase the latest Local Branch, then slowly reset the references of the other Local Branches to point at the new Commits.

		git branch -f <branch> <commit-hash> - Change the HEAD of <branch> to be the <commit-hash>.

		git push <repo-url-alias> <branch> - Push the changes of the checked out Local Branch to the specified Remote Branch.

		git push <repo-url-alias> <commit-hash>:refs/heads/<branch> - Add the commits from the currently checked out Local Branch, up until <commit-hash>, to the Remote Repository <repo-url-alias> as a Remote Branch <branch>.
		git push -u <repo-url-alias> <branch> - Add the currently checked out Local Branch (with changes) to the Remote Repository <repo-url-alias> as a Remote Branch <branch>.

		git push -d <repo-url-alias> <branch> - Remove a Branch on the Remote Repository.

		git revert <commit-hash> - Revert a Commit (with another Commit that nullifies the changes of the Target Commit).

		git tag 				- Mark an important Commit with a local reference.
			-a <tag> -m <tag-annotation> - Create an annotated local reference for the Commit.
			-d <tag>			- Delete a specified local reference.

		git push <repo-url-alias> <tag>	- Push the created Tag to the Remote Repository.
		git push <repo-url-alias> :/refs/tags/<tag> - Push the locally changed Tag to the Remote Repository.
		git push <repo-url-alias> -- tags - Push all locally changed Tags to the Remote Repository.

		git log					- See information about past Commits, with the first Commit being the most recent.
			--oneline			- See summarized version of each past Commit.

		git log --all --decorate --oneline --graph - Observe Commit history of the current Local Repository as a graph.
		
		git bisect				- Utility that uses a Binary Search Algorithm to find a specific Commit.
			start				- Starts a Searching Session.
			old	<commit-hash>	- Specify the "left" Boundary of the Binary Search via a Commit Hash.
			new	<commit-hash>	- Specify the "right" Boundary of the Binary Search via a Commit Hash.

			old					- Specify that the Binary Search should continue within the "right" Section.
			new					- Specify that the Binary Search should continue within the "left" Section.

			reset				- Stop the Session and return to HEAD.
	
