Security:
	Abbreviations:
		SSH:					Secure SHell.

		MITM:					Man-In-The-Middle.
		XSS:					Cross-Site Scripting.
		CSRF:					Cross-Site Request Forgery.

		SSL:					Secure Sockets Layer.
		TLS:					Transport Layer Security.

		HTTPS:					HyperText Transfer Protocol Secure.

		JS:						Javascript.
	
	Concepts:
		Cryptography:			The theory and practice of techniques for Secure Communication.
		(Cryptographic) Key:	Information that determines the Output of a Cryptographic Algorithm.
		Key Stretching:			The Process of strengthening a Weak Key by increasing the amount of Resources used to compute it.

		Plaintext:				Information whose meaning is immediately readable and understandable.

		Hashing:				The process of generating some preferably unique Value from a Plaintext via some one-way Mathematical Hashing Function.
		Hash:					The resultant Value that comes about from Hashing a Plaintext.
		Salt:					An additional Value that is used in the Hashing Process in some way to alter the resultant Hash.
		
		Reduction Function:		A Function that has a swapped Domain and Range with its corresponding Hashing Function. It is NOT the inverse of the Hashing Function.
		Rainbow Table:			A Data Structure that stores pre-computed mappings between Plaintexts and corresponding derived Hashes under one Hashing Configuration.

		Cross-Site:				Something that involves multiple Websites.
		
		Session Hijacking:		Take over the identity of another User, from the perspective of an Application, for the purposes of malicious activity.

		Cipher:					A mechanism to transform Information between a Readable Format and a Disguised Variant that hides its meaning. May include the use of a Key to allow a piece of Information to have mappings with different Disguised Variants.
		Ciphertext:				Plaintext that has been transformed in some way via a Cipher to hide its meaning.

		Encryption:				The process of transforming Plaintext into a Ciphertext form.
		Decryption:				The process of transforming Ciphertext back into its Plaintext form.

		Symmetric Cryptography:	Involves the use of the same Key between Encryption and Decryption.
		Asymmetric Cryptography: Involves the use of different Keys between Encryption and Decryption.

		Public Key:				A Key for a Cipher that is freely accessible.
		Private Key:			A Key for a Cipher that is a secret.
	
		Digital Signature:		A Hash of some Data Encrypted by the signer's Private Key.
		Digital Certificate:	A Data Structure that minimally contains a Public Key, and the Public Key's Digital Signature, signed by some trusted entity.

		Certificate Authority: 	A trusted entity that verifies Public Keys.
		Root Certificate: 		A Digital Certificate that was directly signed by a Certificate Authority. The corresponding Public Key is pre-installed in Client Devices.
		Intermediate Certificate: A Digital Certificate that was signed via the corresponding Private Key of the 'parent' Public Key within a Certificate (Root or another Intermediate). These are employed to provide additional layers of separation from the Certificate Authority's Private Key.
		Leaf Certificate: 		A Digital Certificate that was signed via the corresponding Private Key of the 'parent' Public Key within an Intermediate Certificate. These are intended to contain the Public Keys of individual Servers.

	Details:
		Hashing:
			Hash Functions are typically one-way Mathematical Functions, with no corresponding Inverse Function.
				To achieve the no proper Inverse behaviour, they tend to lose information as they convert Input to Output.

				Algorithms:
					MD5
					SHA256

			Rainbow Tables:
				Unoptimized Rainbow Tables are simply Lookup Tables that store all possible mappings between Plaintext Values and their corresponding Hashes.

				Lookup Tables can be made more Storage Efficient via a Reduction Function. Rather than storing all Plaintext Values and their corresponding Hashes, it can:
					1. Ascertain a random valid starting Input.
					2. Obtain the corresponding Hash for the Input.
					3. Derive another valid Input from the resultant Hash through the Reduction Function.
					4. Repeat Steps 2-3 several times, then only store the mapping between the starting Input and the final Hash.

					In this scenario, the Lookup Table stores 'Hash Chains' instead of simple mappings between Plaintext Inputs and corresponding Hashes, which reduces the amount of stored Information.

				The size of a Table is inversely proportional to the amount of time needed to process a particular Hash and the corresponding Plaintext Input.

			Secure Password Storage:
				Hashing can be used to safely store User Passwords. Whenever a User submits a Password, Hashing that Plaintext Password would disguise it. Applications would then only store or verify against the Hashes, not the Plaintext Passwords.
					Since the Hashing Function used in the process is one-way, the stored Hash is not meant to be converted back to its Plaintext form, offering some protection of the original User Passwords should the Hashes be made public.

				The issue is that for most Hash Functions, there already exists a corresponding Rainbow Table that tracks a listing of commonly-used Passwords and their corresponding resultant Hashes under each Hash Function. If an untrusted source obtains the stored Hashes as they are, a Rainbow Table might be able to map that Hash back to the original Plaintext form.

				The best practice to protect against Rainbow Tables is to use both a Salt Value and a Key Stretching Function.

				A (potentially User-Specific) Salt is added to the original Password and Hashed with it, so that two Hashes of the same Plaintext with the same Hashing Function but with different Salts will produce different Hashes. The Salt can be used by just concatenating it and the Password together, or within a Keyed Hash Function like HMAC-SHA256 with the Salt as the Key. Then pass the output through a Key Stretching Function like PBKDF2 or bcrypt, and store or verify that result as the final Password Hash.

				As a result, the User Database for the Application would store the Username, the unmodified Salt for that User, and the final Password Hash. 
					The Salts make it so that one Rainbow Table cannot immediately break all stored Password Hashes; it does not matter that the Salts are in Plaintext.

		Attacks:
			Injection Attack: The supplication of Untrusted Input to an Application, which gets processed by an Interpreter as part of a Application Command or Query, altering the course of execution for the Application and potentially leading it to do malicious activity.
				XSS: Cross-Site JS Injection Attack.
					Scenario: If User Input is rendered to HTML, the User can insert <script> </script> Tags to allow for unwarranted execution of JS, since <script> </script> Tags can be placed anywhere within the DOM Tree. The Cross-Site nature can occur if the JS is used to manipulate the User's Cookies derived from other Applications.
			
			CSRF: Cross-Site forgery of a valid User Request.
				Scenario: If a User is logged into an Application, and clicks on something in another Application that triggers the submission of a forged valid User Request for the first Application.

		Cryptography:
			Asymmetric Cryptography:
				Communication Modes:
					Confidentiality: If a Public Key is used for Encryption and the corresponding Private Key is used for Decryption, the Encrypted Information would only be viewable by the owner of the Private Key.
					Authenticity: If a Private Key is used for Encryption and the corresponding Public Key is used for Decryption, the Encrypted Information could only have been created by the owner of the Private Key.

				Algorithms:
					Diffie-Hellman Key Exchange.
					RSA.

				SSL: Older Cryptographic Transport Layer Protocol used for communication.
					Primarily established to prevent MITM Attacks.

				TLS: Current Cryptographic Transport Layer Protocol used for communication.
					The successor to SSL v2.0.

					TLS Handshake:
						For a Server to support TLS, they must first register their Public Key with a known Certificate Authority, which will create a Leaf Certificate (and one or more Intermediate Certificates) containing the Server's Hashed Public Key. The Certificate Authority must be well-known enough such that it owns a Root Certificate pre-installed on the Client's System.

						When a Client initiates a connection to the Server via HTTPS from the Browser, the Server sends the Digital Certificates, as well as its own Public Key, to the Client upon first contact as part of the Handshake. The Client would then use the indicated pre-installed Certificate Authority's Public Key to Decrypt the (Intermediate Certificates, chaining up to the) Leaf Certificate and obtain the Hashed Server's Public Key within. The Hashed Server's Public Key is then used to check the Server's Public Key that was sent.

						If the Server's Public Key cannot be verified (eventually) via a pre-installed Root Certificate, the Browser would warn the User.
						
						Once the sent Server's Public Key is verified, it is then used to Encrypt information meant for the Server only. Usually this is only for agreeing on some mechanism for Symmetric Cryptography used in further communication between the two, as Asymmetric Cryptography is less performant.

				HTTPS: Cryptographic Application Layer Protocol used for communication.

