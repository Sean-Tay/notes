Azure
	Abbreviations:
		TCO:				Total Cost of Ownership.

		AD:					Active Directory.
		ARM:				Azure Resource Manager.

		SAS:				Shared Access Signature.
	
	Description:
	
	Resources:
	
	Concepts:
		TCO Calculator: 	Compare the cost of hosting your Service / System in Azure vs. On-Prem.
		Pricing Calculator: Estimate the cost of using various Azure Resources with different features / levels of Azure support.
		Azure Advisor:		Utility to assist in detecting underutilized Resources and ways to optimize Services, in Real-Time.

		Azure Arc:			Utility to help Organizations manage their Cloud Environment. Supports several Cloud Deployment Models.
		Azure VMware Solution: Migrate or extend existing VMware environments provided by other Cloud Providers to Azure.

		Serivce Principal:	Azure AD account whose metadata (i.e. Client ID, Secret) is managed by Users and not Azure. This Account can be used anywhere outside of Azure.
		Managed Identity:	A special type of Service Principal where Azure manages the metadata as well. This Account can only be used by other Azure-managed services.
			System Assigned: Each SAMI is attached to one Azure Resource (i.e. lifetime of the Azure Resource).
			User Assigned: 	Independent lifecycle, can be shared across Azure Resources.

		Resource Group:		A logical container to contain Azure Resources.

		Event Hub:			Analogous to Kafka Event Queues, these expose an Event 'Pull' Model for Consumers.
			Requests:		Number of API Requests made.
			Messages:		Number of API Requests that put actual Events into the Event Hub.

		Event Grid:			Router for generated Events; usually to 'Push' Events from their Source to an Event Hub or a Webhook. Note: Has to be in the same Resource Group as the Event Source.
			System Topic: 	Designation for Events produced by other Azure Services.

		Storage:			Provides Blob Storage capability.
			Storage Account: Contains one or more Storage Containers. In the Kotlin SDK, this is referenced via BlobServiceClientBuilder.
			Storage Container: Contains one or more Blob Files. In the Kotlin SDK, this is referenced via BlobContainerClientBuilder, whilst individual Blobs are referenced via BlobClientBuilder.
				Block Blob:	A collection of one or more data Blocks. Default Blob Type.
				Page Blob: 	A collection of 512-Byte Pages optimized for random read and write operations.
				Append Blob: Similar to a Block Blob, except Blocks can only be appended to the Blob. Each Block is also much smaller than the Blocks in a Block Blob.

		ARM Template:		Specifies configuration of specific Azure Resources.
	
	Details:
		Azure Well-Architected Framework: 
			For a given System, it should:
				Be Resilient, Available, and Recoverable.
				Be as Secure as needed.
				Support responsible development and operations.
				Accomplish its purpose within acceptable timeframes.
				Deliver a sufficient return on investment.

		Cost of Azure Services:
			Tools:
				TCO Calculator
				Pricing Calculator
				Azure Advisor
				Spending Limits: Specify thresholds to avoid OpEx overruns.

			Factors:
				Resource Type
				Consumption: Pay-as-you-go or Reserved "Contract" Pricing.
				Maintenance
				Geography: Cost of Labor, Power, Taxes vary per Region.
				Network Traffic: Inbound Data Transfers to Azure Datacenters are free, whereas Outbound Data Transfers from Azure Datacenters are priced based on Billing Zones.
				Subscription Type
				Azure Marketplace: Allows purchasing of Azure-based Solutions and Services from Third-Party Vendors - additional costs incurred from leveraging on the Third Party's skills and expertise for their Solution.

				Licensing

		ARM Template Syntax: https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax
			<name>.params.json: File that defines arguments to be passed into the deploy.json.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentParameters.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": "<argument>"
						},

						// ...
					}
				}

			<name>.deploy.json: File that specifies how Microsoft Resources should be deployed, and the possible parameters for the deployment.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentTemplate.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": {
								"type": "<parameter-type>", // e.g. "string"
								"defaultValue": "<default-value>",
								"metadata": {
									"description": "<parameter-documentation>",
								}
							}
						},

						// ...
					},
					"variables": {
						"<variable-name>": "<variable-value>", // "['<value>']" for computed values
							// Azure Template Functions:
								// concat('<string>', ...)
								// parameters('<parameter-name>')
								// variables('<variable-name>')
					},
					"resources": [
						{
							// For Standalone Resources:
							"type": "<azure-resource-provider-namespace>/<azure-resource-type>",
							"apiVersion": "<api-version>",
							"name": "<resource-custom-name>",
							"location": "<geo-location>", // "[resourceGroup().location]"

							"properties": {
								// Specifies the actual configuration of the <azure-resource-type>

								// ...
							},

							// ...
						},
						{
							// For Nested Resources (i.e. Resources that have a Parent Resource):
							"type": "<parent-type>/<child-type>",
							"name": "[concat('<parent-name>', '/', '<child-name>')]",
							"dependsOn": [
								"[resourceId('<parent-type>', '<parent-name>')]"
							],

							// ...
						}

						// ...
					],

					// ...
				}
	
	Commands:
		az deployment group validate # Deploy the Resources defined in the <template-file>.json with the specified configuration Parameters. If the deployment succeeds, it should be listed under the Resource Group "deployments" within the Azure Web Portal.
			--resource-group <resource-group> # Specify the Resource Group that the deployment should execute under.
			--template-file <name>.deploy.json
			--parameters <name>.params.json
			<parameter>="<value>"
	
