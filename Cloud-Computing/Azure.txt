Azure
	Abbreviations:
		TCO:				Total Cost of Ownership.

		AD:					Active Directory.
		ARM:				Azure Resource Manager.

		SAS:				Shared Access Signature.
	
	Description: 			Azure is a continually expanding set of Cloud Services (some unique to Cloud) to assist in rapidly innovating solutions to meet Business Application Goals.
	
	Resources:
	
	Concepts:
		// Cost Management:
			TCO Calculator: Compare the cost of hosting your Service / System in Azure vs. On-Prem.
			Pricing Calculator: Estimate the cost of using various Azure Resources with different features / levels of Azure support.
			Azure Advisor:	Evaluates Azure Resources and makes recommendations to improve Reliability, Security, Performance, Operational Excellence, and ultimately reduce costs by detecting underutilized Resources.
			Microsoft Cost Management: Quickly check Azure Resource costs, create Alerts based on Resource spend, and create Budgets that can be used to automate Resource Management.
				Cost Analysis: View current and projected forecast on Azure Resource costs.

				Cost Alerts: View all existing Alerts that can show up on Microsoft Cost Management. Alerts are also sent via email in some cases.
					Budget Alerts: Triggered when either pre-defined Cost or Usage Thresholds are exceeded.
					Credit Alerts: Triggered when 90% or 100% of an Enterprise's Azure Credit Balance is used.
					Department Spending Quota Alerts: Triggered when Department Spending reaches a fixed threshold of the Quota.

				Budgets: 	Set a spending limit for Azure Resources, based on a Subscription, Resource Group, Service Type, etc. A Budget Alert is also created as part of creating a Budget. Optionally, Budgets can be tweaked to automatically suspend or modify Azure Resources when the Budget is reached.

		// Governance and Compliance:
			Microsoft Service Trust Portal: Tool that provides information about Microsoft Security, Privacy and Compliance practices.
			Microsoft Purview: A suite of Governance, Risk and Compliance Solutions for Application Data. Able to handle Data managed On-Prem, Multi-Cloud and from SaaS sources.
			Azure Policy: 	Prevents creation of / Highlights existing Azure Resources that deviate from pre-defined Compliance Policies. Can be set at a Resource, Resource Group or Subscription level, with higher levels applying the Policies to all entities within them, and has built-in Policy and Initiatives pertaining to Storage, Networking, Compute, Security Center and Monitoring.
				Azure Policy Initiative: A group of Azure Policies.
			Resource Lock:	Locks on Resources, Resource Groups or Subscriptions that prevent them from being deleted or updated.

		// Managing and Deploying Azure Resources:
			Azure Portal:	Application that provides a Web UI to manage Azure Resources.
				Azure Cloud Shell: Provides a Bash or Powershell Environment to execute Azure Commands.
			Azure Arc:		Utility to help Organizations manage their Cloud Environment. Supports several Cloud Deployment Models, such as Hybrid or Multi-Cloud, for Servers, VMs, Kubernetes Clusters, SQL Server and Azure Data services.
			Azure Resource Manager: Deployment and Management Service for Azure.
				ARM Template: Specifies configuration of Cloud Resources (Azure / Third-Party / On-Premises) via a declarative JSON format to faciliatate Infrastructure as Code.

		// Monitoring Tools:
			Azure Service Health: Shows the status of global Azure Infrastructure and owned Azure Resources.
				Azure Status: Status of Azure (owned or otherwise) in general.
				Service Health: Like Azure Status, but focused on the Azure Services and Regions that the User has Resources deployed in (but not on the User's actual Resources).
				Resource Health: Focuses on User's actual Resources specifically.
			Azure Monitor:	Platform for collecting and analyzing log / metric data from On-Prem or Cloud (Azure or otherwise) Resources, and visualizes / acts on the results of the analysis.
				Azure Log Analytics: Tool where queries on collected log / metric data from Azure Monitor can be done to faciliatate Data Analysis.
				Azure Monitor Alerts: Alerts / attempts corrective action when Azure Monitor detects a threshold being crossed, specified by pre-configured conditions.
				Application Insights: Monitors Web Applications hosted on On-Prem or Cloud (Azure or otherwise), but the Web Application needs to interact with the Insights SDK / Insights Agent. Examples of Metrics collected include Request Rates, Response Times, Page Views, Load Performance etc.

		// Azure Infrastructure:
			// Physical Infrastructure:
				// Location:
					Availability Zone: Contains one or more Azure Data Centers, each with dedicated Power, Cooling and Networking Infrastructure. Availability Zones are primarily meant for VM, Managed Disk, Load Balancer, and SQL Database Services.

					Azure Region:
						Availability Zone Supported: Consists of three or more Availability Zones, each connected to another by high capacity, fault-tolerant, low latency Network Connections.

						Non-Availability Zone Supported: Azure Regions that were built before the Availability Zone concept was introduced - these sometimes have physical or architectural limitations that prevent the consituent Data Centers from being organized into isolated units.

						Sovereign Region: Regions that are isolated from the main Azure instance (e.g. outside of Azure Geographies), typically used for Compliance-reasons / Government organizations.

					Azure Geography: A discrete market, typically containing at least two or more Azure Regions (i.e. one or more Region Pairs), usually defined by Geopolitical / Country Borders that serves as a fixed Data Residency Boundary.
						Region Pair: Every Azure Region is part of a Region-Pair, with each Region at least 300 miles apart, for redundancy purposes. In an event involving multiple Region-wide outages, Microsoft will prioritize recovery of one Azure Region within each Region Pair (i.e. those that do bi-directional backup; some don't), not both.

				// Azure Service Redundancy Types:
					Zonal Services: Azure Services here are kept within a single Availability Zone for more stringent latency / performance requirements.
					Zone-Redundant Services: Azure Services here are automatically replicated / distributed between multiple Availability Zones within an Azure Region, for higher fault tolerance.
					Non-Regional Services: Global Services that are always available, resilient to Zone-wide and Region-wide Outages.

			// Management Infrastructure:
				// Azure Accounts:
					Microsoft Learn: A sandbox which creates a Subscription within Microsoft Learn Courses for the purpose of temporarily provisioning Azure Resources during Course Exercises. Created Resources get automatically deallocated once the Course Module is completed.

					Account: Contains one or more Azure Subscriptions, tied to a User / Organization.
						Free Account: Free access to popular Azure Products for 12 months, credit to use for 30 days, and access to some Cloud Services that are always free.
						Free Student Account: Free access to certain Azure Services for 12 months, credit to use within 12 months, and access to certain Software Development Tools.

				Management Groups: A logical container to contain multiple Azure Subscriptions. These are nestable, up to 7 levels.
				Subscription: A unit of Azure Resource management, billing and scale.
					Billing Boundary: Azure generates separate billing reports and invoices for each Subscription.
					Access Control Boundary: Useful when enforcing Access Control Policies, which apply at the Subscription-level (i.e. segregate Department Usage, or Environments).

				Resource Group:	A logical container to contain Azure Resources. These are not nestable.

				Tags:		Allows organization of Azure entities in custom ways, with attached metadata for more information. Resources do not inherit Tags from Subscriptions and Resource Groups.

				Serivce Principal: Azure AD account whose metadata (i.e. Client ID, Secret) is managed by Users and not Azure. This Account can be used anywhere outside of Azure.
				Managed Identity: A special type of Service Principal where Azure manages the metadata as well. This Account can only be used by other Azure-managed services.
					System Assigned: Each SAMI is attached to one Azure Resource (i.e. lifetime of the Azure Resource).
					User Assigned: Independent lifecycle, can be shared across Azure Resources.

		// Compute
			Azure VMWare:	IaaS-scoped Cloud VM Solution.
				Scale Set: 	Utility to automatically create and manage a Cluster of identical VMs with Load Balancing and Elasticity.

				Availability Set: Spreads groups of Azure VMs amongst Physical Hardware in different Fault and Update Domains, within one Location.
					Fault Domain: VMs within the same Fault Domain share Storage, Network, and Power, similar to a Server Rack in a Data-Center.
					Update Domain: VMs within the same Update Domain can be rebooted at the same time. Only one Update Domain within an Availability Set is rebooted at a time, ensuring continued operation of the Availability Set during planned maintenance.

				Custom Script Extension: Downloads and runs scripts on Azure VMs for post-deployment configuration, software installation, or some other management task.

				Azure VMware Solution: Migrate or extend existing VMware environments provided by other Cloud Providers to Azure.
					Azure Auto-Scale: Horizontal Scaling (w.r.t VMs) for hosted Applications running on VMs.

				Azure Virtual Desktop: Desktop and Application Virtualization Service on the Cloud.
			
			Azure Containers: PaaS-scoped Container / OS-Virtualization Solution.
				Azure Container Instances: Service that runs Containers that are uploaded.
				Azure Container Apps: Similar to Azure Container Instances, except with extra benefits such as the ability to incorporate Load Balancing and Scaling.
				Azure Kubernetes Service: Container Orchestration Service.

			Azure Functions: Serverless Compute Solution, meant for quick (i.e. a few seconds) operations that do not require an active VM / Container to be running.
				Durable Functions: Azure Functions with persistent State that is passed via context when the Function is called.

			Azure App Service: Build and host Web Apps, API Apps, WebJobs (i.e. Background Jobs), and Mobile Back-Ends with Elasticity, High Availablity and CICD support without worrying about Infrastructure.

		Azure Event Hub:	Analogous to Kafka Event Queues, these expose an Event 'Pull' Model for Consumers.
			Requests:		Number of API Requests made.
			Messages:		Number of API Requests that put actual Events into the Event Hub.

		Azure Event Grid:	Router for generated Events; usually to 'Push' Events from their Source to an Event Hub or a Webhook. Note: Has to be in the same Resource Group as the Event Source.
			System Topic: 	Designation for Events produced by other Azure Services.

		Azure Blob Storage:	Provides persistent Data Storage capability.
			Storage Account: Contains one or more Storage Containers. In the Kotlin SDK, this is referenced via BlobServiceClientBuilder.
			Storage Container: Contains one or more Blob Files. In the Kotlin SDK, this is referenced via BlobContainerClientBuilder, whilst individual Blobs are referenced via BlobClientBuilder.
				Block Blob:	A collection of one or more data Blocks. Default Blob Type.
				Page Blob: 	A collection of 512-Byte Pages optimized for random read and write operations.
				Append Blob: Similar to a Block Blob, except Blocks can only be appended to the Blob. Each Block is also much smaller than the Blocks in a Block Blob.
		Azure Files:		Provides synchronization between On-Prem Storage and Blob Storage.
	
	Details:
		Microsoft Cloud Adoption Framework for Azure: SPRAGM
			S: Define a Strategy
			P: Make a Plan
			R: Ready your Organization
			A: Adopt the Cloud
			G: Govern
			M: Manage

		Azure Well-Architected Framework: 
			For a given System, it should:
				Be Resilient, Available, and Recoverable.
				Be as Secure as needed.
				Support responsible development and operations.
				Accomplish its purpose within acceptable timeframes.
				Deliver a sufficient return on investment.

		Cost of Azure Services:
			Tools:
				TCO Calculator
				Pricing Calculator
				Azure Advisor
				Spending Limits: Specify thresholds to avoid OpEx overruns.

			Factors:
				Resource Type
				Consumption: Pay-as-you-go or Reserved "Contract" Pricing.
				Maintenance
				Geography: Cost of Labor, Power, Taxes vary per Region.
				Network Traffic: Inbound Data Transfers to Azure Datacenters are free, whereas Outbound Data Transfers from Azure Datacenters are priced based on Billing Zones.
				Subscription Type
				Azure Marketplace: Allows purchasing of Azure-based Solutions and Services from Third-Party Vendors - additional costs incurred from leveraging on the Third Party's skills and expertise for their Solution.

				Licensing

		ARM Template Syntax: https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax
			<name>.params.json: File that defines arguments to be passed into the deploy.json.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentParameters.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": "<argument>"
						},

						// ...
					}
				}

			<name>.deploy.json: File that specifies how Microsoft Resources should be deployed, and the possible parameters for the deployment.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentTemplate.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": {
								"type": "<parameter-type>", // e.g. "string"
								"defaultValue": "<default-value>",
								"metadata": {
									"description": "<parameter-documentation>",
								}
							}
						},

						// ...
					},
					"variables": {
						"<variable-name>": "<variable-value>", // "['<value>']" for computed values
							// Azure Template Functions:
								// concat('<string>', ...)
								// parameters('<parameter-name>')
								// variables('<variable-name>')
					},
					"resources": [
						{
							// For Standalone Resources:
							// Define Conditional Logic to determine if this Resource ultimately gets deployed
							"condition": "[not(empty( ... ))]",

							"type": "<azure-resource-provider-namespace>/<azure-resource-type>",
							"apiVersion": "<api-version>",
							"name": "<resource-custom-name>",
							"location": "<geo-location>", // "[resourceGroup().location]"

							"properties": {
								// Specifies the actual configuration of the <azure-resource-type>

								// ...
							},

							// ...
						},
						{
							// For Nested Resources (i.e. Resources that have a Parent Resource):
							"type": "<parent-type>/<child-type>",
							"name": "[concat('<parent-name>', '/', '<child-name>')]",
							"dependsOn": [
								"[resourceId('<parent-type>', '<parent-name>')]"
							],

							// ...
						}

						// ...
					],

					// ...
				}
	
	Commands:
		az interactive # Initialize several IDE features such as Auto-completion and Command Documentation.

		az deployment group validate # Deploy the Resources defined in the <template-file>.json with the specified configuration Parameters. If the deployment succeeds, it should be listed under the Resource Group "deployments" within the Azure Web Portal.
			--resource-group <resource-group> # Specify the Resource Group that the deployment should execute under.
			--template-file <name>.deploy.json
			--parameters <name>.params.json
			<parameter>="<value>"
	
