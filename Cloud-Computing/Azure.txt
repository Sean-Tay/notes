Azure
	Abbreviations:
		TCO:				Total Cost of Ownership.

		AD:					Active Directory.
		ARM:				Azure Resource Manager.

		SAS:				Shared Access Signature.
	
	Description: 			Azure is a continually expanding set of Cloud Services (some unique to Cloud) to assist in rapidly innovating solutions to meet Business Application Goals.
	
	Resources:
	
	Concepts:
		// Cost Management:
			TCO Calculator: Compare the cost of hosting your Service / System in Azure vs. On-Prem.
			Pricing Calculator: Estimate the cost of using various Azure Resources with different features / levels of Azure support.
			Azure Advisor:	Evaluates Azure Resources and makes recommendations to improve Reliability, Security, Performance, Operational Excellence, and ultimately reduce costs by detecting underutilized Resources.
			Microsoft Cost Management: Quickly check Azure Resource costs, create Alerts based on Resource spend, and create Budgets that can be used to automate Resource Management.
				Cost Analysis: View current and projected forecast on Azure Resource costs.

				Cost Alerts: View all existing Alerts that can show up on Microsoft Cost Management. Alerts are also sent via email in some cases.
					Budget Alerts: Triggered when either pre-defined Cost or Usage Thresholds are exceeded.
					Credit Alerts: Triggered when 90% or 100% of an Enterprise's Azure Credit Balance is used.
					Department Spending Quota Alerts: Triggered when Department Spending reaches a fixed threshold of the Quota.

				Budgets: 	Set a spending limit for Azure Resources, based on a Subscription, Resource Group, Service Type, etc. A Budget Alert is also created as part of creating a Budget. Optionally, Budgets can be tweaked to automatically suspend or modify Azure Resources when the Budget is reached.

			Azure Reservations: Reserve the Resource for a longer period with a set price in advance that is cheaper than Pay-as-you-Go rates.

		// Governance and Compliance:
			Microsoft Service Trust Portal: Tool that provides information about Microsoft Security, Privacy and Compliance practices.
			Microsoft Purview: A suite of Governance, Risk and Compliance Solutions for Application Data. Able to handle Data managed On-Prem, Multi-Cloud and from SaaS sources.
			Azure Policy: 	Prevents creation of / Highlights existing Azure Resources that deviate from pre-defined Compliance Policies. Can be set at a Resource, Resource Group or Subscription level, with higher levels applying the Policies to all entities within them, and has built-in Policy and Initiatives pertaining to Storage, Networking, Compute, Security Center and Monitoring.
				Azure Policy Initiative: A group of Azure Policies.
			Resource Lock:	Locks on Resources, Resource Groups or Subscriptions that prevent them from being deleted or updated.

		// Managing and Deploying Azure Resources:
			Azure Portal:	Application that provides a Web UI to manage Azure Resources.
				Azure Cloud Shell: Provides a Bash or Powershell Environment to execute Azure Commands.
			Azure Arc:		Utility to help Organizations manage their Cloud Environment. Supports several Cloud Deployment Models, such as Hybrid or Multi-Cloud, for Servers, VMs, Kubernetes Clusters, SQL Server and Azure Data services.
			Azure Resource Manager: Deployment and Management Service for Azure.
				ARM Template: Specifies configuration of Cloud Resources (Azure / Third-Party / On-Premises) via a declarative JSON format to facilitate Infrastructure as Code.

				Azure Blueprint: A collection of one or more ARM Templates.

		// Monitoring Tools:
			Azure Service Health: Shows the status of global Azure Infrastructure and owned Azure Resources.
				Azure Status: Status of Azure (owned or otherwise) in general.
				Service Health: Like Azure Status, but focused on the Azure Services and Regions that the User has Resources deployed in (but not on the User's actual Resources).
				Resource Health: Focuses on User's actual Resources specifically.
			Azure Monitor:	Platform for collecting and analyzing log / metric data from On-Prem or Cloud (Azure or otherwise) Resources, and visualizes / acts on the results of the analysis.
				Azure Log Analytics: Tool where queries on collected log / metric data from Azure Monitor can be done to facilitate Data Analysis.
				Azure Monitor Alerts: Alerts / attempts corrective action when Azure Monitor detects a threshold being crossed, specified by pre-configured conditions.
				Application Insights: Monitors Web Applications hosted on On-Prem or Cloud (Azure or otherwise), but the Web Application needs to interact with the Insights SDK / Insights Agent. Examples of Metrics collected include Request Rates, Response Times, Page Views, Load Performance etc.

		// Azure Infrastructure:
			// Physical Infrastructure:
				// Location:
					Availability Zone: Contains one or more Azure Data Centers, each with dedicated Power, Cooling and Networking Infrastructure. Availability Zones are primarily meant for VM, Managed Disk, Load Balancer, and SQL Database Services.

					Azure Region: A grouping of Availability Zones, such that the total Round-Trip Time between them is under 2ms.
						Availability Zone Supported: Consists of three or more Availability Zones, each connected to another by high capacity, fault-tolerant, low latency Network Connections.

						Non-Availability Zone Supported: Azure Regions that were built before the Availability Zone concept was introduced - these sometimes have physical or architectural limitations that prevent the consituent Data Centers from being organized into isolated units.

						Sovereign Region: Regions that are isolated from the main Azure instance (e.g. outside of Azure Geographies), typically used for Compliance-reasons / Government organizations.

					Azure Geography: A discrete market, typically containing at least two or more Azure Regions (i.e. one or more Region Pairs), usually defined by Geopolitical / Country Borders that serves as a fixed Data Residency Boundary.
						Region Pair: Every Azure Region is part of a Region-Pair, with each Region at least 300 miles apart, for redundancy purposes. In an event involving multiple Region-wide outages, Microsoft will prioritize recovery of one Azure Region within each Region Pair (i.e. those that do bi-directional backup; some don't), not both.

				// Azure Service Redundancy Types:
					Zonal Services: Azure Services here are kept within a single Availability Zone for more stringent latency / performance requirements.
					Zone-Redundant Services: Azure Services here are automatically replicated / distributed between multiple Availability Zones within an Azure Region, for higher fault tolerance.
					Non-Regional Services: Global Services that are always available, resilient to Zone-wide and Region-wide Outages.

			// Management Infrastructure:
				// Azure Accounts:
					Microsoft Learn: A sandbox which creates a Subscription within Microsoft Learn Courses for the purpose of temporarily provisioning Azure Resources during Course Exercises. Created Resources get automatically deallocated once the Course Module is completed.

					Account: Contains one or more Azure Subscriptions, tied to a User / Organization.
						Free Account: Free access to popular Azure Products for 12 months, credit to use for 30 days, and access to some Cloud Services that are always free.
						Free Student Account: Free access to certain Azure Services for 12 months, credit to use within 12 months, and access to certain Software Development Tools.

				Management Groups: A logical container to contain multiple Azure Subscriptions. These are nestable, up to 7 levels. Only links up to one Azure Active Directory / EntraID tenant.
				Subscription: A unit of Azure Resource management, billing and scale. Only links up to one Azure Active Directory / EntraID tenant.
					Billing Boundary: Azure generates separate billing reports and invoices for each Subscription.
					Access Control Boundary: Useful when enforcing Access Control Policies, which apply at the Subscription-level (i.e. segregate Department Usage, or Environments), or RBACs.

				Resource Group:	A logical container to contain Azure Resources. These are not nestable.

				Tags:		Allows organization of Azure entities in custom ways, with attached metadata for more information. Resources do not inherit Tags from Subscriptions and Resource Groups.

				Serivce Principal: Azure AD account whose metadata (i.e. Client ID, Secret) is managed by Users and not Azure. This Account can be used anywhere outside of Azure.
				Managed Identity: A special type of Service Principal where Azure manages the metadata as well. This Account can only be used by other Azure-managed services.
					System Assigned: Each SAMI is attached to one Azure Resource (i.e. lifetime of the Azure Resource).
					User Assigned: Independent lifecycle, can be shared across Azure Resources.

		// Compute: In descending order of Complexity:
			Azure VMWare:	IaaS-scoped Cloud VM Solution.
				// Types: Pick the right type for the Workload we want to do on the VM.
					General-Purpose
					Compute Optimized
					Storage Optimized
					Memory Optimized
					GPU Specialist

				// Properties:
					OS Image: Select the base Operating System that will run on the VM. Up to User to configure and maintain further after initial provisioning.

					Scale Set: Utility to automatically create and manage a Cluster of identical VMs with Load Balancing and Elasticity, deploying them across Zones and Fault Domains.

					Availability Set: Spreads groups of Azure VMs amongst Physical Hardware in different Fault and Update Domains, within one Location.
						Fault Domain: VMs within the same Fault Domain share Storage, Network, and Power, similar to a Server Rack in a Data-Center.
						Update Domain: VMs within the same Update Domain can be rebooted at the same time. Only one Update Domain within an Availability Set is rebooted at a time, ensuring continued operation of the Availability Set during planned maintenance.

				// Related Resources:
					Azure Virtual Network Interface (vNIC): Enables an Azure VM to connect to a Virtual Network / Internet, and can have one or more Public / Private IP Addresses assigned to it.

					Azure Disks: Block-Level Storage Virtual Volumes for Azure VMs.

				Custom Script Extension: Downloads and runs scripts on Azure VMs for post-deployment configuration, software installation, or some other management task.

				Azure VMware Solution: Migrate or extend existing VMware environments provided by other Cloud Providers to Azure.
					Azure Auto-Scale: Horizontal Scaling (w.r.t VMs) for hosted Applications running on VMs.

				Azure Virtual Desktop: Desktop and Application Virtualization Service on the Cloud.
			
			Azure Containers: PaaS-scoped Container / OS-Virtualization Solution.
				Azure Container Instances: Service that runs Containers that are uploaded.
				Azure Container Apps: Similar to Azure Container Instances, except with extra benefits such as the ability to incorporate Load Balancing and Scaling.
					// Properties:
						Base Image: The runtime (i.e. Node, Python, Java) / stripped down OS that will be used as the base for the Application Image / final Container Image.

				Azure Kubernetes Service: Container Orchestration Service.
					Management Plane / Control Plane: Kubernetes Components.
					Data Plane: Where the Containers are actually running - represented by Pools of Container Hosts / Nodes in the Azure Subscription, which are built on Azure VM Scale Sets.
						Pod: Can consist of a group of different Containers (i.e. Sidecar Architecture) running different things that support each other / are tightly coupled to one another.
						Node: Runs a group of Pods with a Container Runtime.
						Cluster: A group of Nodes. In Azure, these are implemented via Azure VM Scale Sets.

			Azure App Service: Build and host Web Apps, API Apps, WebJobs (i.e. Background Jobs), and Mobile Back-Ends with Elasticity, High Availablity and CICD support, depending on Programming Language / Framework used.

			Azure Functions: Serverless Compute Solution, meant for Micro / Nano Services (i.e. short-lived operations) that do not require an active VM / Container to be perpetually running.
				Durable Functions: Azure Functions with persistent State that is passed via context when the Function is called.

			Azure Logic Apps: No-code solution for creating flows via independent modules that do certain things.

		// Networking
			Microsoft Backbone: Microsoft's own Private, Global Network Infrastructure used to facilitate communications between different Azure Regions.

			Azure Virtual Network / Azure VNet / Azure VPC: Isolated Network Space within Azure's internal Networking Infrastructure that provides Private IP Addressing and Network Segmentation, to facilitate communication between Azure Resources, On-Prem Entities and Users, within the same Azure Region, spanning across Availability Zones. Defined minimally as a set of internal Private IPv4 Address CIDR Ranges.
				Subnets:	Subdivides a Virtual Private Network further via subdivision of the VNet's Private IP Address Ranges. Microsoft typically reserves 5 IPs per Subnet, 1 for the Gateway and 2 for the DNS, as well as all 0s and all 1s for Network Broadcasts.

				Azure Virtual Network Interface: See under Azure VMs.

				// Connecting different Networks: Any Internal Private IP Address Ranges of the different Networks must not overlap.
					VNet Peering: Connects two Azure VNets together via Microsoft Backbone, avoiding the need for using Gateways.
						Global VNet Peering: Connect two Azure VNets together in different Azure Regions.

					// Gateway: A specialized Network Component running on an Azure VM that serves as a connectivity point between different Networks.
						// Types:
							VPN Gateway: Creates encrypted tunnels between Azure VNet and other Cloud / On-Prem Networks over the Public Internet. At most one per VNet.
								// Connections:
									Point-to-Site Connection: Client Computer utilizes a VPN to connect to the Azure VNet Gateway.
									Site-to-Site Connection: On-Prem / Cloud VPN Device / Gateway to the Azure VNet Gateway.
								
								// Behaviours: To determine which traffic requires encryption:
									Policy-Based: A Policy governing connections between two Networks will determine if encryption is needed, however this is limited (i.e. Static Configuration) and more for legacy support.
									Route-Based: Examines the IP Addresses of Packets to determine which encryption tunnel to send them through. This option is more resilient to Network Topology changes.

							Azure ExpressRoute Gateway: Provides a dedicated connection to an Azure VNet (a.k.a Private Peering) that does not rely on the Public Internet, useful for higher bandwidth / security requirements. At most one per VNet.

							Application Gateway: Allows for inbound HTTP / HTTPs Routing and acts as a HTTP Traffic Load Balancer / Firewall.
							NAT Gateway: Provides outbound internet connectivity for VMs within the Virtual Network.

						// Availability Configurations:
							Active-Passive: Up to 90 seconds of recovery time. Default Availability Configuration when deploying Gateways.
							Active-Active
							ExpressRoute Failover: Failover to a regular VPN Gateway so that connectivity between VNets is not completely shut off.
							Zone-Redundant Gateways: Deploy Gateway instances in each Availability Zone within an Azure Region.

				// Endpoints:
					Service Endpoint: Network Interface meant to link Azure Resources outside of the Azure VNet to Azure Resources within the Azure VNet. These operate at the Subnet-level.
					Private Endpoint: Network Interface which has a Private IP Address within the Address Range of the VNet. This can supersede the role of Service Endpoints, but requires more configuration.

					Public Endpoint: Network Interface with a Public IP Address.

				// Routing:
					Route Tables: Controls how Packets are routed between Subnets.
					Border Gateway Protocol: Works when a Gateway is involved.

				Network Security Group: Acts as a firewall, filtering inbound / outbound Network Traffic based on rules that apply to different Subnets / Network Interfaces (Ports, IP Addresses, Protocols, etc.).

			Azure Firewall: Provides firewall capabilities across multiple VNets.

			Azure ExpressRoute: Used to provide dedicated connectivity to Azure Cloud Services from On-Prem Networks that do not rely on the Public Internet.

			Azure Load Balancer: Non-HTTP Traffic Load Balancer.

			Azure DNS: 		Azure Domain Name Hosting Service (note: not Domain Name Registration Service). Compatible with both Public facing Domains and Private Domains within Azure VNets.

		Azure Storage:
			Storage Account: Unique Namespace for a User's Storage Data, accessible via HTTP or HTTPS. A Storage Account can have multiple Azure Storage Services associated to it.
				// Redundancy Tiers:
					Locally Redundant Storage: Replicates data 3 times within a single Data Center in the Primary Azure Region. Offers 11 9s of durability over a given year.
					Zone Redundant Storage: Replicates data synchronously across 3 Availability Zones in the Primary Azure Region. Offers 12 9s of durability over a given year.
					
					Geo Redundant Storage: Applies Locally Redundant Storage behaviour for both Primary and Secondary Azure Regions in a Region Pair (i.e. data is replicated 6 times, asynchronously between Regions), in an Active-Passive configuration (i.e. only data from one Azure Region is available at a time). Offers 16 9s of durability over a given year.
					Read-Access Geo Redundant Storage: Similar to Geo Redundant Storage, but the configuration is Active-Active (read-only data is available from both).
					Geo-Zone Redundant Storage: Applies Zone Redundant Storage behaviour for the Primary Azure Region, and Locally Redundant Storage behaviour for the Secondary Azure Region. Offers 16 9s of durability over a given year.
					Read-Access Geo-Zone Redundant Storage: Similar to Geo-Zone Redundant Storage, but the configuration is Active-Active (read-only data is available from both).
				
				// Services:
					Azure Blobs: Massively scalable Object Store for Text and Binary Data, consisting of one or more Storage Containers. In the Kotlin SDK, this is referenced via BlobServiceClientBuilder.
						Storage Container: Contains one or more Blob Files. In the Kotlin SDK, this is referenced via BlobContainerClientBuilder, whilst individual Blobs are referenced via BlobClientBuilder.
							Block Blob:	A collection of one or more data Blocks. Default Blob Type.
							Page Blob: 	A collection of 512-Byte Pages optimized for random read and write operations.
							Append Blob: Similar to a Block Blob, except Blocks can only be appended to the Blob. Each Block is also much smaller than the Blocks in a Block Blob.

						// Tiers:
							Hot: Optimized for storing data that is accessed frequently. This can be changed at the Storage Account / Blob level.
							Cool: Optimized for storing data that is infrequently accessed and stored for at least 30 days. This can be changed at the Storage Account / Blob level.
							Cold: Optimized for storing data that is rarely accessed and stored for at least 90 days. This can be changed at the Storage Account / Blob level.
							Archive: Optimized for storing data for archival purposes (stored for at least 180 days). This cannot be changed at the Storage Account level, but can be set at the Blob level.

						AzCopy: CLI tool for copying Blobs to or from the Storage Account.

					Azure Files: Provides synchronization between On-Prem Storage and Cloud Storage via the Server-Message Block or Netowrk File Share Protocols.
						Azure File Sync: Tool for replicating Files from a local Windows File Server to other Azure locations.

					Azure Disks: See under Azure VMs.
					Queue Storage: Messaging Storage for reliable messaging between Application Components.
					Table Storage: NoSQL Table Option for semi-structured data.

					Azure Storage Explorer: Standalone application for exploring data within a Storage Account.

			Azure Migrate: 	Service for migrating On-Prem data to Azure.
				Azure Data Box: Physical migration service via a proprietary 80TB storage device to help transfer large amounts of data without the need for Network Connectivity.

		Security:
			Active Directory: On-Prem Identity and Access Management Service running on a Windows Server. Does not monitor sign-in attempts, unless linked to Microsoft Entra ID via Microsoft Entra Connect, which synchronizes between the two one-way, from Active Directory to Microsoft Entra ID.
			Microsoft Entra ID: Microsoft's Cloud Based Identity and Access Management Service. Supports Authentication, Single-Sign On, Application and Device Management.
				Microsoft Entra Domain Services: Provides Domain Services such as LDAP, Group Policy, Kerberos / NTLM Authentication that support legacy authentication mechanisms.

				Azure Tenant: Dedicated instance of Microsoft Entra ID that represents an organization.

				Microsoft Entra External ID: Mechanism to allow the organization's Azure Tenant to interact with the profile of Users from other Identity Providers.
					B2B Collaboration: Lets External Users collaborate in the organization's Microsoft / Enterprise Applications by letting them use their preferred identity from another Identity Provider to sign-on. These are represented in the organization's Azure Tenant as Guest Users.
					B2B Direct Connect: Establish a mutual, two-way trust with another Microsoft Entra Instance. Collaboration supported in Teams.
					Azure Active Directory B2C: Allows access to SaaS / Custom Apps to Consumers and Customers by controlling the Identity and Access Management.

				// Authentication Mechanisms:
					Single Sign-On: Enables a User to sign in one time, and use that credential for access to multiple resources and applications from different providers that trust the Authenticator.
					Multi-Factor Authentication: Process of prompting the User for an extra form of identification during the sign-in process, protecting against the scenario where the password was compromised.
					Passwordless Authentication: A more User-friendly approach to Multi-Factor Authentication, replaces a password with a User's Device.
						Windows Hello for Business: Ideal for Employees with designated Windows PC.
						Microsoft Authenticator App: Phone App.
						FIDO2 Security Key: Involves a Physical Device.

					Conditional Access: Allow or Deny access, either partially or fully, to protected resources based on Identity Signals, such as a User's Location, or the Device being used to login.
					Role-Based Access Control (RBAC): Sets pre-defined or custom Access Permissions to a Scope (i.e. Management Groups, Subscriptions, Resource Group, or a Resource), which is enforced on every Request to ARM.

			Microsoft Defender for Cloud: Monitoring Tool for Security Posture measurement and Threat Protection, with capabilities to extend to On-Prem, Hybrid, and Multi-Cloud Environments.
				// Protection Coverage:
					// Azure-Native:
						Azure PaaS: Azure App Service, Azure SQL, Azure Storage Account, Container Registries, etc.
						Networks: Hardens Azure VM Ports.

					// Hybrid Resource: Requires Azure Arc.

					// Multi-Cloud Resource:
						Defender for Containers: Amazon EKS Linux Clusters.
						Defender for Servers: Windows and Linux EC2 Instances.

				Microsoft Cloud Security Benchmark: Collection of High-Impact Security Recommendations that can be applied to help secure Cloud Services.

			Azure Sentinel: Security Information Event Management (SIEM) and Security Orchestration Automated Response Solution.

		Azure Event Hub:	Analogous to Kafka Event Queues, these expose an Event 'Pull' Model for Consumers.
			Requests:		Number of API Requests made.
			Messages:		Number of API Requests that put actual Events into the Event Hub.

		Azure Event Grid:	Router for generated Events; usually to 'Push' Events from their Source to an Event Hub or a Webhook. Note: Has to be in the same Resource Group as the Event Source.
			System Topic: 	Designation for Events produced by other Azure Services.
	
	Details:
		Microsoft Cloud Adoption Framework for Azure: SPRAGM
			S: Define a Strategy
			P: Make a Plan
			R: Ready your Organization
			A: Adopt the Cloud
			G: Govern
			M: Manage

		Azure Well-Architected Framework: 
			For a given System, it should:
				Be Resilient, Available, and Recoverable.
				Be as Secure as needed.
				Support responsible development and operations.
				Accomplish its purpose within acceptable timeframes.
				Deliver a sufficient return on investment.

		Cost of Azure Services:
			Tools:
				TCO Calculator
				Pricing Calculator
				Azure Advisor
				Spending Limits: Specify thresholds to avoid OpEx overruns.

			Factors:
				Resource Type
				Consumption: Pay-as-you-go or Reserved "Contract" Pricing.
				Maintenance
				Geography: Cost of Labor, Power, Taxes vary per Region.
				Network Traffic: Inbound Data Transfers to Azure Datacenters are free, whereas Outbound Data Transfers from Azure Datacenters are priced based on Billing Zones.
				Subscription Type
				Azure Marketplace: Allows purchasing of Azure-based Solutions and Services from Third-Party Vendors - additional costs incurred from leveraging on the Third Party's skills and expertise for their Solution.

				Licensing

		Security Models:
			Zero Trust Security Model: The idea that there should be no security assumptions made, even within what is considered a 'safe' environment.
				Verify Explicitly: Always verify explicity on all Data Points.
				Least Privilege Access: Limit Users to as little access as they need via Just In Time (JIT) / Just Enough Access (JEA) and adaptive Policies, that they need to do their job.
				Assume Breach: Minimize blast radius and Segment Access.

			Defense-In-Depth: A model to protect information and and prevent it from being stolen from those that aren't authorized to access it. Structured in a way such that if one Layer breaks, there are other Layers within to assist.
				Physical Security: Protect Computer Hardware within the Data Center via Physical Safeguards.
				Identity and Access: Manages Infrastructure Access and Change Control by ensuring Identities are secure, via SSO / Multi-Factor Authentication and auditing Change Requests.
				(Network) Perimeter: Uses Distributed DoS Protection to filter large-scale attacks before they can cause DoS to Users, and Perimeter Firewalls to identify and alert on malicious attacks against a Network.
				Network: Limits communication between Resources through Segmentation and Access Control, allowing only what is required.
				Compute: Secures access to Virtual Machines, implement Endpoint Protection on Devices, and keep Systems patched and current.
				Application: Ensures that Applications are secure and free of security vulnerabilities, storing sensitive Application Secrets in a secure storage medium, and enforcing that Security is considered as part of an Application's Design.
				Data: Controls access to Business and Customer Data that needs to be protected.

			Assess, Secure, Defend:
				Continuously Access: Identify and track vulnerabilities.
				Secure: Harden Resources and Services via Microsoft Cloud Security Benchmark.
				Defend: Detect and resolve threats to Resources, Workloads and Servics.

		ARM Template Syntax: https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax
			<name>.params.json: File that defines arguments to be passed into the deploy.json.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentParameters.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": "<argument>"
						},

						// ...
					}
				}

			<name>.deploy.json: File that specifies how Microsoft Resources should be deployed, and the possible parameters for the deployment.
				{
					"$schema": "https://schema.management.azure.com/schemas/<release-date>/deploymentTemplate.json#",
					"contentVersion": "<version>", // Specify the version of this File - e.g. "1.0.0.0"
					"parameters": {
						"<parameter-name>": {
							"value": {
								"type": "<parameter-type>", // e.g. "string"
								"defaultValue": "<default-value>",
								"metadata": {
									"description": "<parameter-documentation>",
								}
							}
						},

						// ...
					},
					"variables": {
						"<variable-name>": "<variable-value>", // "['<value>']" for computed values
							// Azure Template Functions:
								// concat('<string>', ...)
								// parameters('<parameter-name>')
								// variables('<variable-name>')
					},
					"resources": [
						{
							// For Standalone Resources:
							// Define Conditional Logic to determine if this Resource ultimately gets deployed
							"condition": "[not(empty( ... ))]",

							"type": "<azure-resource-provider-namespace>/<azure-resource-type>",
							"apiVersion": "<api-version>",
							"name": "<resource-custom-name>",
							"location": "<geo-location>", // "[resourceGroup().location]"

							"properties": {
								// Specifies the actual configuration of the <azure-resource-type>

								// ...
							},

							// ...
						},
						{
							// For Nested Resources (i.e. Resources that have a Parent Resource):
							"type": "<parent-type>/<child-type>",
							"name": "[concat('<parent-name>', '/', '<child-name>')]",
							"dependsOn": [
								"[resourceId('<parent-type>', '<parent-name>')]"
							],

							// ...
						}

						// ...
					],

					// ...
				}
	
	Commands:
		az interactive # Initialize several IDE features such as Auto-completion and Command Documentation.

		az deployment group validate # Deploy the Resources defined in the <template-file>.json with the specified configuration Parameters. If the deployment succeeds, it should be listed under the Resource Group "deployments" within the Azure Web Portal.
			--resource-group <resource-group> # Specify the Resource Group that the deployment should execute under.
			--template-file <name>.deploy.json
			--parameters <name>.params.json
			<parameter>="<value>"
	
