General Computing Notes:
	Abbreviations:
		REPL: 					Read-Eval-Print Loop.

		API: 					Application Programming Interface.

		OS:						Operating System.

		DSL: 					Domain Specific Language

	Concepts:
		Database:				An organized, structured set of Data within a Computer, accessible in different ways.
		
		API:					A specification on the expected behaviour of the entity it is for.
		Design Patterns:		General, Reusable Solution to Recurring Problems in different Contexts.
		Common Programming Interface: An Interface which transcends Programming Language.

		Program:				A set of Instructions to be performed in Human-Readable Format.
		Runtime:				Converts code written in a High-Level Human-Readable Programming Language down to Machine Language.		
		Executable:				A set of Instructions to be performed after Compilation.

		Artifact:				Generic Term: a tangile by-product of Software Development (i.e. Class Diagram, Executable, etc.).

		Server: 				An entity that provides a Service. Can be Physical (i.e. a dedicated Machine), or Logical (i.e. a Process / Container / Virtual Machine, etc), agnostic of the underlying Implementation (Java, Scala, C, Python, etc. ) or Medium through which it is delivered (i.e. Web, etc.).

		Port:					Signifies a Logical Entryway ('Delivery Box') in a Device.
		Socket:					Endpoint of a Connection defined by a Network Protocol + IP Address + Port Number.

		Network:				A group of Entities that communicate.

		Multiplexer:			Mechanism for routing multiple inputs into a single channel, based on additional selector inputs.

		Main Memory:			Volatile but Highly Accessible Memory. RAM.

		OS:						Low Level Software which coordinates the use of a Computer's various Physical Hardware.
		Thread:					Basic Unit for which the Operating System allocates Processor Time.
		Process:				A running Executable, in which potentially multiple Threads execute with shared resources (i.e. Variables, Address Space) and a common execution state, supporting basic OS-level isolation from other Processes.

		Concurrent Execution: 	A Single Path of Execution interleaving the handling of Multiple Interruptable Tasks within a Time Period.
		Parallel Execution: 	Multiple Paths of Execution handling Multiple Independent Tasks at literally the same time.
		Asynchronous Execution: Non-Blocking Execution - encompasses both Concurrent Execution and Parallel Execution.

		Semaphore:				Construct that manages access of a shared Resource between different Threads.
		Mutex:					Construct that controls access of a shared Resource between different Threads (similar to a Binary Semaphore), but only the Mutex-owning Thread can change whether the Mutex is Open / Closed.

		Daemon:					A non-interactive, background Process.
		Service:				A Process which responds to requests from other Processes over some inter-process communication mechanism.

		Container: 				A semi-isolated Logical Environment (OS Virtualization) that can host a Process and its dependencies with greater OS-level isolation and abstraction.
		Virtual Machine: 		A fully-isolated Logical Environment (Hardware Virtualization) that can host multiple Processes with absolute OS-level isolation through a fully-blown 'Guest OS' running on a Hypervisor mediating sharing of Hardware Resources.

		Cluster Computing:		A Distributed System in which each similar, Local Node works on solving the same type of independent parts of a Problem.
		Grid Computing:			A Distributed System in which each different, relatively independent Global Node works together to solve a Problem. It is Decentralized, with the Computation and Ownership occurring across many Administrative Domains.
		Cloud Computing: 		Simiar to Grid Computing, except that it is Centralized, with the Computation and Ownership occurring within a single Administrative Domain.

	Details:
		REPL:					Used in interactive interpreters (Python, Node, Bash ...).
			Typing '.editor' allows accumulation of several lines of code.

		Design Patterns:
			Fluent Interface Pattern: API that allows for Method Chaining - return 'this' after each chainable function.

			Broker Pattern:		Centralized Handler for Coordination between Decentralized Objects.

		OS Types:
			Unix: 				Proprietary OS.
				Solaris:		One of the Unix Distributions.

			Linux: 				Open Source "Legal" Unix Clone
				Debian:			One of the first GNU/Linux Distributions. Targeted for Advanced Users.
				Ubuntu:			One of the subsequent GNU/Linux Distributions. Targeted for Normal Users.

		Virtualization:			The act of creating a Virtual (as opposed to Actual) version of something.
	
